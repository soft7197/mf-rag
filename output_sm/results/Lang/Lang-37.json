{
    "Lang-37": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* <p>Adds all the elements of the given arrays into a new array.</p>\n* <p>The new array contains all of the element of <code>array1</code> followed\n* by all of the elements <code>array2</code>. When an array is returned, it is always\n* a new array.</p>\n*\n* <pre>\n* ArrayUtils.addAll(null, null)     = null\n* ArrayUtils.addAll(array1, null)   = cloned copy of array1\n* ArrayUtils.addAll(null, array2)   = cloned copy of array2\n* ArrayUtils.addAll([], [])         = []\n* ArrayUtils.addAll([null], [null]) = [null, null]\n* ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n* </pre>\n*\n* @param array1  the first array whose elements are added to the new array, may be <code>null</code>\n* @param array2  the second array whose elements are added to the new array, may be <code>null</code>\n* @return The new array, <code>null</code> if both arrays are <code>null</code>.\n*      The type of the new array is the type of the first array,\n*      unless the first array is null, in which case the type is the same as the second array.\n* @since 2.1\n*/\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        // Check if problem is incompatible types\n    return joinedArray;\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testJira567(){\n\n        Number[] n;\n\n        // Valid array construction\n\n        n = ArrayUtils.addAll(new Number[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n\n        assertEquals(2,n.length);\n\n        assertEquals(Number.class,n.getClass().getComponentType());\n\n        try {\n\n            // Invalid - can't store Long in Integer array\n\n               n = ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n\n               fail(\"Should have generated IllegalArgumentException\");\n\n        } catch (IllegalArgumentException expected) {\n\n        }\n\n    }\n\n```\n#Error message: java.lang.ArrayStoreException\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)  System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testJira567(ArrayUtilsAddTest.java:40)  n = ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n\n    // Determine the common supertype\n    final Class<?> commonType = type1.isAssignableFrom(type2) ? type1 : type2.isAssignableFrom(type1) ? type2 : Number.class;\n\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    \n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    \n    return joinedArray;\n}\n"
                ],
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    \n    final Class<?> commonSuperType = array1.getClass().getComponentType().isAssignableFrom(array2.getClass().getComponentType())\n            ? array1.getClass().getComponentType()\n            : array2.getClass().getComponentType();\n    \n    T[] joinedArray = (T[]) Array.newInstance(commonSuperType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    \n    for (int i = 0; i < array2.length; i++) {\n        if (!commonSuperType.isInstance(array2[i])) {\n            throw new IllegalArgumentException(\"Incompatible array types.\");\n        }\n        joinedArray[array1.length + i] = array2[i];\n    }\n    \n    return joinedArray;\n}\n"
                ],
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n\n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        throw new IllegalArgumentException(\"Incompatible array types\");\n    }\n\n    Class<?> commonType = type1.isAssignableFrom(type2) ? type1 : type2;\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n"
                ],
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    }\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    final Class<?> commonType = type1.isAssignableFrom(type2) ? type1 : type2;\n\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n"
                ],
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    \n    // Determine the common supertype\n    final Class<?> commonType;\n    if (type1.isAssignableFrom(type2)) {\n        commonType = type1;\n    } else if (type2.isAssignableFrom(type1)) {\n        commonType = type2;\n    } else {\n        throw new IllegalArgumentException(\"Incompatible array types: \" + type1 + \" and \" + type2);\n    }\n\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n"
                ],
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    Class<?> commonType = array1.getClass().getComponentType();\n    if (!commonType.isAssignableFrom(array2.getClass().getComponentType())) {\n        commonType = array2.getClass().getComponentType();\n    }\n    if (!commonType.isAssignableFrom(array1.getClass().getComponentType())) {\n        throw new IllegalArgumentException(\"Incompatible array types\");\n    }\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n"
                ],
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    \n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    \n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        throw new IllegalArgumentException(\"Array types are not compatible.\");\n    }\n    \n    final Class<?> commonType = type1.isAssignableFrom(type2) ? type2 : type1;\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    \n    return joinedArray;\n}\n"
                ],
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    // Determine the common superclass of both arrays' component types\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n    Class<?> commonType = type1.isAssignableFrom(type2) ? type1 : type2;\n\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n\n    return joinedArray;\n}\n\nprivate static <T> T[] clone(T[] array) {\n    if (array == null) {\n        return null;\n    }\n    return array.clone();\n}\n"
                ],
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    Class<?> commonType = type1.isAssignableFrom(type2) ? type1 : type2.isAssignableFrom(type1) ? type2 : Object.class;\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    try {\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    } catch (ArrayStoreException e) {\n        throw new IllegalArgumentException(\"Cannot store elements of array2 in array1 type\", e);\n    }\n    return joinedArray;\n}\n"
                ],
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    \n    // Determine the common supertype\n    Class<?> commonType = type1.isAssignableFrom(type2) ? type1 : type2;\n    \n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n\n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        throw new IllegalArgumentException(\"Incompatible array types\");\n    }\n\n    Class<?> commonType = type1.isAssignableFrom(type2) ? type1 : type2;\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n"
                ],
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    \n    // Determine the common supertype\n    final Class<?> commonType;\n    if (type1.isAssignableFrom(type2)) {\n        commonType = type1;\n    } else if (type2.isAssignableFrom(type1)) {\n        commonType = type2;\n    } else {\n        throw new IllegalArgumentException(\"Incompatible array types: \" + type1 + \" and \" + type2);\n    }\n\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n"
                ],
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    Class<?> commonType = array1.getClass().getComponentType();\n    if (!commonType.isAssignableFrom(array2.getClass().getComponentType())) {\n        commonType = array2.getClass().getComponentType();\n    }\n    if (!commonType.isAssignableFrom(array1.getClass().getComponentType())) {\n        throw new IllegalArgumentException(\"Incompatible array types\");\n    }\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    \n    // Determine the common supertype\n    final Class<?> commonType;\n    if (type1.isAssignableFrom(type2)) {\n        commonType = type1;\n    } else if (type2.isAssignableFrom(type1)) {\n        commonType = type2;\n    } else {\n        throw new IllegalArgumentException(\"Incompatible array types: \" + type1 + \" and \" + type2);\n    }\n\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n"
                ],
                [
                    "\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    Class<?> commonType = array1.getClass().getComponentType();\n    if (!commonType.isAssignableFrom(array2.getClass().getComponentType())) {\n        commonType = array2.getClass().getComponentType();\n    }\n    if (!commonType.isAssignableFrom(array1.getClass().getComponentType())) {\n        throw new IllegalArgumentException(\"Incompatible array types\");\n    }\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n"
                ]
            ]
        }
    }
}