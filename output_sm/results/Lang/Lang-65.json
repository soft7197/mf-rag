{
    "Lang-65": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* <p>Internal calculation method.</p>\n*\n* @param val  the calendar\n* @param field  the field constant\n* @param round  true to round, false to truncate\n* @throws ArithmeticException if the year is over 280 million\n*/\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n\n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // see http://issues.apache.org/jira/browse/LANG-59\n    //\n    // Manually truncate milliseconds, seconds and minutes, rather than using\n    // Calendar methods.\n\n\n    // truncate milliseconds\n\n    // truncate seconds\n\n    // truncate minutes\n\n    // reset time\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                //This is our field... we stop looping\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        //This is a special case that's hard to generalize\n                        //If the date is 1, we round up to 16, otherwise\n                        //  we subtract 15 days and add 1 month\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        //We need at add one to this field since the\n                        //  last number causes us to round up\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        //We have various fields that are not easy roundings\n        int offset = 0;\n        boolean offsetSet = false;\n        //These are special types of fields that require different rounding rules\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    //If we're going to drop the DATE field's value,\n                    //  we want to do this our own way.\n                    //We need to subtrace 1 since the date has a minimum of 1\n                    offset = val.get(Calendar.DATE) - 1;\n                    //If we're above 15 days adjustment, that means we're in the\n                    //  bottom half of the month and should stay accordingly.\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    //Record whether we're in the top or bottom half of that range\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    //If we're going to drop the HOUR field's value,\n                    //  we want to do this our own way.\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            //Calculate the offset from the minimum allowed value\n            offset = val.get(fields[i][0]) - min;\n            //Set roundUp if this is more than half way between the minimum and maximum\n            roundUp = offset > ((max - min) / 2);\n        }\n        //We need to remove this field\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testTruncateLang59() throws Exception {\n\n\n\n        // Set TimeZone to Mountain Time\n\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n\n        TimeZone.setDefault(MST_MDT);\n\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n\n        format.setTimeZone(MST_MDT);\n\n\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n\n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n\n\n        assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));\n\n        assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));\n\n        assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));\n\n        assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));\n\n        assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));\n\n\n\n        // ------- Demonstrate Problem -------\n\n        Calendar gval = Calendar.getInstance();\n\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n\n        assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);\n\n\n\n        // ---------- Test Truncate ----------\n\n        assertEquals(\"Truncate Calendar.MILLISECOND\",\n\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n\n\n\n        assertEquals(\"Truncate Calendar.SECOND\",\n\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n\n\n        assertEquals(\"Truncate Calendar.MINUTE\",\n\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));\n\n\n\n        assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n\n\n\n        assertEquals(\"Truncate Calendar.HOUR\",\n\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));\n\n\n\n        assertEquals(\"Truncate Calendar.DATE\",\n\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));\n\n\n\n\n\n        // ---------- Test Round (down) ----------\n\n        assertEquals(\"Round Calendar.MILLISECOND\",\n\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n\n\n\n        assertEquals(\"Round Calendar.SECOND\",\n\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n\n\n        assertEquals(\"Round Calendar.MINUTE\",\n\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));\n\n\n\n        assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n\n\n\n        assertEquals(\"Round Calendar.HOUR\",\n\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));\n\n\n\n        assertEquals(\"Round Calendar.DATE\",\n\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));\n\n\n\n        // restore default time zone\n\n        TimeZone.setDefault(defaultZone);\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: Truncate Calendar.SECOND expected:<Sun Oct 31 01:02:03 MDT 2004> but was:<Sun Oct 31 01:02:03 MST 2004>\n\tat org.apache.commons.lang.time.DateUtilsTest.testTruncateLang59(DateUtilsTest.java:927)  assertEquals(\"Truncate Calendar.SECOND\",                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    // Truncate milliseconds, seconds, and minutes manually\n    val.set(Calendar.MILLISECOND, 0);\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    \n    val.set(Calendar.SECOND, 0);\n    if (field == Calendar.SECOND) {\n        return;\n    }\n    \n    val.set(Calendar.MINUTE, 0);\n    if (field == Calendar.MINUTE) {\n        return;\n    }\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    // Fix for LANG-59: Manually truncate milliseconds, seconds and minutes\n    if (field == Calendar.MILLISECOND) {\n        return; // Nothing to do, already at the smallest unit\n    }\n    \n    if (field == Calendar.SECOND) {\n        val.set(Calendar.MILLISECOND, 0);\n        return;\n    }\n    \n    if (field == Calendar.MINUTE) {\n        val.set(Calendar.MILLISECOND, 0);\n        val.set(Calendar.SECOND, 0);\n        return;\n    }\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    // Truncate milliseconds, seconds, and minutes\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    val.set(Calendar.MILLISECOND, 0);\n\n    if (field == Calendar.SECOND) {\n        return;\n    }\n    val.set(Calendar.SECOND, 0);\n\n    if (field == Calendar.MINUTE) {\n        return;\n    }\n    val.set(Calendar.MINUTE, 0);\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    // Truncate milliseconds, seconds, and minutes as necessary\n    if (field == Calendar.MILLISECOND) {\n        return;\n    } else if (field == Calendar.SECOND) {\n        val.set(Calendar.MILLISECOND, 0);\n    } else if (field == Calendar.MINUTE) {\n        val.set(Calendar.MILLISECOND, 0);\n        val.set(Calendar.SECOND, 0);\n    } else if (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY) {\n        val.set(Calendar.MILLISECOND, 0);\n        val.set(Calendar.SECOND, 0);\n        val.set(Calendar.MINUTE, 0);\n    } else if (field == Calendar.DATE || field == Calendar.DAY_OF_MONTH) {\n        val.set(Calendar.MILLISECOND, 0);\n        val.set(Calendar.SECOND, 0);\n        val.set(Calendar.MINUTE, 0);\n        val.set(Calendar.HOUR_OF_DAY, 0);\n    } else if (field == Calendar.MONTH || field == Calendar.YEAR) {\n        val.set(Calendar.MILLISECOND, 0);\n        val.set(Calendar.SECOND, 0);\n        val.set(Calendar.MINUTE, 0);\n        val.set(Calendar.HOUR_OF_DAY, 0);\n        val.set(Calendar.DAY_OF_MONTH, 1);\n        if (field == Calendar.YEAR) {\n            val.set(Calendar.MONTH, 0);\n        }\n    }\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n\n        // Adjust time zone if necessary\n        if (fields[i][0] == Calendar.SECOND) {\n            TimeZone timeZone = val.getTimeZone();\n            int dstOffset = timeZone.getDSTSavings();\n            if (dstOffset != 0) {\n                val.add(Calendar.MILLISECOND, dstOffset);\n            }\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    // Manually truncate milliseconds, seconds and minutes\n    if (field == Calendar.MILLISECOND) {\n        return; // no need to modify if truncating milliseconds\n    }\n    \n    val.set(Calendar.MILLISECOND, 0);\n    if (field == Calendar.SECOND) {\n        return; // no need to modify further if truncating seconds\n    }\n    \n    val.set(Calendar.SECOND, 0);\n    if (field == Calendar.MINUTE) {\n        return; // no need to modify further if truncating minutes\n    }\n    \n    val.set(Calendar.MINUTE, 0);\n    \n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                //This is our field... we stop looping\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    // Manually truncate milliseconds, seconds and minutes\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    val.set(Calendar.MILLISECOND, 0);\n\n    if (field == Calendar.SECOND) {\n        return;\n    }\n    val.set(Calendar.SECOND, 0);\n\n    if (field == Calendar.MINUTE) {\n        return;\n    }\n    val.set(Calendar.MINUTE, 0);\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "2": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) and relevant context to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* <p>Internal calculation method.</p>\n*\n* @param val  the calendar\n* @param field  the field constant\n* @param round  true to round, false to truncate\n* @throws ArithmeticException if the year is over 280 million\n*/\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n\n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // see http://issues.apache.org/jira/browse/LANG-59\n    //\n    // Manually truncate milliseconds, seconds and minutes, rather than using\n    // Calendar methods.\n\n\n    // truncate milliseconds\n\n    // truncate seconds\n\n    // truncate minutes\n\n    // reset time\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                //This is our field... we stop looping\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        //This is a special case that's hard to generalize\n                        //If the date is 1, we round up to 16, otherwise\n                        //  we subtract 15 days and add 1 month\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        //We need at add one to this field since the\n                        //  last number causes us to round up\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        //We have various fields that are not easy roundings\n        int offset = 0;\n        boolean offsetSet = false;\n        //These are special types of fields that require different rounding rules\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    //If we're going to drop the DATE field's value,\n                    //  we want to do this our own way.\n                    //We need to subtrace 1 since the date has a minimum of 1\n                    offset = val.get(Calendar.DATE) - 1;\n                    //If we're above 15 days adjustment, that means we're in the\n                    //  bottom half of the month and should stay accordingly.\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    //Record whether we're in the top or bottom half of that range\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    //If we're going to drop the HOUR field's value,\n                    //  we want to do this our own way.\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            //Calculate the offset from the minimum allowed value\n            offset = val.get(fields[i][0]) - min;\n            //Set roundUp if this is more than half way between the minimum and maximum\n            roundUp = offset > ((max - min) / 2);\n        }\n        //We need to remove this field\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testTruncateLang59() throws Exception {\n\n\n\n        // Set TimeZone to Mountain Time\n\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n\n        TimeZone.setDefault(MST_MDT);\n\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n\n        format.setTimeZone(MST_MDT);\n\n\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n\n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n\n\n        assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));\n\n        assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));\n\n        assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));\n\n        assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));\n\n        assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));\n\n\n\n        // ------- Demonstrate Problem -------\n\n        Calendar gval = Calendar.getInstance();\n\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n\n        assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);\n\n\n\n        // ---------- Test Truncate ----------\n\n        assertEquals(\"Truncate Calendar.MILLISECOND\",\n\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n\n\n\n        assertEquals(\"Truncate Calendar.SECOND\",\n\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n\n\n        assertEquals(\"Truncate Calendar.MINUTE\",\n\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));\n\n\n\n        assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n\n\n\n        assertEquals(\"Truncate Calendar.HOUR\",\n\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));\n\n\n\n        assertEquals(\"Truncate Calendar.DATE\",\n\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));\n\n\n\n\n\n        // ---------- Test Round (down) ----------\n\n        assertEquals(\"Round Calendar.MILLISECOND\",\n\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n\n\n\n        assertEquals(\"Round Calendar.SECOND\",\n\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n\n\n        assertEquals(\"Round Calendar.MINUTE\",\n\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));\n\n\n\n        assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n\n\n\n        assertEquals(\"Round Calendar.HOUR\",\n\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));\n\n\n\n        assertEquals(\"Round Calendar.DATE\",\n\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));\n\n\n\n        // restore default time zone\n\n        TimeZone.setDefault(defaultZone);\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: Truncate Calendar.SECOND expected:<Sun Oct 31 01:02:03 MDT 2004> but was:<Sun Oct 31 01:02:03 MST 2004>\n\tat org.apache.commons.lang.time.DateUtilsTest.testTruncateLang59(DateUtilsTest.java:927)  assertEquals(\"Truncate Calendar.SECOND\",                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n\n## \ud83d\udca1 Context from Project\n\n            \n```java\npublic static Calendar parse(String original, Locale locale) { DateFormatSymbols symbols = new DateFormatSymbols(locale); String value = original.toLowerCase().trim(); Calendar now = Calendar.getInstance(); if (value.endsWith(\\\" ago\\\")) { value = value.substring(0, value.length() - 4); int start = value.indexOf(\\\" \\\"); if (start < 0) { throw new RuntimeException(\\\"Could not find space in between value and unit\\\"); } String unit = value.substring(start + 1); value = value.substring(0, start); int val = 0; if (value.equals(\\\"a\\\") || value.equals(\\\"an\\\")) { val = 1; } else { val = Integer.parseInt(value); } if (unit.equals(\\\"milliseconds\\\") || unit.equals(\\\"millisecond\\\")) { now.add(Calendar.MILLISECOND, -val); } else if (unit.equals(\\\"seconds\\\") || unit.equals(\\\"second\\\")) { now.add(Calendar.SECOND, -val); } else if (unit.equals(\\\"minutes\\\") || unit.equals(\\\"minute\\\")) { now.add(Calendar.MINUTE, -val); } else if (unit.equals(\\\"hours\\\") || unit.equals(\\\"hour\\\")) { now.add(Calendar.HOUR, -val); } else if (unit.equals(\\\"days\\\") || unit.equals(\\\"day\\\")) { now.add(Calendar.DATE, -val); } else if (unit.equals(\\\"weeks\\\") || unit.equals(\\\"week\\\")) { now.add(Calendar.DATE, -val * 7); } else if (unit.equals(\\\"fortnights\\\") || unit.equals(\\\"fortnight\\\")) { now.add(Calendar.DATE, -val * 14); } else if (unit.equals(\\\"months\\\") || unit.equals(\\\"month\\\")) { now.add(Calendar.MONTH, -val); } else if (unit.equals(\\\"years\\\") || unit.equals(\\\"year\\\")) { now.add(Calendar.YEAR, -val); } else { throw new RuntimeException(\\\"We do not understand that many units ago\\\"); } return now; } else if (value.startsWith(\\\"last \\\")) { value = value.substring(5); String[] strings = symbols.getWeekdays(); for (int i = 0; i < strings.length; i++) { if (value.equalsIgnoreCase(strings[i])) { int daysAgo = now.get(Calendar.DAY_OF_WEEK) - i; if (daysAgo <= 0) { daysAgo += 7; } now.add(Calendar.DATE, -daysAgo); return now; } } strings = symbols.getMonths(); for (int i = 0; i < strings.length; i++) { if (value.equalsIgnoreCase(strings[i])) { int monthsAgo = now.get(Calendar.MONTH) - i; if (monthsAgo <= 0) { monthsAgo += 12; } now.add(Calendar.MONTH, -monthsAgo); return now; } } if (value.equals(\\\"week\\\")) { now.add(Calendar.DATE, -7); return now; } } else if (value.equals(\\\"yesterday\\\")) { now.add(Calendar.DATE, -1); return now; } else if (value.equals(\\\"tomorrow\\\")) { now.add(Calendar.DATE, 1); return now; } for (int i = 0; i < dateFormats.length; i++) { try { Date datetime = dateFormats[i].parse(original); Calendar cal = Calendar.getInstance(); cal.setTime(datetime); return cal; } catch (ParseException pe) { } } throw new RuntimeException(\\\"Unable to parse '\\\" + original + \\\"'.\\\"); }\n```\n\n            \n```java\npublic static Calendar parseCVS(String dateStr) { if (dateStr == null) { throw new IllegalArgumentException(\\\"The date must not be null\\\"); } DateFormatSymbols symbols = new DateFormatSymbols(Locale.ENGLISH); DateFormat[] dateFormats = new DateFormat[0]; String value = dateStr.toLowerCase().trim(); Calendar now = Calendar.getInstance(); if (value.endsWith(\\\" ago\\\")) { value = value.substring(0, value.length() - 4); int start = value.indexOf(\\\" \\\"); if (start < 0) { throw new IllegalArgumentException(\\\"Could not find space in between value and unit\\\"); } String unit = value.substring(start + 1); value = value.substring(0, start); int val = 0; if (value.equals(\\\"a\\\") || value.equals(\\\"an\\\")) { val = 1; } else { val = Integer.parseInt(value); } if (unit.equals(\\\"milliseconds\\\") || unit.equals(\\\"millisecond\\\")) { now.add(Calendar.MILLISECOND, -val); } else if (unit.equals(\\\"seconds\\\") || unit.equals(\\\"second\\\")) { now.add(Calendar.SECOND, -val); } else if (unit.equals(\\\"minutes\\\") || unit.equals(\\\"minute\\\")) { now.add(Calendar.MINUTE, -val); } else if (unit.equals(\\\"hours\\\") || unit.equals(\\\"hour\\\")) { now.add(Calendar.HOUR, -val); } else if (unit.equals(\\\"days\\\") || unit.equals(\\\"day\\\")) { now.add(Calendar.DATE, -val); } else if (unit.equals(\\\"weeks\\\") || unit.equals(\\\"week\\\")) { now.add(Calendar.DATE, -val * 7); } else if (unit.equals(\\\"fortnights\\\") || unit.equals(\\\"fortnight\\\")) { now.add(Calendar.DATE, -val * 14); } else if (unit.equals(\\\"months\\\") || unit.equals(\\\"month\\\")) { now.add(Calendar.MONTH, -val); } else if (unit.equals(\\\"years\\\") || unit.equals(\\\"year\\\")) { now.add(Calendar.YEAR, -val); } else { throw new IllegalArgumentException(\\\"We do not understand that many units ago\\\"); } return now; } else if (value.startsWith(\\\"last \\\")) { value = value.substring(5); String[] strings = symbols.getWeekdays(); for (int i = 0; i < strings.length; i++) { if (value.equalsIgnoreCase(strings[i])) { int daysAgo = now.get(Calendar.DAY_OF_WEEK) - i; if (daysAgo <= 0) { daysAgo += 7; } now.add(Calendar.DATE, -daysAgo); return now; } } strings = symbols.getMonths(); for (int i = 0; i < strings.length; i++) { if (value.equalsIgnoreCase(strings[i])) { int monthsAgo = now.get(Calendar.MONTH) - i; if (monthsAgo <= 0) { monthsAgo += 12; } now.add(Calendar.MONTH, -monthsAgo); return now; } } if (value.equals(\\\"week\\\")) { now.add(Calendar.DATE, -7); return now; } throw new IllegalArgumentException(\\\"We do not understand that last units\\\"); } else if (value.equals(\\\"yesterday\\\")) { now.add(Calendar.DATE, -1); return now; } else if (value.equals(\\\"tomorrow\\\")) { now.add(Calendar.DATE, 1); return now; } for (int i = 0; i < dateFormats.length; i++) { try { Date datetime = dateFormats[i].parse(dateStr); Calendar cal = Calendar.getInstance(); cal.setTime(datetime); return cal; } catch (ParseException pe) { } } throw new IllegalArgumentException(\\\"Unable to parse '\\\" + dateStr + \\\"'.\\\"); }\n```\n\n            \n```java\nprivate static void modify(Calendar val, int field, boolean round) { boolean roundUp = false; for (int i = 0; i < fields.length; i++) { for (int j = 0; j < fields[i].length; j++) { if (fields[i][j] == field) { if (round && roundUp) { if (field == CalendarUtils.SEMI_MONTH) { if (val.get(Calendar.DATE) == 1) { val.add(Calendar.DATE, 15); } else { val.add(Calendar.DATE, -15); val.add(Calendar.MONTH, 1); } } else { val.add(fields[i][0], 1); } } return; } } int offset = 0; boolean offsetSet = false; switch(field) { case CalendarUtils.SEMI_MONTH: if (fields[i][0] == Calendar.DATE) { offset = val.get(Calendar.DATE) - 1; if (offset >= 15) { offset -= 15; } roundUp = offset > 7; offsetSet = true; } break; case Calendar.AM_PM: if (fields[i][0] == Calendar.HOUR) { offset = val.get(Calendar.HOUR); if (offset >= 12) { offset -= 12; } roundUp = offset > 6; offsetSet = true; } break; } if (!offsetSet) { int min = val.getActualMinimum(fields[i][0]); int max = val.getActualMaximum(fields[i][0]); offset = val.get(fields[i][0]) - min; roundUp = offset > ((max - min) / 2); } val.add(fields[i][0], -offset); } throw new RuntimeException(\\\"We do not support that field.\\\"); }\n```\n\n            \n```java\nprotected List parsePattern() { DateFormatSymbols symbols = new DateFormatSymbols(mLocale); List rules = new ArrayList(); String[] ERAs = symbols.getEras(); String[] months = symbols.getMonths(); String[] shortMonths = symbols.getShortMonths(); String[] weekdays = symbols.getWeekdays(); String[] shortWeekdays = symbols.getShortWeekdays(); String[] AmPmStrings = symbols.getAmPmStrings(); int length = mPattern.length(); int[] indexRef = new int[1]; for (int i = 0; i < length; i++) { indexRef[0] = i; String token = parseToken(mPattern, indexRef); i = indexRef[0]; int tokenLen = token.length(); if (tokenLen == 0) { break; } Rule rule; char c = token.charAt(0); switch(c) { case 'G': rule = new TextField(Calendar.ERA, ERAs); break; case 'y': if (tokenLen >= 4) { rule = selectNumberRule(Calendar.YEAR, tokenLen); } else { rule = TwoDigitYearField.INSTANCE; } break; case 'M': if (tokenLen >= 4) { rule = new TextField(Calendar.MONTH, months); } else if (tokenLen == 3) { rule = new TextField(Calendar.MONTH, shortMonths); } else if (tokenLen == 2) { rule = TwoDigitMonthField.INSTANCE; } else { rule = UnpaddedMonthField.INSTANCE; } break; case 'd': rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen); break; case 'h': rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen)); break; case 'H': rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen); break; case 'm': rule = selectNumberRule(Calendar.MINUTE, tokenLen); break; case 's': rule = selectNumberRule(Calendar.SECOND, tokenLen); break; case 'S': rule = selectNumberRule(Calendar.MILLISECOND, tokenLen); break; case 'E': rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays); break; case 'D': rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen); break; case 'F': rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen); break; case 'w': rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen); break; case 'W': rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen); break; case 'a': rule = new TextField(Calendar.AM_PM, AmPmStrings); break; case 'k': rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen)); break; case 'K': rule = selectNumberRule(Calendar.HOUR, tokenLen); break; case 'z': if (tokenLen >= 4) { rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG); } else { rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT); } break; case 'Z': if (tokenLen == 1) { rule = TimeZoneNumberRule.INSTANCE_NO_COLON; } else { rule = TimeZoneNumberRule.INSTANCE_COLON; } break; case '\\'': String sub = token.substring(1); if (sub.length() == 1) { rule = new CharacterLiteral(sub.charAt(0)); } else { rule = new StringLiteral(sub); } break; default: throw new IllegalArgumentException(\\\"Illegal pattern component: \\\" + token); } rules.add(rule); } return rules; }\n```\n\n            \n```java\nprivate static String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens) { if (str == null) { return null; } int len = str.length(); if (len == 0) { return ArrayUtils.EMPTY_STRING_ARRAY; } List list = new ArrayList(); int sizePlus1 = 1; int i = 0, start = 0; boolean match = false; boolean lastMatch = false; if (separatorChars == null) { while (i < len) { if (Character.isWhitespace(str.charAt(i))) { if (match || preserveAllTokens) { lastMatch = true; if (sizePlus1++ == max) { i = len; lastMatch = false; } list.add(str.substring(start, i)); match = false; } start = ++i; continue; } else { lastMatch = false; } match = true; i++; } } else if (separatorChars.length() == 1) { char sep = separatorChars.charAt(0); while (i < len) { if (str.charAt(i) == sep) { if (match || preserveAllTokens) { lastMatch = true; if (sizePlus1++ == max) { i = len; lastMatch = false; } list.add(str.substring(start, i)); match = false; } start = ++i; continue; } else { lastMatch = false; } match = true; i++; } } else { while (i < len) { if (separatorChars.indexOf(str.charAt(i)) >= 0) { if (match || preserveAllTokens) { lastMatch = true; if (sizePlus1++ == max) { i = len; lastMatch = false; } list.add(str.substring(start, i)); match = false; } start = ++i; continue; } else { lastMatch = false; } match = true; i++; } } if (match || (preserveAllTokens && lastMatch)) { list.add(str.substring(start, i)); } return (String[]) list.toArray(new String[list.size()]); }\n```\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    // Truncate milliseconds, seconds, and minutes\n    val.set(Calendar.MILLISECOND, 0);\n    if (field != Calendar.MILLISECOND) {\n        val.set(Calendar.SECOND, 0);\n    }\n    if (field != Calendar.MILLISECOND && field != Calendar.SECOND) {\n        val.set(Calendar.MINUTE, 0);\n    }\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    // Truncate milliseconds, seconds, and minutes\n    if (field == Calendar.MILLISECOND || field == Calendar.SECOND || field == Calendar.MINUTE) {\n        if (field == Calendar.MILLISECOND) {\n            val.set(Calendar.MILLISECOND, 0);\n        }\n        if (field <= Calendar.SECOND) {\n            val.set(Calendar.SECOND, 0);\n        }\n        if (field <= Calendar.MINUTE) {\n            val.set(Calendar.MINUTE, 0);\n        }\n    }\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    // Manually truncate milliseconds, seconds, and minutes\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    val.set(Calendar.MILLISECOND, 0);\n    \n    if (field == Calendar.SECOND) {\n        return;\n    }\n    val.set(Calendar.SECOND, 0);\n    \n    if (field == Calendar.MINUTE) {\n        return;\n    }\n    val.set(Calendar.MINUTE, 0);\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // This is our field... we stop looping\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR) {  // FIX: Changed HOUR_OF_DAY to HOUR\n                    offset = val.get(Calendar.HOUR);  // FIX: Changed HOUR_OF_DAY to HOUR\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    // Manually truncate milliseconds, seconds and minutes\n    val.set(Calendar.MILLISECOND, 0);\n    val.set(Calendar.SECOND, 0);\n    val.set(Calendar.MINUTE, 0);\n    \n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n\n        int offset = 0;\n        boolean offsetSet = false;\n\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    // Truncate milliseconds\n    val.set(Calendar.MILLISECOND, 0);\n    if (field == Calendar.MILLISECOND) return;\n\n    // Truncate seconds\n    val.set(Calendar.SECOND, 0);\n    if (field == Calendar.SECOND) return;\n\n    // Truncate minutes\n    val.set(Calendar.MINUTE, 0);\n    if (field == Calendar.MINUTE) return;\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // This is our field... we stop looping\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // This is a special case that's hard to generalize\n                        // If the date is 1, we round up to 16, otherwise\n                        // we subtract 15 days and add 1 month\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // We need to add one to this field since the\n                        // last number causes us to round up\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        // We have various fields that are not easy roundings\n        int offset = 0;\n        boolean offsetSet = false;\n        // These are special types of fields that require different rounding rules\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    // If we're going to drop the DATE field's value,\n                    // we want to do this our own way.\n                    // We need to subtract 1 since the date has a minimum of 1\n                    offset = val.get(Calendar.DATE) - 1;\n                    // If we're above 15 days adjustment, that means we're in the\n                    // bottom half of the month and should stay accordingly.\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    // Record whether we're in the top or bottom half of that range\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    // If we're going to drop the HOUR field's value,\n                    // we want to do this our own way.\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            // Calculate the offset from the minimum allowed value\n            offset = val.get(fields[i][0]) - min;\n            // Set roundUp if this is more than halfway between the minimum and maximum\n            roundUp = offset > ((max - min) / 2);\n        }\n        // We need to remove this field\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // Manually truncate milliseconds, seconds and minutes, rather than using Calendar methods.\n\n    // truncate milliseconds\n    val.set(Calendar.MILLISECOND, 0);\n\n    // truncate seconds\n    if (field < Calendar.SECOND) {\n        val.set(Calendar.SECOND, 0);\n    }\n\n    // truncate minutes\n    if (field < Calendar.MINUTE) {\n        val.set(Calendar.MINUTE, 0);\n    }\n\n    // reset time\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                //This is our field... we stop looping\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        //This is a special case that's hard to generalize\n                        //If the date is 1, we round up to 16, otherwise\n                        //  we subtract 15 days and add 1 month\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        //We need at add one to this field since the\n                        //  last number causes us to round up\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        //We have various fields that are not easy roundings\n        int offset = 0;\n        boolean offsetSet = false;\n        //These are special types of fields that require different rounding rules\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    //If we're going to drop the DATE field's value,\n                    //  we want to do this our own way.\n                    //We need to subtrace 1 since the date has a minimum of 1\n                    offset = val.get(Calendar.DATE) - 1;\n                    //If we're above 15 days adjustment, that means we're in the\n                    //  bottom half of the month and should stay accordingly.\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    //Record whether we're in the top or bottom half of that range\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    //If we're going to drop the HOUR field's value,\n                    //  we want to do this our own way.\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            //Calculate the offset from the minimum allowed value\n            offset = val.get(fields[i][0]) - min;\n            //Set roundUp if this is more than half way between the minimum and maximum\n            roundUp = offset > ((max - min) / 2);\n        }\n        //We need to remove this field\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    // Manually truncate milliseconds, seconds and minutes\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    val.set(Calendar.MILLISECOND, 0);\n\n    if (field == Calendar.SECOND) {\n        return;\n    }\n    val.set(Calendar.SECOND, 0);\n\n    if (field == Calendar.MINUTE) {\n        return;\n    }\n    val.set(Calendar.MINUTE, 0);\n\n    // reset time for LANG-59 fix\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) { \n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // This is our field... we stop looping\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.add(fields[i][0], -offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ],
                [
                    "\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    // Fix for LANG-59\n    // Manually truncate milliseconds, seconds, and minutes, rather than using Calendar methods.\n    // truncate milliseconds\n    if (field < Calendar.SECOND) {\n        int millis = val.get(Calendar.MILLISECOND);\n        if (!round || millis < 500) {\n            val.set(Calendar.MILLISECOND, 0);\n        } else {\n            val.add(Calendar.SECOND, 1);\n            val.set(Calendar.MILLISECOND, 0);\n        }\n    }\n\n    // truncate seconds\n    if (field < Calendar.MINUTE) {\n        int seconds = val.get(Calendar.SECOND);\n        if (!round || seconds < 30) {\n            val.set(Calendar.SECOND, 0);\n        } else {\n            val.add(Calendar.MINUTE, 1);\n            val.set(Calendar.SECOND, 0);\n        }\n    }\n\n    // truncate minutes\n    if (field < Calendar.HOUR_OF_DAY) {\n        int minutes = val.get(Calendar.MINUTE);\n        if (!round || minutes < 30) {\n            val.set(Calendar.MINUTE, 0);\n        } else {\n            val.add(Calendar.HOUR_OF_DAY, 1);\n            val.set(Calendar.MINUTE, 0);\n        }\n    }\n\n    // reset time\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "iteration_done": true
    }
}