{
    "Lang-29": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* <p>\n* Converts the given Java version string to an <code>int</code>.\n* </p>\n*\n* <p>\n* Example return values:\n* </p>\n* <ul>\n* <li><code>120</code> for Java 1.2</li>\n* <li><code>131</code> for Java 1.3.1</li>\n* <li><code>160</code> for Java 1.6.0_20</li>\n* </ul>\n*\n* <p>\n* Patch releases are not reported.\n* </p>\n* <p>\n* This method is package private instead of private to support unit test invocation.\n* </p>\n*\n* @return the version, for example 131 for Java 1.3.1\n*/\nstatic float toJavaVersionInt(String version) {\n    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testJavaVersionAsInt() {\n\n        assertEquals(0, SystemUtils.toJavaVersionInt(null));\n\n        assertEquals(0, SystemUtils.toJavaVersionInt(\"\"));\n\n        assertEquals(0, SystemUtils.toJavaVersionInt(\"0\"));\n\n        assertEquals(110, SystemUtils.toJavaVersionInt(\"1.1\"));\n\n        assertEquals(120, SystemUtils.toJavaVersionInt(\"1.2\"));\n\n        assertEquals(130, SystemUtils.toJavaVersionInt(\"1.3.0\"));\n\n        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1\"));\n\n        assertEquals(140, SystemUtils.toJavaVersionInt(\"1.4.0\"));\n\n        assertEquals(141, SystemUtils.toJavaVersionInt(\"1.4.1\"));\n\n        assertEquals(142, SystemUtils.toJavaVersionInt(\"1.4.2\"));\n\n        assertEquals(150, SystemUtils.toJavaVersionInt(\"1.5.0\"));\n\n        assertEquals(160, SystemUtils.toJavaVersionInt(\"1.6.0\"));\n\n        assertEquals(131, SystemUtils.toJavaVersionInt(\"JavaVM-1.3.1\"));\n\n        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1 subset\"));\n\n        // This used to return 0f in [lang] version 2.5:\n\n        assertEquals(130, SystemUtils.toJavaVersionInt(\"XXX-1.3.x\"));\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: expected:<0> but was:<0.0>\n\tat org.apache.commons.lang3.SystemUtilsTest.testJavaVersionAsInt(SystemUtilsTest.java:210)  assertEquals(0, SystemUtils.toJavaVersionInt(null));\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    return (int) toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n}\n"
                ],
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    String[] parts = version.split(\"\\\\D+\");\n    int major = (parts.length > 0 && !parts[0].isEmpty()) ? Integer.parseInt(parts[0]) : 0;\n    int minor = (parts.length > 1 && !parts[1].isEmpty()) ? Integer.parseInt(parts[1]) : 0;\n    int patch = (parts.length > 2 && !parts[2].isEmpty()) ? Integer.parseInt(parts[2]) : 0;\n    \n    return major * 100 + minor * 10 + patch;\n}\n"
                ],
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    String[] versionParts = version.replaceAll(\"[^0-9.]\", \"\").split(\"\\\\.\");\n    int major = versionParts.length > 0 ? Integer.parseInt(versionParts[0]) : 0;\n    int minor = versionParts.length > 1 ? Integer.parseInt(versionParts[1]) : 0;\n    int patch = versionParts.length > 2 ? Integer.parseInt(versionParts[2]) : 0;\n    return major * 100 + minor * 10 + patch;\n}\n"
                ],
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    String[] parts = version.split(\"\\\\D+\");\n    int major = (parts.length > 0 && !parts[0].isEmpty()) ? Integer.parseInt(parts[0]) : 0;\n    int minor = (parts.length > 1 && !parts[1].isEmpty()) ? Integer.parseInt(parts[1]) : 0;\n    int patch = (parts.length > 2 && !parts[2].isEmpty()) ? Integer.parseInt(parts[2]) : 0;\n    return major * 100 + minor * 10 + patch;\n}\n"
                ],
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    String[] versionParts = version.split(\"\\\\D+\");\n    int major = versionParts.length > 0 && !versionParts[0].isEmpty() ? Integer.parseInt(versionParts[0]) : 0;\n    int minor = versionParts.length > 1 ? Integer.parseInt(versionParts[1]) : 0;\n    int patch = versionParts.length > 2 ? Integer.parseInt(versionParts[2]) : 0;\n\n    if (major == 1) {\n        return major * 100 + minor * 10 + patch;\n    } else {\n        return major * 100 + minor * 10;\n    }\n}\n"
                ],
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    String[] parts = version.split(\"\\\\D+\");\n    int major = (parts.length > 0 && !parts[0].isEmpty()) ? Integer.parseInt(parts[0]) : 0;\n    int minor = (parts.length > 1 && !parts[1].isEmpty()) ? Integer.parseInt(parts[1]) : 0;\n    int patch = (parts.length > 2 && !parts[2].isEmpty()) ? Integer.parseInt(parts[2]) : 0;\n    return major * 100 + minor * 10 + patch;\n}\n"
                ],
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    return (int) toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n}\n"
                ],
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    String[] parts = version.split(\"[^0-9]+\");\n    int major = parts.length > 0 ? Integer.parseInt(parts[0]) : 0;\n    int minor = parts.length > 1 ? Integer.parseInt(parts[1]) : 0;\n    int patch = parts.length > 2 ? Integer.parseInt(parts[2]) : 0;\n    return major * 100 + minor * 10 + patch;\n}\n"
                ],
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    String[] parts = version.split(\"[^0-9]+\");\n    int major = parts.length > 0 ? Integer.parseInt(parts[0]) : 0;\n    int minor = parts.length > 1 ? Integer.parseInt(parts[1]) : 0;\n    int patch = parts.length > 2 ? Integer.parseInt(parts[2]) : 0;\n    return major * 100 + minor * 10 + patch;\n}\n"
                ],
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    String[] parts = version.split(\"[^0-9]+\");\n    int major = parts.length > 0 ? Integer.parseInt(parts[0]) : 0;\n    int minor = parts.length > 1 ? Integer.parseInt(parts[1]) : 0;\n    int patch = parts.length > 2 ? Integer.parseInt(parts[2]) : 0;\n    \n    return major * 100 + minor * 10 + patch;\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    return (int) toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n}\n"
                ],
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    String[] versionParts = version.replaceAll(\"[^0-9.]\", \"\").split(\"\\\\.\");\n    int major = versionParts.length > 0 ? Integer.parseInt(versionParts[0]) : 0;\n    int minor = versionParts.length > 1 ? Integer.parseInt(versionParts[1]) : 0;\n    int patch = versionParts.length > 2 ? Integer.parseInt(versionParts[2]) : 0;\n    return major * 100 + minor * 10 + patch;\n}\n"
                ],
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    return (int) toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    return (int) toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n}\n"
                ],
                [
                    "\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    String[] versionParts = version.replaceAll(\"[^0-9.]\", \"\").split(\"\\\\.\");\n    int major = versionParts.length > 0 ? Integer.parseInt(versionParts[0]) : 0;\n    int minor = versionParts.length > 1 ? Integer.parseInt(versionParts[1]) : 0;\n    int patch = versionParts.length > 2 ? Integer.parseInt(versionParts[2]) : 0;\n    return major * 100 + minor * 10 + patch;\n}\n"
                ]
            ]
        }
    }
}