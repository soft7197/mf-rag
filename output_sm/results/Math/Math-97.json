{
    "Math-97": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Find a zero in the given interval.\n* <p>\n* Requires that the values of the function at the endpoints have opposite\n* signs. An <code>IllegalArgumentException</code> is thrown if this is not\n* the case.</p>\n*\n* @param min the lower bound for the interval.\n* @param max the upper bound for the interval.\n* @return the value where the function is zero\n* @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n* @throws FunctionEvaluationException if an error occurs evaluating the\n* function\n* @throws IllegalArgumentException if min is not less than max or the\n* signs of the values of the function at the endpoints are not opposites\n*/\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        // check if either value is close to a zero\n            // neither value is close to zero and min and max do not bracket root.\n            throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n        // either min or max is a root\n    }\n\n    return ret;\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testRootEndpoints() throws Exception {\n\n        UnivariateRealFunction f = new SinFunction();\n\n        UnivariateRealSolver solver = new BrentSolver(f);\n\n        \n\n        // endpoint is root\n\n        double result = solver.solve(Math.PI, 4);\n\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n\n\n\n        result = solver.solve(3, Math.PI);\n\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n\n    }\n\n```\n#Error message: \tat org.apache.commons.math.analysis.BrentSolver.solve(BrentSolver.java:141)  throw new IllegalArgumentException\n\tat org.apache.commons.math.analysis.BrentSolverTest.testRootEndpoints(BrentSolverTest.java:279)  result = solver.solve(3, Math.PI);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    if (Math.abs(yMin) < getAbsoluteAccuracy()) {\n        return min;\n    } else if (Math.abs(yMax) < getAbsoluteAccuracy()) {\n        return max;\n    } else if (yMin * yMax > 0) {\n        throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    if (yMin == 0.0) {\n        return min;\n    }\n    if (yMax == 0.0) {\n        return max;\n    }\n    double sign = yMin * yMax;\n    if (sign > 0) {\n        // neither value is close to zero and min and max do not bracket root.\n        throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Check if min or max is already a root\n    if (Math.abs(yMin) < solver.getAbsoluteAccuracy()) {\n        return min;\n    }\n    if (Math.abs(yMax) < solver.getAbsoluteAccuracy()) {\n        return max;\n    }\n\n    // Verify bracketing\n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        // check if either value is close to a zero\n            // neither value is close to zero and min and max do not bracket root.\n            throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n        // either min or max is a root\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    if (yMin == 0) {\n        return min;\n    }\n    if (yMax == 0) {\n        return max;\n    }\n    \n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    if (yMin == 0.0) {\n        return min;\n    }\n    if (yMax == 0.0) {\n        return max;\n    }\n    \n    double sign = yMin * yMax;\n    if (sign > 0) {\n        // neither value is close to zero and min and max do not bracket root.\n        throw new IllegalArgumentException\n        (\"Function values at endpoints do not have different signs.\" +\n                \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n        // either min or max is a root\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Check if either endpoint is a root\n    if (Math.abs(yMin) < getFunctionValueAccuracy()) {\n        return min;\n    }\n    if (Math.abs(yMax) < getFunctionValueAccuracy()) {\n        return max;\n    }\n    \n    // Verify bracketing\n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        // neither value is close to zero and min and max do not bracket root.\n        throw new IllegalArgumentException\n        (\"Function values at endpoints do not have different signs.\" +\n                \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    if (yMin == 0.0) {\n        return min;\n    }\n    if (yMax == 0.0) {\n        return max;\n    }\n    \n    double sign = yMin * yMax;\n    if (sign > 0) {\n        throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    double sign = yMin * yMax;\n    if (sign > 0) {\n        // neither value is close to zero and min and max do not bracket root.\n        throw new IllegalArgumentException\n        (\"Function values at endpoints do not have different signs.\" +\n                \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else if (yMin == 0) {\n        return min;\n    } else if (yMax == 0) {\n        return max;\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    if (yMin == 0.0) {\n        return min;\n    }\n    if (yMax == 0.0) {\n        return max;\n    }\n    \n    double sign = yMin * yMax;\n    if (sign > 0) {\n        // neither value is close to zero and min and max do not bracket root.\n        throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n        // either min or max is a root\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    if (Math.abs(yMin) < 1e-15) {\n        return min;\n    } else if (Math.abs(yMax) < 1e-15) {\n        return max;\n    }\n    \n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    if (Math.abs(yMin) < getAbsoluteAccuracy()) {\n        return min;\n    } else if (Math.abs(yMax) < getAbsoluteAccuracy()) {\n        return max;\n    } else if (yMin * yMax > 0) {\n        throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Check if either endpoint is a root\n    if (Math.abs(yMin) < getFunctionValueAccuracy()) {\n        return min;\n    }\n    if (Math.abs(yMax) < getFunctionValueAccuracy()) {\n        return max;\n    }\n    \n    // Verify bracketing\n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        // neither value is close to zero and min and max do not bracket root.\n        throw new IllegalArgumentException\n        (\"Function values at endpoints do not have different signs.\" +\n                \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    if (Math.abs(yMin) < 1e-15) {\n        return min;\n    } else if (Math.abs(yMax) < 1e-15) {\n        return max;\n    }\n    \n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    if (Math.abs(yMin) < getAbsoluteAccuracy()) {\n        return min;\n    } else if (Math.abs(yMax) < getAbsoluteAccuracy()) {\n        return max;\n    } else if (yMin * yMax > 0) {\n        throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Check if either endpoint is a root\n    if (Math.abs(yMin) < getFunctionValueAccuracy()) {\n        return min;\n    }\n    if (Math.abs(yMax) < getFunctionValueAccuracy()) {\n        return max;\n    }\n    \n    // Verify bracketing\n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        // neither value is close to zero and min and max do not bracket root.\n        throw new IllegalArgumentException\n        (\"Function values at endpoints do not have different signs.\" +\n                \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ],
                [
                    "\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    if (Math.abs(yMin) < 1e-15) {\n        return min;\n    } else if (Math.abs(yMax) < 1e-15) {\n        return max;\n    }\n    \n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}\n"
                ]
            ]
        }
    }
}