{
    "Math-60": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* For this distribution, {@code X}, this method returns {@code P(X < x)}.\n* If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n* as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n*\n* @param x Value at which the CDF is evaluated.\n* @return CDF evaluated at {@code x}.\n* @throws MathException if the algorithm fails to converge\n*/\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    try {\n    return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testExtremeValues() throws Exception {\n\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n\n            double lowerTail = distribution.cumulativeProbability(-i);\n\n            double upperTail = distribution.cumulativeProbability(i);\n\n            if (i < 9) { // make sure not top-coded \n\n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n\n                assertTrue(lowerTail > 0.0d);\n\n                assertTrue(upperTail < 1.0d);\n\n            }\n\n            else { // make sure top coding not reversed\n\n                assertTrue(lowerTail < 0.00001);\n\n                assertTrue(upperTail > 0.99999);\n\n            }\n\n        }\n\n        \n\n        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);\n\n        assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);\n\n        assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);\n\n        assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);\n\n        \n\n   }\n\n```\n#Error message: org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value \u221e\n\tat org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)  throw new ConvergenceException(                  LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,                  x);\n\tat org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)  ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\n\tat org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)  ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n\tat org.apache.commons.math.special.Erf.erf(Erf.java:51)  double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);\n\tat org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)  return 0.5 * (1.0 + Erf.erf((dev) /                    (standardDeviation * FastMath.sqrt(2.0))));\n\tat org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)  assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (dev < -40 * standardDeviation) {\n        return 0;\n    } else if (dev > 40 * standardDeviation) {\n        return 1;\n    } else {\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { \n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        throw new MathException(\"Algorithm failed to converge\", ex);\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    final double absDev = Math.abs(dev);\n    \n    if (absDev > 40 * standardDeviation) {\n        return dev < 0 ? 0.0 : 1.0;\n    }\n    \n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) {\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        throw new MathException(ex);\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        throw new MathException(ex);\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    } else {\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            throw new MathException(ex);\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        throw new MathException(ex);\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        throw new MathException(\"Algorithm failed to converge\", ex);\n    }\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (dev < -40 * standardDeviation) {\n        return 0;\n    } else if (dev > 40 * standardDeviation) {\n        return 1;\n    } else {\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { \n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        throw new MathException(\"Algorithm failed to converge\", ex);\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    final double absDev = Math.abs(dev);\n    \n    if (absDev > 40 * standardDeviation) {\n        return dev < 0 ? 0.0 : 1.0;\n    }\n    \n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) {\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        throw new MathException(ex);\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        throw new MathException(ex);\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    } else {\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            throw new MathException(ex);\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        throw new MathException(ex);\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        throw new MathException(\"Algorithm failed to converge\", ex);\n    }\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        throw new MathException(ex);\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    } else {\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            throw new MathException(ex);\n        }\n    }\n}\n"
                ]
            ]
        }
    }
}