{
    "Math-40": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first  endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testIssue716() {\n\n        BracketingNthOrderBrentSolver solver =\n\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n\n            public double value(double x) {\n\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n\n            }\n\n        };\n\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n\n        Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());\n\n        Assert.assertTrue(sharpTurn.value(result) >= 0);\n\n        Assert.assertEquals(-0.5, result, 1.0e-10);\n\n    }\n\n```\n#Error message: org.apache.commons.math.exception.TooManyEvaluationsException: illegal state: maximal count (100) exceeded: evaluations\n\tat org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount(BaseAbstractUnivariateRealSolver.java:296)  throw new TooManyEvaluationsException(e.getMax());\n\tat org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(BaseAbstractUnivariateRealSolver.java:153)  incrementEvaluationCount();\n\tat org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.doSolve(BracketingNthOrderBrentSolver.java:283)  final double nextY = computeObjectiveValue(nextX);\n\tat org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.solve(BaseAbstractUnivariateRealSolver.java:190)  return doSolve();\n\tat org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.solve(BracketingNthOrderBrentSolver.java:394)  return super.solve(maxEval, f, min, max, startValue);\n\tat org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.testIssue716(BracketingNthOrderBrentSolverTest.java:93)  double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first  endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n        // ensure we don't exceed the maximum evaluations\n        incrementEvaluationCount();\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed points as a start sampling array for solving\n            nbPoints = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA = x[signChangeIndex - 1];\n    double yA = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA = 0;\n    double xB = x[signChangeIndex];\n    double yB = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return absYA < absYB ? xA : xB;\n                case LEFT_SIDE:\n                    return xA;\n                case RIGHT_SIDE:\n                    return xB;\n                case BELOW_SIDE:\n                    return (yA <= 0) ? xA : xB;\n                case ABOVE_SIDE:\n                    return (yA < 0) ? xB : xA;\n                default:\n                    // this should never happen\n                    throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end = nbPoints;\n        boolean valid = false;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            } else {\n                valid = true;\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (!valid) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed points as a start sampling array for solving\n            nbPoints = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA = x[signChangeIndex - 1];\n    double yA = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA = 0;\n    double xB = x[signChangeIndex];\n    double yB = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return absYA < absYB ? xA : xB;\n                case LEFT_SIDE:\n                    return xA;\n                case RIGHT_SIDE:\n                    return xB;\n                case BELOW_SIDE:\n                    return (yA <= 0) ? xA : xB;\n                case ABOVE_SIDE:\n                    return (yA < 0) ? xB : xA;\n                default:\n                    // this should never happen\n                    throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n        // Increment evaluation count at the end of the loop\n        incrementEvaluationCount();\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n        // Increment the evaluation count\n        incrementEvaluationCount();\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA = x[signChangeIndex - 1];\n    double yA = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA = 0;\n    double xB = x[signChangeIndex];\n    double yB = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA < 0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA = x[signChangeIndex - 1];\n    double yA = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA = 0;\n    double xB = x[signChangeIndex];\n    double yB = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy()\n                + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return absYA < absYB ? xA : xB;\n                case LEFT_SIDE:\n                    return xA;\n                case RIGHT_SIDE:\n                    return xB;\n                case BELOW_SIDE:\n                    return (yA <= 0) ? xA : xB;\n                case ABOVE_SIDE:\n                    return (yA < 0) ? xB : xA;\n                default:\n                    // this should never happen\n                    throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n        // Increment the evaluation count\n        incrementEvaluationCount();\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n        // increment the evaluation count\n        incrementEvaluationCount();\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n        // Increment evaluation count to prevent TooManyEvaluationsException\n        incrementEvaluationCount();\n\n    }\n\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "2": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) and relevant context to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first  endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testIssue716() {\n\n        BracketingNthOrderBrentSolver solver =\n\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n\n            public double value(double x) {\n\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n\n            }\n\n        };\n\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n\n        Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());\n\n        Assert.assertTrue(sharpTurn.value(result) >= 0);\n\n        Assert.assertEquals(-0.5, result, 1.0e-10);\n\n    }\n\n```\n#Error message: org.apache.commons.math.exception.TooManyEvaluationsException: illegal state: maximal count (100) exceeded: evaluations\n\tat org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount(BaseAbstractUnivariateRealSolver.java:296)  throw new TooManyEvaluationsException(e.getMax());\n\tat org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(BaseAbstractUnivariateRealSolver.java:153)  incrementEvaluationCount();\n\tat org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.doSolve(BracketingNthOrderBrentSolver.java:283)  final double nextY = computeObjectiveValue(nextX);\n\tat org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.solve(BaseAbstractUnivariateRealSolver.java:190)  return doSolve();\n\tat org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.solve(BracketingNthOrderBrentSolver.java:394)  return super.solve(maxEval, f, min, max, startValue);\n\tat org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.testIssue716(BracketingNthOrderBrentSolverTest.java:93)  double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n\n\n## \ud83d\udca1 Context from Project\n\n            \n```java\npublic Dfp solve(final int maxEval, final UnivariateDfpFunction f, final Dfp min, final Dfp max, final Dfp startValue, final AllowedSolution allowedSolution) { MathUtils.checkNotNull(f); evaluations.setMaximalCount(maxEval); evaluations.resetCount(); Dfp zero = startValue.getZero(); Dfp nan = zero.newInstance((byte) 1, Dfp.QNAN); final Dfp[] x = new Dfp[maximalOrder + 1]; final Dfp[] y = new Dfp[maximalOrder + 1]; x[0] = min; x[1] = startValue; x[2] = max; evaluations.incrementCount(); y[1] = f.value(x[1]); if (y[1].isZero()) { return x[1]; } evaluations.incrementCount(); y[0] = f.value(x[0]); if (y[0].isZero()) { return x[0]; } int nbPoints; int signChangeIndex; if (y[0].multiply(y[1]).negativeOrNull()) { nbPoints = 2; signChangeIndex = 1; } else { evaluations.incrementCount(); y[2] = f.value(x[2]); if (y[2].isZero()) { return x[2]; } if (y[1].multiply(y[2]).negativeOrNull()) { nbPoints = 3; signChangeIndex = 2; } else { throw new NoBracketingException(x[0].toDouble(), x[2].toDouble(), y[0].toDouble(), y[2].toDouble()); } } final Dfp[] tmpX = new Dfp[x.length]; Dfp xA = x[signChangeIndex - 1]; Dfp yA = y[signChangeIndex - 1]; Dfp absXA = xA.abs(); Dfp absYA = yA.abs(); int agingA = 0; Dfp xB = x[signChangeIndex]; Dfp yB = y[signChangeIndex]; Dfp absXB = xB.abs(); Dfp absYB = yB.abs(); int agingB = 0; while (true) { Dfp maxX = absXA.lessThan(absXB) ? absXB : absXA; Dfp maxY = absYA.lessThan(absYB) ? absYB : absYA; final Dfp xTol = absoluteAccuracy.add(relativeAccuracy.multiply(maxX)); if (xB.subtract(xA).subtract(xTol).negativeOrNull() || maxY.lessThan(functionValueAccuracy)) { switch(allowedSolution) { case ANY_SIDE: return absYA.lessThan(absYB) ? xA : xB; case LEFT_SIDE: return xA; case RIGHT_SIDE: return xB; case BELOW_SIDE: return yA.lessThan(zero) ? xA : xB; case ABOVE_SIDE: return yA.lessThan(zero) ? xB : xA; default: throw new MathInternalError(null); } } Dfp targetY; if (agingA >= MAXIMAL_AGING) { targetY = yB.divide(16).negate(); } else if (agingB >= MAXIMAL_AGING) { targetY = yA.divide(16).negate(); } else { targetY = zero; } Dfp nextX; int start = 0; int end = nbPoints; do { System.arraycopy(x, start, tmpX, start, end - start); nextX = guessX(targetY, tmpX, y, start, end); if (!(nextX.greaterThan(xA) && nextX.lessThan(xB))) { if (signChangeIndex - start >= end - signChangeIndex) { ++start; } else { --end; } nextX = nan; } } while (nextX.isNaN() && (end - start > 1)); if (nextX.isNaN()) { nextX = xA.add(xB.subtract(xA).divide(2)); start = signChangeIndex - 1; end = signChangeIndex; } evaluations.incrementCount(); final Dfp nextY = f.value(nextX); if (nextY.isZero()) { return nextX; } if ((nbPoints > 2) && (end - start != nbPoints)) { nbPoints = end - start; System.arraycopy(x, start, x, 0, nbPoints); System.arraycopy(y, start, y, 0, nbPoints); signChangeIndex -= start; } else if (nbPoints == x.length) { nbPoints--; if (signChangeIndex >= (x.length + 1) / 2) { System.arraycopy(x, 1, x, 0, nbPoints); System.arraycopy(y, 1, y, 0, nbPoints); --signChangeIndex; } } System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex); x[signChangeIndex] = nextX; System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex); y[signChangeIndex] = nextY; ++nbPoints; if (nextY.multiply(yA).negativeOrNull()) { xB = nextX; yB = nextY; absYB = yB.abs(); ++agingA; agingB = 0; } else { xA = nextX; yA = nextY; absYA = yA.abs(); agingA = 0; ++agingB; signChangeIndex++; } } }\n```\n\n            \n```java\n@Test public void testParaboloid() { BivariateRealFunction f = new BivariateRealFunction() { public double value(double x, double y) { return 2 * x * x - 3 * y * y + 4 * x * y - 5; } }; BivariateRealGridInterpolator interpolator = new BicubicSplineInterpolator(); double[] xval = new double[] { 3, 4, 5, 6.5 }; double[] yval = new double[] { -4, -3, -2, -1, 0.5, 2.5 }; double[][] zval = new double[xval.length][yval.length]; for (int i = 0; i < xval.length; i++) { for (int j = 0; j < yval.length; j++) { zval[i][j] = f.value(xval[i], yval[j]); } } BivariateRealFunction p = interpolator.interpolate(xval, yval, zval); double x, y; double expected, result; x = 5; y = 0.5; expected = f.value(x, y); result = p.value(x, y); Assert.assertEquals(\\\"On sample point\\\", expected, result, 1e-13); x = 4.5; y = -1.5; expected = f.value(x, y); result = p.value(x, y); Assert.assertEquals(\\\"half-way between sample points (middle of the patch)\\\", expected, result, 0.2); x = 3.5; y = -3.5; expected = f.value(x, y); result = p.value(x, y); Assert.assertEquals(\\\"half-way between sample points (border of the patch)\\\", expected, result, 0.2); }\n```\n\n            \n```java\n@Override public void integrate(final ExpandableStatefulODE equations, final double t) throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime(); final double[] y0 = equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp = y0.clone(); final double[] yDotTmp = new double[y.length]; final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime()); stepStart = equations.getTime(); double hNew = 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t); isLastStep = false; do { interpolator.shift(); double error = 10; while (error >= 1.0) { if (firstTime || !fsal) { computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew; for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k - 1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k - 1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]); } for (int j = 0; j < y0.length; ++j) { double sum = b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum += b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } error = estimateError(yDotK, y, yTmp, stepSize); if (error >= 1.0) { final double factor = FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp))); hNew = filterStep(stepSize * factor, forward, false); } } interpolator.storeTime(stepStart + stepSize); System.arraycopy(yTmp, 0, y, 0, y0.length); System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length); stepStart = acceptStep(interpolator, y, yDotTmp, t); System.arraycopy(y, 0, yTmp, 0, y.length); if (!isLastStep) { interpolator.storeTime(stepStart); if (fsal) { System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length); } final double factor = FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp))); final double scaledH = stepSize * factor; final double nextT = stepStart + scaledH; final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t); hNew = filterStep(scaledH, forward, nextIsLast); final double filteredNextT = stepStart + hNew; final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t); if (filteredNextIsLast) { hNew = t - stepStart; } } } while (!isLastStep); equations.setTime(stepStart); equations.setCompleteState(y); resetInternalState(); }\n```\n\n            \n```java\n@Test public void testPlane() { BivariateRealFunction f = new BivariateRealFunction() { public double value(double x, double y) { return 2 * x - 3 * y + 5; } }; BivariateRealGridInterpolator interpolator = new BicubicSplineInterpolator(); double[] xval = new double[] { 3, 4, 5, 6.5 }; double[] yval = new double[] { -4, -3, -1, 2, 2.5 }; double[][] zval = new double[xval.length][yval.length]; for (int i = 0; i < xval.length; i++) { for (int j = 0; j < yval.length; j++) { zval[i][j] = f.value(xval[i], yval[j]); } } BivariateRealFunction p = interpolator.interpolate(xval, yval, zval); double x, y; double expected, result; x = 4; y = -3; expected = f.value(x, y); result = p.value(x, y); Assert.assertEquals(\\\"On sample point\\\", expected, result, 1e-15); x = 4.5; y = -1.5; expected = f.value(x, y); result = p.value(x, y); Assert.assertEquals(\\\"half-way between sample points (middle of the patch)\\\", expected, result, 0.3); x = 3.5; y = -3.5; expected = f.value(x, y); result = p.value(x, y); Assert.assertEquals(\\\"half-way between sample points (border of the patch)\\\", expected, result, 0.3); }\n```\n\n            \n```java\npublic long nextPoisson(double mean) { if (mean <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean); } final double pivot = 40.0d; if (mean < pivot) { final RandomGenerator generator = getRan(); double p = FastMath.exp(-mean); long n = 0; double r = 1.0d; double rnd = 1.0d; while (n < 1000 * mean) { rnd = generator.nextDouble(); r = r * rnd; if (r >= p) { n++; } else { return n; } } return n; } else { final double lambda = FastMath.floor(mean); final double lambdaFractional = mean - lambda; final double logLambda = FastMath.log(lambda); final double logLambdaFactorial = ArithmeticUtils.factorialLog((int) lambda); final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional); final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1)); final double halfDelta = delta / 2; final double twolpd = 2 * lambda + delta; final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda); final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd); final double aSum = a1 + a2 + 1; final double p1 = a1 / aSum; final double p2 = a2 / aSum; final double c1 = 1 / (8 * lambda); double x = 0; double y = 0; double v = 0; int a = 0; double t = 0; double qr = 0; double qa = 0; for (; ; ) { final double u = nextUniform(0.0, 1); if (u <= p1) { final double n = nextGaussian(0d, 1d); x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d; if (x > delta || x < -lambda) { continue; } y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x); final double e = nextExponential(1d); v = -e - (n * n / 2) + c1; } else { if (u > p1 + p2) { y = lambda; break; } else { x = delta + (twolpd / delta) * nextExponential(1d); y = FastMath.ceil(x); v = -nextExponential(1d) - delta * (x + 1) / twolpd; } } a = x < 0 ? 1 : 0; t = y * (y + 1) / (2 * lambda); if (v < -t && a == 0) { y = lambda + y; break; } qr = t * ((2 * y + 1) / (6 * lambda) - 1); qa = qr - (t * t) / (3 * (lambda + a * (y + 1))); if (v < qa) { y = lambda + y; break; } if (v > qr) { continue; } if (v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) { y = lambda + y; break; } } return y2 + (long) y; } }\n```\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, getFunctionValueAccuracy())) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, getFunctionValueAccuracy())) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, getFunctionValueAccuracy())) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA = x[signChangeIndex - 1];\n    double yA = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA = 0;\n    double xB = x[signChangeIndex];\n    double yB = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return absYA < absYB ? xA : xB;\n                case LEFT_SIDE:\n                    return xA;\n                case RIGHT_SIDE:\n                    return xB;\n                case BELOW_SIDE:\n                    return (yA <= 0) ? xA : xB;\n                case ABOVE_SIDE:\n                    return (yA < 0) ? xB : xA;\n                default:\n                    // this should never happen\n                    throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, getFunctionValueAccuracy())) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        evaluations.incrementCount();  // Ensure evaluation count is incremented\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is either not strictly inside the interval\n                // or it is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first  endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        incrementEvaluationCount();\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        // Fix: add this line to correctly increment the evaluation count\n        incrementEvaluationCount();\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA = x[signChangeIndex - 1];\n    double yA = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA = 0;\n    double xB = x[signChangeIndex];\n    double yB = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return absYA < absYB ? xA : xB;\n                case LEFT_SIDE:\n                    return xA;\n                case RIGHT_SIDE:\n                    return xB;\n                case BELOW_SIDE:\n                    return (yA <= 0) ? xA : xB;\n                case ABOVE_SIDE:\n                    return (yA < 0) ? xB : xA;\n                default:\n                    // this should never happen\n                    throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        // update evaluation count (new line added)\n        incrementEvaluationCount();\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed points as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX = Double.NaN;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            double _nextX = guessX(targetY, tmpX, y, start, end);\n\n            if ((_nextX > xA) && (_nextX < xB)) {\n                // the guessed root is strictly inside of the tightest bracketing interval\n                nextX = _nextX;\n            } else {\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n            }\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed points as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            agingB = 0;\n            ++agingA;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first  endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA < 0) { // Use strict inequality\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n\n        }\n\n    }\n\n}\n"
                ],
                [
                    "\n/**\n* {@inheritDoc}\n*/\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        // return the initial guess if it is a perfect root.\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        // return the first endpoint if it is a perfect root.\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n\n        // reduce interval if it brackets the root\n        nbPoints        = 2;\n        signChangeIndex = 1;\n\n    } else {\n\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];\n        }\n\n        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n            case ANY_SIDE :\n                return absYA < absYB ? xA : xB;\n            case LEFT_SIDE :\n                return xA;\n            case RIGHT_SIDE :\n                return xB;\n            case BELOW_SIDE :\n                return (yA <= 0) ? xA : xB;\n            case ABOVE_SIDE :\n                return (yA <  0) ? xB : xA;\n            default :\n                // this should never happen\n                throw new MathInternalError(null);\n            }\n        }\n\n        // target for the next evaluation point\n        double targetY;\n        if (agingA >= MAXIMAL_AGING) {\n            // we keep updating the high bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yB;\n        } else if (agingB >= MAXIMAL_AGING) {\n            // we keep updating the low bracket, try to compensate this\n            targetY = -REDUCTION_FACTOR * yA;\n        } else {\n            // bracketing is balanced, try to find the root itself\n            targetY = 0;\n        }\n\n        // make a few attempts to guess a root,\n        double nextX;\n        int start = 0;\n        int end   = nbPoints;\n        do {\n\n            // guess a value for current target, using inverse polynomial interpolation\n            System.arraycopy(x, start, tmpX, start, end - start);\n            nextX = guessX(targetY, tmpX, y, start, end);\n\n            if (!((nextX > xA) && (nextX < xB))) {\n                // the guessed root is not strictly inside of the tightest bracketing interval\n\n                // the guessed root is either not strictly inside the interval or it\n                // is a NaN (which occurs when some sampling points share the same y)\n                // we try again with a lower interpolation order\n                if (signChangeIndex - start >= end - signChangeIndex) {\n                    // we have more points before the sign change, drop the lowest point\n                    ++start;\n                } else {\n                    // we have more points after sign change, drop the highest point\n                    --end;\n                }\n\n                // we need to do one more attempt\n                nextX = Double.NaN;\n\n            }\n\n        } while (Double.isNaN(nextX) && (end - start > 1));\n\n        if (Double.isNaN(nextX)) {\n            // fall back to bisection\n            nextX = xA + 0.5 * (xB - xA);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        }\n\n        // evaluate the function at the guessed root\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            // we have found an exact root, since it is not an approximation\n            // we don't need to bother about the allowed solutions setting\n            return nextX;\n        }\n\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n\n            // we have been forced to ignore some points to keep bracketing,\n            // they are probably too far from the root, drop them from now on\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n\n        } else  if (nbPoints == x.length) {\n\n            // we have to drop one point in order to insert the new one\n            nbPoints--;\n\n            // keep the tightest bracketing interval as centered as possible\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                // we drop the lowest point, we have to shift the arrays and the index\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n\n        }\n\n        // insert the last computed point\n        //(by construction, we know it lies inside the tightest bracketing interval)\n        System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // the sign change occurs before the inserted point\n            xB = nextX;\n            yB = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // the sign change occurs after the inserted point\n            xA = nextX;\n            yA = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n\n            // update the sign change index\n            signChangeIndex++;\n        }\n    }\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "iteration_done": true
    }
}