{
    "Math-57": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Use K-means++ to choose the initial centers.\n*\n* @param <T> type of the points to cluster\n* @param points the points to choose the initial centers from\n* @param k the number of centers to choose\n* @param random random generator to use\n* @return the initial centers\n*/\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        int sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            sum += d * d;\n            dx2[i] = sum;\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)2\n        final double r = random.nextDouble() * sum;\n        for (int i = 0 ; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n     * A helper class for testSmallDistances(). This class is similar to EuclideanIntegerPoint, but\n\n     * it defines a different distanceFrom() method that tends to return distances less than 1.\n\n     */\n\n    private class CloseIntegerPoint implements Clusterable<CloseIntegerPoint> {\n\n        public CloseIntegerPoint(EuclideanIntegerPoint point) {\n\n            euclideanPoint = point;\n\n        }\n\n\n\n        public double distanceFrom(CloseIntegerPoint p) {\n\n            return euclideanPoint.distanceFrom(p.euclideanPoint) * 0.001;\n\n        }\n\n\n\n        public CloseIntegerPoint centroidOf(Collection<CloseIntegerPoint> p) {\n\n            Collection<EuclideanIntegerPoint> euclideanPoints =\n\n                new ArrayList<EuclideanIntegerPoint>();\n\n            for (CloseIntegerPoint point : p) {\n\n                euclideanPoints.add(point.euclideanPoint);\n\n            }\n\n            return new CloseIntegerPoint(euclideanPoint.centroidOf(euclideanPoints));\n\n        }\n\n\n\n        @Override\n\n        public boolean equals(Object o) {\n\n            if (!(o instanceof CloseIntegerPoint)) {\n\n                return false;\n\n            }\n\n            CloseIntegerPoint p = (CloseIntegerPoint) o;\n\n\n\n            return euclideanPoint.equals(p.euclideanPoint);\n\n        }\n\n\n\n        @Override\n\n        public int hashCode() {\n\n            return euclideanPoint.hashCode();\n\n        }\n\n\n\n        private EuclideanIntegerPoint euclideanPoint;\n\n    }\n\n    public void testSmallDistances() {\n\n        // Create a bunch of CloseIntegerPoints. Most are identical, but one is different by a\n\n        // small distance.\n\n        int[] repeatedArray = { 0 };\n\n        int[] uniqueArray = { 1 };\n\n        CloseIntegerPoint repeatedPoint =\n\n            new CloseIntegerPoint(new EuclideanIntegerPoint(repeatedArray));\n\n        CloseIntegerPoint uniquePoint =\n\n            new CloseIntegerPoint(new EuclideanIntegerPoint(uniqueArray));\n\n\n\n        Collection<CloseIntegerPoint> points = new ArrayList<CloseIntegerPoint>();\n\n        final int NUM_REPEATED_POINTS = 10 * 1000;\n\n        for (int i = 0; i < NUM_REPEATED_POINTS; ++i) {\n\n            points.add(repeatedPoint);\n\n        }\n\n        points.add(uniquePoint);\n\n\n\n        // Ask a KMeansPlusPlusClusterer to run zero iterations (i.e., to simply choose initial\n\n        // cluster centers).\n\n        final long RANDOM_SEED = 0;\n\n        final int NUM_CLUSTERS = 2;\n\n        final int NUM_ITERATIONS = 0;\n\n        KMeansPlusPlusClusterer<CloseIntegerPoint> clusterer =\n\n            new KMeansPlusPlusClusterer<CloseIntegerPoint>(new Random(RANDOM_SEED));\n\n        List<Cluster<CloseIntegerPoint>> clusters =\n\n            clusterer.cluster(points, NUM_CLUSTERS, NUM_ITERATIONS);\n\n\n\n        // Check that one of the chosen centers is the unique point.\n\n        boolean uniquePointIsCenter = false;\n\n        for (Cluster<CloseIntegerPoint> cluster : clusters) {\n\n            if (cluster.getCenter().equals(uniquePoint)) {\n\n                uniquePointIsCenter = true;\n\n            }\n\n        }\n\n        assertTrue(uniquePointIsCenter);\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError\n\tat org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testSmallDistances(KMeansPlusPlusClustererTest.java:249)  assertTrue(uniquePointIsCenter);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0;  // Changed from int to double\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d;\n            sum += dx2[i];  // Accumulate the distances squared\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)^2\n        final double r = random.nextDouble() * sum;\n        for (int i = 0 ; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}\n"
                ],
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d;\n            sum += dx2[i];\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)^2\n        final double r = random.nextDouble() * sum;\n        double cumulativeProbability = 0.0;\n        for (int i = 0; i < dx2.length; i++) {\n            cumulativeProbability += dx2[i];\n            if (cumulativeProbability >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}\n"
                ],
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d;\n            sum += dx2[i];\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)^2\n        final double r = random.nextDouble() * sum;\n        for (int i = 0; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}\n"
                ],
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d;\n            sum += dx2[i];\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)2\n        final double r = random.nextDouble() * sum;\n        for (int i = 0 ; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n\n}\n"
                ],
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d;\n            sum += dx2[i];\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)^2\n        final double r = random.nextDouble() * sum;\n        double cumulativeProbability = 0.0;\n        for (int i = 0; i < dx2.length; i++) {\n            cumulativeProbability += dx2[i];\n            if (cumulativeProbability >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}\n"
                ],
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0; // Changed from int to double\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d; // Store squared distance\n            sum += dx2[i];\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)2\n        final double r = random.nextDouble() * sum;\n        for (int i = 0; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}\n"
                ],
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d;\n            sum += dx2[i];\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)2\n        final double r = random.nextDouble() * sum;\n        for (int i = 0; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n            r -= dx2[i];\n        }\n    }\n\n    return resultSet;\n}\n"
                ],
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d;\n            sum += dx2[i];\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)^2\n        final double r = random.nextDouble() * sum;\n        for (int i = 0; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}\n"
                ],
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            sum += d * d;\n            dx2[i] = sum;\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)2\n        final double r = random.nextDouble() * sum;\n        for (int i = 0 ; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n\n}\n"
                ],
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d;\n            sum += dx2[i];\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)^2\n        final double r = random.nextDouble() * sum;\n        for (int i = 0; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d;\n            sum += dx2[i];\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)^2\n        final double r = random.nextDouble() * sum;\n        double cumulativeProbability = 0.0;\n        for (int i = 0; i < dx2.length; i++) {\n            cumulativeProbability += dx2[i];\n            if (cumulativeProbability >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}\n"
                ],
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d;\n            sum += dx2[i];\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)^2\n        final double r = random.nextDouble() * sum;\n        double cumulativeProbability = 0.0;\n        for (int i = 0; i < dx2.length; i++) {\n            cumulativeProbability += dx2[i];\n            if (cumulativeProbability >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}\n"
                ],
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            sum += d * d;\n            dx2[i] = sum;\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)2\n        final double r = random.nextDouble() * sum;\n        for (int i = 0 ; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n\n}\n"
                ]
            ],
            "compiler_error_or_timeout": true,
            "plausible_patches": [
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d;\n            sum += dx2[i];\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)^2\n        final double r = random.nextDouble() * sum;\n        double cumulativeProbability = 0.0;\n        for (int i = 0; i < dx2.length; i++) {\n            cumulativeProbability += dx2[i];\n            if (cumulativeProbability >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}\n"
                ],
                [
                    "\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            sum += d * d;\n            dx2[i] = sum;\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)2\n        final double r = random.nextDouble() * sum;\n        for (int i = 0 ; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n\n}\n"
                ]
            ]
        }
    }
}