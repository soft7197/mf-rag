{
    "Math-103": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* For this disbution, X, this method returns P(X &lt; <code>x</code>).\n* @param x the value at which the CDF is evaluated.\n* @return CDF evaluted at <code>x</code>.\n* @throws MathException if the algorithm fails to converge; unless\n* x is more than 20 standard deviations from the mean, in which case the\n* convergence exception is caught and 0 or 1 is returned.\n*/\npublic double cumulativeProbability(double x) throws MathException {\n        return 0.5 * (1.0 + Erf.erf((x - mean) /\n                (standardDeviation * Math.sqrt(2.0))));\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testExtremeValues() throws Exception {\n\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n\n        distribution.setMean(0);\n\n        distribution.setStandardDeviation(1);\n\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n\n            double upperTail = distribution.cumulativeProbability((double) i);\n\n            if (i < 10) { // make sure not top-coded\n\n                assertTrue(lowerTail > 0.0d);\n\n                assertTrue(upperTail < 1.0d);\n\n            }\n\n            else { // make sure top coding not reversed\n\n                assertTrue(lowerTail < 0.00001);\n\n                assertTrue(upperTail > 0.99999);\n\n            }\n\n        } \n\n   }\n\n```\n#Error message: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded\n\tat org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)  throw new MaxIterationsExceededException(maxIterations);\n\tat org.apache.commons.math.special.Erf.erf(Erf.java:56)  double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);\n\tat org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)  return 0.5 * (1.0 + Erf.erf((x - mean) /                    (standardDeviation * Math.sqrt(2.0))));\n\tat org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)  double lowerTail = distribution.cumulativeProbability((double)-i);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) /\n                (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException e) {\n        if (x - mean > 20 * standardDeviation) {\n            return 1.0;\n        } else if (mean - x > 20 * standardDeviation) {\n            return 0.0;\n        } else {\n            throw new MathException(\"Convergence failed\", e);\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) /\n                (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException e) {\n        if (x < mean - 20 * standardDeviation) {\n            return 0.0;\n        } else if (x > mean + 20 * standardDeviation) {\n            return 1.0;\n        } else {\n            throw e;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = x - mean;\n    if (Math.abs(dev) > 20 * standardDeviation) {\n        return (dev < 0) ? 0.0 : 1.0;\n    }\n    return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n    try {\n        return 0.5 * (1.0 + Erf.erf(dev));\n    } catch (MaxIterationsExceededException e) {\n        if (dev < -20) {\n            return 0.0;\n        } else if (dev > 20) {\n            return 1.0;\n        } else {\n            throw e;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n    if (dev > 20) {\n        return 1.0;\n    } else if (dev < -20) {\n        return 0.0;\n    }\n    return 0.5 * (1.0 + Erf.erf(dev));\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / standardDeviation;\n    if (dev < -20) {\n        return 0.0;\n    } else if (dev > 20) {\n        return 1.0;\n    } else {\n        return 0.5 * (1.0 + Erf.erf(dev / Math.sqrt(2.0)));\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) /\n                (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException e) {\n        if (x < mean) {\n            return 0.0;\n        } else {\n            return 1.0;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / standardDeviation;\n    if (dev < -20) {\n        return 0.0;\n    } else if (dev > 20) {\n        return 1.0;\n    } else {\n        return 0.5 * (1.0 + Erf.erf(dev / Math.sqrt(2.0)));\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n    if (dev < -20) {\n        return 0.0;\n    } else if (dev > 20) {\n        return 1.0;\n    } else {\n        return 0.5 * (1.0 + Erf.erf(dev));\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) /\n                (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException e) {\n        if (x < mean) {\n            return 0.0;\n        } else {\n            return 1.0;\n        }\n    }\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) /\n                (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException e) {\n        if (x - mean > 20 * standardDeviation) {\n            return 1.0;\n        } else if (mean - x > 20 * standardDeviation) {\n            return 0.0;\n        } else {\n            throw new MathException(\"Convergence failed\", e);\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) /\n                (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException e) {\n        if (x < mean - 20 * standardDeviation) {\n            return 0.0;\n        } else if (x > mean + 20 * standardDeviation) {\n            return 1.0;\n        } else {\n            throw e;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = x - mean;\n    if (Math.abs(dev) > 20 * standardDeviation) {\n        return (dev < 0) ? 0.0 : 1.0;\n    }\n    return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n    try {\n        return 0.5 * (1.0 + Erf.erf(dev));\n    } catch (MaxIterationsExceededException e) {\n        if (dev < -20) {\n            return 0.0;\n        } else if (dev > 20) {\n            return 1.0;\n        } else {\n            throw e;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n    if (dev > 20) {\n        return 1.0;\n    } else if (dev < -20) {\n        return 0.0;\n    }\n    return 0.5 * (1.0 + Erf.erf(dev));\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / standardDeviation;\n    if (dev < -20) {\n        return 0.0;\n    } else if (dev > 20) {\n        return 1.0;\n    } else {\n        return 0.5 * (1.0 + Erf.erf(dev / Math.sqrt(2.0)));\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) /\n                (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException e) {\n        if (x < mean) {\n            return 0.0;\n        } else {\n            return 1.0;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / standardDeviation;\n    if (dev < -20) {\n        return 0.0;\n    } else if (dev > 20) {\n        return 1.0;\n    } else {\n        return 0.5 * (1.0 + Erf.erf(dev / Math.sqrt(2.0)));\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n    if (dev < -20) {\n        return 0.0;\n    } else if (dev > 20) {\n        return 1.0;\n    } else {\n        return 0.5 * (1.0 + Erf.erf(dev));\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) /\n                (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException e) {\n        if (x < mean) {\n            return 0.0;\n        } else {\n            return 1.0;\n        }\n    }\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) /\n                (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException e) {\n        if (x - mean > 20 * standardDeviation) {\n            return 1.0;\n        } else if (mean - x > 20 * standardDeviation) {\n            return 0.0;\n        } else {\n            throw new MathException(\"Convergence failed\", e);\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) /\n                (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException e) {\n        if (x < mean - 20 * standardDeviation) {\n            return 0.0;\n        } else if (x > mean + 20 * standardDeviation) {\n            return 1.0;\n        } else {\n            throw e;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = x - mean;\n    if (Math.abs(dev) > 20 * standardDeviation) {\n        return (dev < 0) ? 0.0 : 1.0;\n    }\n    return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n    try {\n        return 0.5 * (1.0 + Erf.erf(dev));\n    } catch (MaxIterationsExceededException e) {\n        if (dev < -20) {\n            return 0.0;\n        } else if (dev > 20) {\n            return 1.0;\n        } else {\n            throw e;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n    if (dev > 20) {\n        return 1.0;\n    } else if (dev < -20) {\n        return 0.0;\n    }\n    return 0.5 * (1.0 + Erf.erf(dev));\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / standardDeviation;\n    if (dev < -20) {\n        return 0.0;\n    } else if (dev > 20) {\n        return 1.0;\n    } else {\n        return 0.5 * (1.0 + Erf.erf(dev / Math.sqrt(2.0)));\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) /\n                (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException e) {\n        if (x < mean) {\n            return 0.0;\n        } else {\n            return 1.0;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n    if (dev < -20) {\n        return 0.0;\n    } else if (dev > 20) {\n        return 1.0;\n    } else {\n        return 0.5 * (1.0 + Erf.erf(dev));\n    }\n}\n"
                ]
            ]
        }
    }
}