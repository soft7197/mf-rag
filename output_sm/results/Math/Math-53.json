{
    "Math-53": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Return the sum of this complex number and the given complex number.\n* <p>\n* Uses the definitional formula\n* <pre>\n* (a + bi) + (c + di) = (a+c) + (b+d)i\n* </pre></p>\n* <p>\n* If either this or <code>rhs</code> has a NaN value in either part,\n* {@link #NaN} is returned; otherwise Infinite and NaN values are\n* returned in the parts of the result according to the rules for\n* {@link java.lang.Double} arithmetic.</p>\n*\n* @param rhs the other complex number\n* @return the complex number sum\n* @throws NullArgumentException if <code>rhs</code> is null\n*/\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testAddNaN() {\n\n        Complex x = new Complex(3.0, 4.0);\n\n        Complex z = x.add(Complex.NaN);\n\n        Assert.assertTrue(z.isNaN());\n\n        z = new Complex(1, nan);\n\n        Complex w = x.add(z);\n\n        Assert.assertTrue(Double.isNaN(w.getReal()));\n\n        Assert.assertTrue(Double.isNaN(w.getImaginary()));\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError\n\tat org.apache.commons.math.complex.ComplexTest.testAddNaN(ComplexTest.java:116)  Assert.assertTrue(Double.isNaN(w.getReal()));\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ],
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ]
            ],
            "compiler_error_or_timeout": true,
            "plausible_patches": [
                [
                    "\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (this.isNaN() || rhs.isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n"
                ]
            ]
        }
    }
}