{
    "Mockito-34": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* similar means the same method name, same mock, unverified\n* and: if arguments are the same cannot be overloaded\n*/\npublic void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments) {\n            ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n        }\n        k++;\n    }\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void shouldMatchCaptureArgumentsWhenArgsCountDoesNOTMatch() throws Exception {\n\n        //given\n\n        mock.varargs();\n\n        Invocation invocation = getLastInvocation();\n\n\n\n        //when\n\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new LocalizedMatcher(AnyVararg.ANY_VARARG)));\n\n\n\n        //then\n\n        invocationMatcher.captureArgumentsFrom(invocation);\n\n    }\n\n```\n#Error message: java.lang.ArrayIndexOutOfBoundsException: 0\n\tat org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(InvocationMatcher.java:107)  ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n\tat org.mockito.internal.invocation.InvocationMatcherTest.shouldMatchCaptureArgumentsWhenArgsCountDoesNOTMatch(InvocationMatcherTest.java:152)  invocationMatcher.captureArgumentsFrom(invocation);\n \n#Test method 2:\n```java\n    public void shouldMatchEasilyEmptyVararg() throws Exception {\n\n        //when\n\n        when(mock.foo(anyVararg())).thenReturn(-1);\n\n\n\n        //then\n\n        assertEquals(-1, mock.foo());\n\n    } \n\n```\n#Error message: java.lang.ArrayIndexOutOfBoundsException: 0\n\tat org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(InvocationMatcher.java:107)  ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n\tat org.mockito.internal.MockHandler.handle(MockHandler.java:88)  stubbedInvocation.captureArgumentsFrom(invocation);\n\tat org.mockito.internal.creation.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:47)  return handler.handle(invocation);\n\tat org.mockitousage.basicapi.UsingVarargsTest.shouldMatchEasilyEmptyVararg(UsingVarargsTest.java:175)  assertEquals(-1, mock.foo());\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    Object[] arguments = i.getArguments();\n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments && k < arguments.length) {\n            ((CapturesArguments) m).captureFrom(arguments[k]);\n        }\n        k++;\n    }\n}\n"
                ],
                [
                    "\npublic void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    Object[] arguments = i.getArguments();\n    \n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments && k < arguments.length) {\n            ((CapturesArguments) m).captureFrom(arguments[k]);\n        }\n        k++;\n    }\n}\n"
                ],
                [
                    "\npublic void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    Object[] arguments = i.getArguments();\n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments && k < arguments.length) {\n            ((CapturesArguments) m).captureFrom(arguments[k]);\n        }\n        k++;\n    }\n}\n"
                ],
                [
                    "\npublic void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments) {\n            if (k < i.getArguments().length) {\n                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n            }\n        }\n        k++;\n    }\n}\n"
                ],
                [
                    "\n/**\n* similar means the same method name, same mock, unverified\n* and: if arguments are the same cannot be overloaded\n*/\npublic void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    Object[] arguments = i.getArguments();\n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments && k < arguments.length) {\n            ((CapturesArguments) m).captureFrom(arguments[k]);\n        }\n        k++;\n    }\n}\n"
                ],
                [
                    "\npublic void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    Object[] arguments = i.getArguments();\n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments && k < arguments.length) {\n            ((CapturesArguments) m).captureFrom(arguments[k]);\n        }\n        k++;\n    }\n}\n"
                ],
                [
                    "\npublic void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    Object[] arguments = i.getArguments();\n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments) {\n            if (k < arguments.length) {\n                ((CapturesArguments) m).captureFrom(arguments[k]);\n            }\n            k++;\n        }\n    }\n}\n"
                ],
                [
                    "\npublic void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    Object[] arguments = i.getArguments();\n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments) {\n            if (k < arguments.length) {\n                ((CapturesArguments) m).captureFrom(arguments[k]);\n            }\n        }\n        k++;\n    }\n}\n"
                ],
                [
                    "\npublic void captureArgumentsFrom(Invocation i) {\n    Object[] arguments = i.getArguments();\n    int k = 0;\n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments && k < arguments.length) {\n            ((CapturesArguments) m).captureFrom(arguments[k]);\n        }\n        k++;\n    }\n}\n"
                ],
                [
                    "\npublic void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    Object[] arguments = i.getArguments();\n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments) {\n            if (k < arguments.length) {\n                ((CapturesArguments) m).captureFrom(arguments[k]);\n            }\n        }\n        k++;\n    }\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    Object[] arguments = i.getArguments();\n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments && k < arguments.length) {\n            ((CapturesArguments) m).captureFrom(arguments[k]);\n        }\n        k++;\n    }\n}\n"
                ]
            ],
            "compiler_error_or_timeout": true,
            "plausible_patches": [
                [
                    "\npublic void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    Object[] arguments = i.getArguments();\n    for (Matcher m : matchers) {\n        if (m instanceof CapturesArguments && k < arguments.length) {\n            ((CapturesArguments) m).captureFrom(arguments[k]);\n        }\n        k++;\n    }\n}\n"
                ]
            ]
        }
    }
}