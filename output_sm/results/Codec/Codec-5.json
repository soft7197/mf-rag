{
    "Codec-5": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* <p>\n* Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once\n* with the data to decode, and once with inAvail set to \"-1\" to alert decoder that EOF has been reached. The \"-1\"\n* call is not necessary when decoding, but it doesn't hurt, either.\n* </p>\n* <p>\n* Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are\n* silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,\n* garbage-out philosophy: it will not check the provided data for validity.\n* </p>\n* <p>\n* Thanks to \"commons\" project in ws.apache.org for the bitwise operations, and general approach.\n* http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n* </p>\n*\n* @param in\n*            byte[] array of ascii data to base64 decode.\n* @param inPos\n*            Position to start reading data from.\n* @param inAvail\n*            Amount of bytes available from input for encoding.\n*/\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            // We're done.\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    // Two forms of EOF as far as base64 decoder is concerned: actual\n    // EOF (-1) and first time '=' character is encountered in stream.\n    // This approach makes the '=' padding characters completely optional.\n    if (eof && modulus != 0) {\n        \n        x = x << 6;\n        switch (modulus) {\n            case 2 :\n                x = x << 6;\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3 :\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testCodec98NPE() throws Exception {\n\n        byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n\n        ByteArrayInputStream data = new ByteArrayInputStream(codec98);\n\n        Base64InputStream stream = new Base64InputStream(data);\n\n\n\n        // This line causes an NPE in commons-codec-1.4.jar:\n\n        byte[] decodedBytes = Base64TestData.streamToBytes(stream, new byte[1024]);\n\n\n\n        String decoded = StringUtils.newStringUtf8(decodedBytes);\n\n        assertEquals(\n\n            \"codec-98 NPE Base64InputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n\n        );\n\n    }\n\n```\n#Error message: java.lang.NullPointerException\n\tat org.apache.commons.codec.binary.Base64.decode(Base64.java:594)  buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n\tat org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:159)  base64.decode(buf, 0, c);\n\tat org.apache.commons.codec.binary.Base64TestData.fill(Base64TestData.java:177)  lastRead = in.read(buf, offset + read, buf.length - read - offset);\n\tat org.apache.commons.codec.binary.Base64TestData.streamToBytes(Base64TestData.java:148)  int[] status = fill(buf, 0, in);\n\tat org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(Base64InputStreamTest.java:61)  byte[] decodedBytes = Base64TestData.streamToBytes(stream, new byte[1024]);\n \n#Test method 2:\n```java\n    public void testCodec98NPE() throws Exception {\n\n        byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n\n        byte[] codec98_1024 = new byte[1024];\n\n        System.arraycopy(codec98, 0, codec98_1024, 0, codec98.length);\n\n        ByteArrayOutputStream data = new ByteArrayOutputStream(1024);\n\n        Base64OutputStream stream = new Base64OutputStream(data, false);\n\n        stream.write(codec98_1024, 0, 1024);\n\n        stream.close();\n\n\n\n        byte[] decodedBytes = data.toByteArray();\n\n        String decoded = StringUtils.newStringUtf8(decodedBytes);\n\n        assertEquals(\n\n            \"codec-98 NPE Base64OutputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n\n        );\n\n    }\n\n```\n#Error message: java.lang.NullPointerException\n\tat org.apache.commons.codec.binary.Base64.decode(Base64.java:594)  buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n\tat org.apache.commons.codec.binary.Base64OutputStream.close(Base64OutputStream.java:192)  base64.decode(singleByte, 0, -1);\n\tat org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(Base64OutputStreamTest.java:62)  stream.close();\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    if (eof && modulus != 0) {\n        x = x << 6;\n        switch (modulus) {\n            case 2 :\n                x = x << 6;\n                if (buffer == null || buffer.length - pos < 1) {\n                    resizeBuffer();\n                }\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3 :\n                if (buffer == null || buffer.length - pos < 2) {\n                    resizeBuffer();\n                }\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n"
                ],
                [
                    "\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            // We're done.\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        if (buffer == null || pos + 2 >= buffer.length) {\n                            resizeBuffer();\n                        }\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    if (eof && modulus != 0) {\n        x = x << 6;\n        switch (modulus) {\n            case 2:\n                if (buffer == null || pos >= buffer.length) {\n                    resizeBuffer();\n                }\n                x = x << 6;\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3:\n                if (buffer == null || pos + 1 >= buffer.length) {\n                    resizeBuffer();\n                }\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n"
                ],
                [
                    "\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            // We're done.\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        if (buffer == null || buffer.length - pos < 3) {\n                            resizeBuffer();\n                        }\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    if (eof && modulus != 0) {\n        x = x << 6;\n        switch (modulus) {\n            case 2 :\n                x = x << 6;\n                if (buffer == null || buffer.length - pos < 1) {\n                    resizeBuffer();\n                }\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3 :\n                if (buffer == null || buffer.length - pos < 2) {\n                    resizeBuffer();\n                }\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n"
                ],
                [
                    "\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        if (buffer == null || buffer.length - pos < 3) {\n                            resizeBuffer();\n                        }\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    if (eof && modulus != 0) {\n        x = x << 6;\n        if (buffer == null || buffer.length - pos < 2) {\n            resizeBuffer();\n        }\n        switch (modulus) {\n            case 2 :\n                x = x << 6;\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3 :\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n"
                ],
                [
                    "\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    if (eof && modulus != 0) {\n        x = x << (6 * (4 - modulus));\n        switch (modulus) {\n            case 2:\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3:\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n"
                ],
                [
                    "\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    if (eof && modulus != 0) {\n        x = x << 6 * (4 - modulus);\n        switch (modulus) {\n            case 2 :\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3 :\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n"
                ],
                [
                    "\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            // We're done.\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        if (buffer == null || buffer.length - pos < 3) {\n                            resizeBuffer();\n                        }\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    if (eof && modulus != 0) {\n        x = x << 6;\n        switch (modulus) {\n            case 2 :\n                x = x << 6;\n                if (buffer == null || buffer.length - pos < 1) {\n                    resizeBuffer();\n                }\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3 :\n                if (buffer == null || buffer.length - pos < 2) {\n                    resizeBuffer();\n                }\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n"
                ],
                [
                    "\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            // We're done.\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        if (buffer == null || pos + 3 > buffer.length) {\n                            resizeBuffer();\n                        }\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    if (eof && modulus != 0) {\n        x = x << 6;\n        if (buffer == null || pos + 2 > buffer.length) {\n            resizeBuffer();\n        }\n        switch (modulus) {\n            case 2 :\n                x = x << 6;\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3 :\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n"
                ],
                [
                    "\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null) {\n            buffer = new byte[8192]; // Initialize buffer if null\n        }\n        if (buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            // We're done.\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    if (eof && modulus != 0) {\n        x = x << 6;\n        switch (modulus) {\n            case 2:\n                x = x << 6;\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3:\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n"
                ],
                [
                    "\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (buffer == null) {\n        resizeBuffer();\n    }\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            // We're done.\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    if (eof && modulus != 0) {\n        x = x << 6;\n        switch (modulus) {\n            case 2:\n                x = x << 6;\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3:\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    if (eof && modulus != 0) {\n        x = x << 6;\n        switch (modulus) {\n            case 2 :\n                x = x << 6;\n                if (buffer == null || buffer.length - pos < 1) {\n                    resizeBuffer();\n                }\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3 :\n                if (buffer == null || buffer.length - pos < 2) {\n                    resizeBuffer();\n                }\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            eof = true;\n            break;\n        } else {\n            if (b >= 0 && b < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    if (eof && modulus != 0) {\n        x = x << 6;\n        switch (modulus) {\n            case 2 :\n                x = x << 6;\n                if (buffer == null || buffer.length - pos < 1) {\n                    resizeBuffer();\n                }\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3 :\n                if (buffer == null || buffer.length - pos < 2) {\n                    resizeBuffer();\n                }\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}\n"
                ]
            ]
        }
    }
}