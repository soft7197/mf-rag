{
    "Codec-9": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n*\n* @param binaryData\n*            Array containing binary data to encode.\n* @param isChunked\n*            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n* @param urlSafe\n*            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n* @param maxResultSize\n*            The maximum result size to accept.\n* @return Base64-encoded data.\n* @throws IllegalArgumentException\n*             Thrown when the input array needs an output array bigger than maxResultSize\n* @since 1.4\n*/\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testCodec112() { // size calculation assumes always chunked\n\n        byte[] in = new byte[] {0};\n\n        byte[] out=Base64.encodeBase64(in);\n\n        Base64.encodeBase64(in, false, false, out.length);\n\n    }\n\n```\n#Error message: java.lang.IllegalArgumentException: Input array too big, the output array would be bigger (6) than the specified maxium size of 4\n\tat org.apache.commons.codec.binary.Base64.encodeBase64(Base64.java:829)  throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +                len +                \") than the specified maxium size of \" +                maxResultSize);\n\tat org.apache.commons.codec.binary.Base64Test.testCodec112(Base64Test.java:343)  Base64.encodeBase64(in, false, false, out.length);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    byte[] chunkSeparator = isChunked ? CHUNK_SEPARATOR : new byte[0];\n    long len = getEncodeLength(binaryData, chunkSize, chunkSeparator);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    byte[] separator = isChunked ? CHUNK_SEPARATOR : new byte[0];\n    long len = getEncodeLength(binaryData, chunkSize, separator);\n    \n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n    \n    Base64 b64 = new Base64(chunkSize, separator, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    byte[] chunkSeparator = isChunked ? CHUNK_SEPARATOR : new byte[0];\n    long len = getEncodeLength(binaryData, chunkSize, chunkSeparator);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = new Base64(chunkSize, chunkSeparator, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, isChunked ? CHUNK_SEPARATOR : null);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, isChunked ? CHUNK_SEPARATOR : null);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = new Base64(chunkSize, isChunked ? CHUNK_SEPARATOR : null, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, isChunked ? CHUNK_SEPARATOR : null);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, null, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maximum size of \" +\n            maxResultSize);\n    }\n    \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    byte[] chunkSeparator = isChunked ? CHUNK_SEPARATOR : new byte[0];\n    long len = getEncodeLength(binaryData, chunkSize, chunkSeparator);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, isChunked ? CHUNK_SEPARATOR : null);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, isChunked ? CHUNK_SEPARATOR : null);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = new Base64(chunkSize, isChunked ? CHUNK_SEPARATOR : null, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, isChunked ? CHUNK_SEPARATOR : null);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, null, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maximum size of \" +\n            maxResultSize);\n    }\n    \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    byte[] chunkSeparator = isChunked ? CHUNK_SEPARATOR : new byte[0];\n    long len = getEncodeLength(binaryData, chunkSize, chunkSeparator);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, isChunked ? CHUNK_SEPARATOR : null);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, isChunked ? CHUNK_SEPARATOR : null);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = new Base64(chunkSize, isChunked ? CHUNK_SEPARATOR : null, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, isChunked ? CHUNK_SEPARATOR : null);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n            \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, null, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ],
                [
                    "\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;\n    long len = getEncodeLength(binaryData, chunkSize, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maximum size of \" +\n            maxResultSize);\n    }\n    \n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n"
                ]
            ]
        }
    }
}