{
    "Closure-56": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Gets the source line for the indicated line number.\n*\n* @param lineNumber the line number, 1 being the first line of the file.\n* @return The line indicated. Does not include the newline at the end\n*     of the file. Returns {@code null} if it does not exist,\n*     or if there was an IO exception.\n*/\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    // NOTE(nicksantos): Right now, this is optimized for few warnings.\n    // This is probably the right trade-off, but will be slow if there\n    // are lots of warnings in one file.\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  // If we've saved a previous offset and it's for a line less than the\n  // one we're searching for, then start at that point.\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  // Remember this offset for the next search we do.\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  if (js.indexOf('\\n', pos) == -1) {\n    // If next new line cannot be found, there are two cases\n    // 1. pos already reaches the end of file, then null should be returned\n    // 2. otherwise, return the contents between pos and the end of file.\n      return null;\n  } else {\n    return js.substring(pos, js.indexOf('\\n', pos));\n  }\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n  public void testExceptNoNewLine() throws Exception {\n\n    assertEquals(\"foo2:first line\", provider.getSourceLine(\"foo2\", 1));\n\n    assertEquals(\"foo2:second line\", provider.getSourceLine(\"foo2\", 2));\n\n    assertEquals(\"foo2:third line\", provider.getSourceLine(\"foo2\", 3));\n\n    assertEquals(null, provider.getSourceLine(\"foo2\", 4));\n\n  }\n\n```\n#Error message: junit.framework.ComparisonFailure: expected:<foo2:third line> but was:<null>\n\tat com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest.testExceptNoNewLine(JSCompilerSourceExcerptProviderTest.java:67)  assertEquals(\"foo2:third line\", provider.getSourceLine(\"foo2\", 3));\n \n#Test method 2:\n```java\n  public void testSyntaxError1() {\n\n    try {\n\n      extractMessage(\"if (true) {}}\");\n\n      fail(\"Expected exception\");\n\n    } catch (RuntimeException e) {\n\n      assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));\n\n      assertTrue(e.getMessage().contains(\n\n          \"testcode:1: ERROR - Parse error. syntax error\\n\"));\n\n      assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));\n\n```\n#Error message: junit.framework.AssertionFailedError\n\tat com.google.javascript.jscomp.JsMessageExtractorTest.testSyntaxError1(JsMessageExtractorTest.java:62)  assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));    }  }  public void testSyntaxError2() {    try {      extractMessage(\"\", \"if (true) {}}\");      fail(\"Expected exception\");    } catch (RuntimeException e) {      assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));      assertTrue(e.getMessage().contains(          \"testcode:2: ERROR - Parse error. syntax error\\n\"));      assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));    }  }  public void testExtractNewStyleMessage1() {    // A simple message with no description.    assertEquals(        new JsMessage.Builder(\"MSG_SILLY\")            .appendStringPart(\"silly test message\")            .build(),        extractMessage(\"var MSG_SILLY = goog.getMsg('silly test message');\"));  }  public void testExtractNewStyleMessage2() {    // A message with placeholders and meta data.    assertEquals(        new JsMessage.Builder(\"MSG_WELCOME\")            .appendStringPart(\"Hi \")            .appendPlaceholderReference(\"userName\")            .appendStringPart(\"! Welcome to \")            .appendPlaceholderReference(\"product\")            .appendStringPart(\".\")            .setDesc(\"The welcome message.\")            .setIsHidden(true)            .build(),        extractMessage(            \"/**\",            \" * @desc The welcome\",            \" *   message.\",            \" *\",            \" * @hidden\",            \" */\",            \"var MSG_WELCOME = goog.getMsg(\",            \"    'Hi {$userName}! Welcome to {$product}.',\",            \"    {userName: someUserName, product: getProductName()});\"));  }  public void testExtractOldStyleMessage1() {    // Description before the message.    assertEquals(        new JsMessage.Builder(\"MSG_SILLY\")            .appendStringPart(\"silly test message\")            .setDesc(\"Description.\")            .build(),        extractMessage(            \"var MSG_SILLY_HELP = 'Description.';\",            \"var MSG_SILLY = 'silly test message';\"));  }  public void testExtractOldStyleMessage2() {    // Description after the message, broken into parts.    assertEquals(        new JsMessage.Builder(\"MSG_SILLY\")            .appendStringPart(\"silly test message\")            .setDesc(\"Description.\")            .build(),        extractMessage(            \"var MSG_SILLY = 'silly test message';\",            \"var MSG_SILLY_HELP = 'Descrip' + 'tion.';\"));  }  public void testExtractOldStyleMessage3() {    // Function-style message with two placeholders and no description.    assertEquals(        new JsMessage.Builder(\"MSG_SILLY\")            .appendPlaceholderReference(\"one\")            .appendStringPart(\", \")            .appendPlaceholderReference(\"two\")            .appendStringPart(\", buckle my shoe\")            .build(),        extractMessage(            \"var MSG_SILLY = function(one, two) {\",            \"  return one + ', ' + two + ', buckle my shoe';\",            \"};\"));  }  public void testExtractMixedMessages() {    // Several mixed-style messages in succession, one containing newlines.    Iterator<JsMessage> msgs = extractMessages(        \"var MSG_MONEY = function(amount) {\",        \"  return 'You owe $' + amount +\",        \"         ' to the credit card company.';\",        \"};\",        \"var MSG_TIME = goog.getMsg('You need to finish your work in ' +\",        \"                           '{$duration} hours.', {'duration': d});\",        \"var MSG_NAG = 'Clean your room.\\\\n\\\\nWash your clothes.';\",        \"var MSG_NAG_HELP = 'Just some ' +\",        \"                   'nags.';\").iterator();    assertEquals(        new JsMessage.Builder(\"MSG_MONEY\")            .appendStringPart(\"You owe $\")            .appendPlaceholderReference(\"amount\")            .appendStringPart(\" to the credit card company.\")            .build(),        msgs.next());    assertEquals(        new JsMessage.Builder(\"MSG_TIME\")            .appendStringPart(\"You need to finish your work in \")            .appendPlaceholderReference(\"duration\")            .appendStringPart(\" hours.\")            .build(),        msgs.next());    assertEquals(        new JsMessage.Builder(\"MSG_NAG\")            .appendStringPart(\"Clean your room.\\n\\nWash your clothes.\")            .setDesc(\"Just some nags.\")            .build(),        msgs.next());  }  public void testDuplicateUnnamedVariables() {    // Make sure that duplicate unnamed variables don't get swallowed when using    // a Google-specific ID generator.    Collection<JsMessage> msgs = extractMessages(        \"function a() {\",        \"  var MSG_UNNAMED_2 = goog.getMsg('foo');\",        \"}\",        \"function b() {\",        \"  var MSG_UNNAMED_2 = goog.getMsg('bar');\",        \"}\");    assertEquals(2, msgs.size());    final Iterator<JsMessage> iter = msgs.iterator();    assertEquals(\"foo\", iter.next().toString());    assertEquals(\"bar\", iter.next().toString());  }  public void testMeaningAnnotation() {    List<JsMessage> msgs = Lists.newArrayList(        extractMessages(            \"var MSG_UNNAMED_1 = goog.getMsg('foo');\",            \"var MSG_UNNAMED_2 = goog.getMsg('foo');\"));    assertEquals(2, msgs.size());    assertTrue(msgs.get(0).getId().equals(msgs.get(1).getId()));    assertEquals(msgs.get(0), msgs.get(1));    msgs = Lists.newArrayList(        extractMessages(            \"var MSG_UNNAMED_1 = goog.getMsg('foo');\",            \"/** @meaning bar */ var MSG_UNNAMED_2 = goog.getMsg('foo');\"));    assertEquals(2, msgs.size());    assertFalse(msgs.get(0).getId().equals(msgs.get(1).getId()));  }  private void assertEquals(JsMessage expected, JsMessage actual) {    assertEquals(expected.getId(), actual.getId());    assertEquals(expected.getKey(), actual.getKey());    assertEquals(expected.parts(), actual.parts());    assertEquals(expected.placeholders(), actual.placeholders());    assertEquals(expected.getDesc(), actual.getDesc());    assertEquals(expected.isHidden(), actual.isHidden());    assertEquals(expected.getMeaning(), actual.getMeaning());  }}\n \n#Test method 3:\n```java\n  public void testSyntaxError2() {\n\n    try {\n\n      extractMessage(\"\", \"if (true) {}}\");\n\n      fail(\"Expected exception\");\n\n    } catch (RuntimeException e) {\n\n      assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));\n\n      assertTrue(e.getMessage().contains(\n\n          \"testcode:2: ERROR - Parse error. syntax error\\n\"));\n\n      assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));\n\n```\n#Error message: junit.framework.AssertionFailedError\n\tat com.google.javascript.jscomp.JsMessageExtractorTest.testSyntaxError2(JsMessageExtractorTest.java:74)  assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));    }  }  public void testExtractNewStyleMessage1() {    // A simple message with no description.    assertEquals(        new JsMessage.Builder(\"MSG_SILLY\")            .appendStringPart(\"silly test message\")            .build(),        extractMessage(\"var MSG_SILLY = goog.getMsg('silly test message');\"));  }  public void testExtractNewStyleMessage2() {    // A message with placeholders and meta data.    assertEquals(        new JsMessage.Builder(\"MSG_WELCOME\")            .appendStringPart(\"Hi \")            .appendPlaceholderReference(\"userName\")            .appendStringPart(\"! Welcome to \")            .appendPlaceholderReference(\"product\")            .appendStringPart(\".\")            .setDesc(\"The welcome message.\")            .setIsHidden(true)            .build(),        extractMessage(            \"/**\",            \" * @desc The welcome\",            \" *   message.\",            \" *\",            \" * @hidden\",            \" */\",            \"var MSG_WELCOME = goog.getMsg(\",            \"    'Hi {$userName}! Welcome to {$product}.',\",            \"    {userName: someUserName, product: getProductName()});\"));  }  public void testExtractOldStyleMessage1() {    // Description before the message.    assertEquals(        new JsMessage.Builder(\"MSG_SILLY\")            .appendStringPart(\"silly test message\")            .setDesc(\"Description.\")            .build(),        extractMessage(            \"var MSG_SILLY_HELP = 'Description.';\",            \"var MSG_SILLY = 'silly test message';\"));  }  public void testExtractOldStyleMessage2() {    // Description after the message, broken into parts.    assertEquals(        new JsMessage.Builder(\"MSG_SILLY\")            .appendStringPart(\"silly test message\")            .setDesc(\"Description.\")            .build(),        extractMessage(            \"var MSG_SILLY = 'silly test message';\",            \"var MSG_SILLY_HELP = 'Descrip' + 'tion.';\"));  }  public void testExtractOldStyleMessage3() {    // Function-style message with two placeholders and no description.    assertEquals(        new JsMessage.Builder(\"MSG_SILLY\")            .appendPlaceholderReference(\"one\")            .appendStringPart(\", \")            .appendPlaceholderReference(\"two\")            .appendStringPart(\", buckle my shoe\")            .build(),        extractMessage(            \"var MSG_SILLY = function(one, two) {\",            \"  return one + ', ' + two + ', buckle my shoe';\",            \"};\"));  }  public void testExtractMixedMessages() {    // Several mixed-style messages in succession, one containing newlines.    Iterator<JsMessage> msgs = extractMessages(        \"var MSG_MONEY = function(amount) {\",        \"  return 'You owe $' + amount +\",        \"         ' to the credit card company.';\",        \"};\",        \"var MSG_TIME = goog.getMsg('You need to finish your work in ' +\",        \"                           '{$duration} hours.', {'duration': d});\",        \"var MSG_NAG = 'Clean your room.\\\\n\\\\nWash your clothes.';\",        \"var MSG_NAG_HELP = 'Just some ' +\",        \"                   'nags.';\").iterator();    assertEquals(        new JsMessage.Builder(\"MSG_MONEY\")            .appendStringPart(\"You owe $\")            .appendPlaceholderReference(\"amount\")            .appendStringPart(\" to the credit card company.\")            .build(),        msgs.next());    assertEquals(        new JsMessage.Builder(\"MSG_TIME\")            .appendStringPart(\"You need to finish your work in \")            .appendPlaceholderReference(\"duration\")            .appendStringPart(\" hours.\")            .build(),        msgs.next());    assertEquals(        new JsMessage.Builder(\"MSG_NAG\")            .appendStringPart(\"Clean your room.\\n\\nWash your clothes.\")            .setDesc(\"Just some nags.\")            .build(),        msgs.next());  }  public void testDuplicateUnnamedVariables() {    // Make sure that duplicate unnamed variables don't get swallowed when using    // a Google-specific ID generator.    Collection<JsMessage> msgs = extractMessages(        \"function a() {\",        \"  var MSG_UNNAMED_2 = goog.getMsg('foo');\",        \"}\",        \"function b() {\",        \"  var MSG_UNNAMED_2 = goog.getMsg('bar');\",        \"}\");    assertEquals(2, msgs.size());    final Iterator<JsMessage> iter = msgs.iterator();    assertEquals(\"foo\", iter.next().toString());    assertEquals(\"bar\", iter.next().toString());  }  public void testMeaningAnnotation() {    List<JsMessage> msgs = Lists.newArrayList(        extractMessages(            \"var MSG_UNNAMED_1 = goog.getMsg('foo');\",            \"var MSG_UNNAMED_2 = goog.getMsg('foo');\"));    assertEquals(2, msgs.size());    assertTrue(msgs.get(0).getId().equals(msgs.get(1).getId()));    assertEquals(msgs.get(0), msgs.get(1));    msgs = Lists.newArrayList(        extractMessages(            \"var MSG_UNNAMED_1 = goog.getMsg('foo');\",            \"/** @meaning bar */ var MSG_UNNAMED_2 = goog.getMsg('foo');\"));    assertEquals(2, msgs.size());    assertFalse(msgs.get(0).getId().equals(msgs.get(1).getId()));  }  private void assertEquals(JsMessage expected, JsMessage actual) {    assertEquals(expected.getId(), actual.getId());    assertEquals(expected.getKey(), actual.getKey());    assertEquals(expected.parts(), actual.parts());    assertEquals(expected.placeholders(), actual.placeholders());    assertEquals(expected.getDesc(), actual.getDesc());    assertEquals(expected.isHidden(), actual.isHidden());    assertEquals(expected.getMeaning(), actual.getMeaning());  }}\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewLinePos = js.indexOf('\\n', pos);\n  if (nextNewLinePos == -1) {\n    if (pos < js.length()) {\n      return js.substring(pos);\n    }\n    return null;\n  } else {\n    return js.substring(pos, nextNewLinePos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewLinePos = js.indexOf('\\n', pos);\n  if (nextNewLinePos == -1) {\n    if (pos < js.length()) {\n      return js.substring(pos);\n    } else {\n      return null;\n    }\n  } else {\n    return js.substring(pos, nextNewLinePos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  // If we've saved a previous offset and it's for a line less than the\n  // one we're searching for, then start at that point.\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int endpos = js.indexOf('\\n', pos);\n  if (endpos == -1) {\n    if (pos < js.length()) {\n      return js.substring(pos);\n    } else {\n      return null;\n    }\n  } else {\n    return js.substring(pos, endpos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewlinePos = js.indexOf('\\n', pos);\n  if (nextNewlinePos == -1) {\n    if (pos >= js.length()) {\n      return null;\n    } else {\n      return js.substring(pos);\n    }\n  } else {\n    return js.substring(pos, nextNewlinePos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextLinePos = js.indexOf('\\n', pos);\n  if (nextLinePos == -1) {\n    if (pos >= js.length()) {\n      return null;\n    } else {\n      return js.substring(pos);\n    }\n  } else {\n    return js.substring(pos, nextLinePos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int endPos = js.indexOf('\\n', pos);\n  if (endPos == -1) {\n    if (pos >= js.length()) {\n      return null;\n    }\n    return js.substring(pos);\n  } else {\n    return js.substring(pos, endPos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewLine = js.indexOf('\\n', pos);\n  if (nextNewLine == -1) {\n    if (pos >= js.length()) {\n      return null;\n    } else {\n      return js.substring(pos);\n    }\n  } else {\n    return js.substring(pos, nextNewLine);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewline = js.indexOf('\\n', pos);\n  if (nextNewline == -1) {\n    if (pos >= js.length()) {\n      return null;\n    }\n    return js.substring(pos);\n  } else {\n    return js.substring(pos, nextNewline);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int endPos = js.indexOf('\\n', pos);\n  if (endPos == -1) {\n    if (pos >= js.length()) {\n      return null;\n    }\n    return js.substring(pos);\n  } else {\n    return js.substring(pos, endPos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewLinePos = js.indexOf('\\n', pos);\n  if (nextNewLinePos == -1) {\n    if (pos >= js.length()) {\n      return null;\n    } else {\n      return js.substring(pos);\n    }\n  } else {\n    return js.substring(pos, nextNewLinePos);\n  }\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewLinePos = js.indexOf('\\n', pos);\n  if (nextNewLinePos == -1) {\n    if (pos < js.length()) {\n      return js.substring(pos);\n    }\n    return null;\n  } else {\n    return js.substring(pos, nextNewLinePos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewLinePos = js.indexOf('\\n', pos);\n  if (nextNewLinePos == -1) {\n    if (pos < js.length()) {\n      return js.substring(pos);\n    } else {\n      return null;\n    }\n  } else {\n    return js.substring(pos, nextNewLinePos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  // If we've saved a previous offset and it's for a line less than the\n  // one we're searching for, then start at that point.\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int endpos = js.indexOf('\\n', pos);\n  if (endpos == -1) {\n    if (pos < js.length()) {\n      return js.substring(pos);\n    } else {\n      return null;\n    }\n  } else {\n    return js.substring(pos, endpos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewlinePos = js.indexOf('\\n', pos);\n  if (nextNewlinePos == -1) {\n    if (pos >= js.length()) {\n      return null;\n    } else {\n      return js.substring(pos);\n    }\n  } else {\n    return js.substring(pos, nextNewlinePos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextLinePos = js.indexOf('\\n', pos);\n  if (nextLinePos == -1) {\n    if (pos >= js.length()) {\n      return null;\n    } else {\n      return js.substring(pos);\n    }\n  } else {\n    return js.substring(pos, nextLinePos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int endPos = js.indexOf('\\n', pos);\n  if (endPos == -1) {\n    if (pos >= js.length()) {\n      return null;\n    }\n    return js.substring(pos);\n  } else {\n    return js.substring(pos, endPos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewLine = js.indexOf('\\n', pos);\n  if (nextNewLine == -1) {\n    if (pos >= js.length()) {\n      return null;\n    } else {\n      return js.substring(pos);\n    }\n  } else {\n    return js.substring(pos, nextNewLine);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewline = js.indexOf('\\n', pos);\n  if (nextNewline == -1) {\n    if (pos >= js.length()) {\n      return null;\n    }\n    return js.substring(pos);\n  } else {\n    return js.substring(pos, nextNewline);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int endPos = js.indexOf('\\n', pos);\n  if (endPos == -1) {\n    if (pos >= js.length()) {\n      return null;\n    }\n    return js.substring(pos);\n  } else {\n    return js.substring(pos, endPos);\n  }\n}\n"
                ],
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewLinePos = js.indexOf('\\n', pos);\n  if (nextNewLinePos == -1) {\n    if (pos >= js.length()) {\n      return null;\n    } else {\n      return js.substring(pos);\n    }\n  } else {\n    return js.substring(pos, nextNewLinePos);\n  }\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewLinePos = js.indexOf('\\n', pos);\n  if (nextNewLinePos == -1) {\n    if (pos >= js.length()) {\n      return null;\n    } else {\n      return js.substring(pos);\n    }\n  } else {\n    return js.substring(pos, nextNewLinePos);\n  }\n}\n"
                ]
            ]
        }
    }
}