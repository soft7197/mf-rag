{
    "JacksonCore-23": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    return new DefaultPrettyPrinter(this);\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testInvalidSubClass() throws Exception\n\n    {\n\n        DefaultPrettyPrinter pp = new MyPrettyPrinter();\n\n        try {\n\n            pp.createInstance();\n\n            fail(\"Should not pass\");\n\n        } catch (IllegalStateException e) {\n\n            verifyException(e, \"does not override\");\n\n        }\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: Should not pass\n\tat com.fasterxml.jackson.core.util.TestDefaultPrettyPrinter.testInvalidSubClass(TestDefaultPrettyPrinter.java:169)  fail(\"Should not pass\");\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Sub-class does not override createInstance()\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Subclasses must override createInstance()\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"does not override\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (this.getClass() == DefaultPrettyPrinter.class) {\n        return new DefaultPrettyPrinter(this);\n    } else {\n        throw new IllegalStateException(\"Subclasses must override createInstance()\");\n    }\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Sub-class does not override createInstance()\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (this.getClass() == DefaultPrettyPrinter.class) {\n        return new DefaultPrettyPrinter(this);\n    } else {\n        throw new IllegalStateException(\"Subclass does not override createInstance\");\n    }\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Subclasses must override createInstance()\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Sub-class does not override createInstance()\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Sub-class does not override createInstance()\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (this.getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Sub-class does not override createInstance\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Sub-class does not override createInstance()\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"does not override\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Sub-class does not override createInstance()\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (this.getClass() == DefaultPrettyPrinter.class) {\n        return new DefaultPrettyPrinter(this);\n    } else {\n        throw new IllegalStateException(\"Subclass does not override createInstance\");\n    }\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Sub-class does not override createInstance()\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Sub-class does not override createInstance()\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (this.getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Sub-class does not override createInstance\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Sub-class does not override createInstance()\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"does not override\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (this.getClass() == DefaultPrettyPrinter.class) {\n        return new DefaultPrettyPrinter(this);\n    } else {\n        throw new IllegalStateException(\"Subclass does not override createInstance\");\n    }\n}\n"
                ],
                [
                    "\n/**********************************************************\n*/\npublic DefaultPrettyPrinter createInstance() {\n    if (this.getClass() != DefaultPrettyPrinter.class) {\n        throw new IllegalStateException(\"Sub-class does not override createInstance\");\n    }\n    return new DefaultPrettyPrinter(this);\n}\n"
                ]
            ]
        }
    }
}