{
    "JacksonCore-26": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**********************************************************************\n*/\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testLocationOffsets() throws Exception\n\n    {\n\n        JsonParser parser = DEFAULT_F.createNonBlockingByteArrayParser();\n\n        ByteArrayFeeder feeder = (ByteArrayFeeder) parser.getNonBlockingInputFeeder();\n\n\n\n        byte[] input = utf8Bytes(\"[[[\");\n\n\n\n        feeder.feedInput(input, 2, 3);\n\n        assertEquals(JsonToken.START_ARRAY, parser.nextToken());\n\n        assertEquals(1, parser.getCurrentLocation().getByteOffset());\n\n        assertEquals(1, parser.getTokenLocation().getByteOffset());\n\n        assertEquals(1, parser.getCurrentLocation().getLineNr());\n\n        assertEquals(1, parser.getTokenLocation().getLineNr());\n\n        assertEquals(2, parser.getCurrentLocation().getColumnNr());\n\n        assertEquals(1, parser.getTokenLocation().getColumnNr());\n\n\n\n        feeder.feedInput(input, 0, 1);\n\n        assertEquals(JsonToken.START_ARRAY, parser.nextToken());\n\n        assertEquals(2, parser.getCurrentLocation().getByteOffset());\n\n        assertEquals(2, parser.getTokenLocation().getByteOffset());\n\n        assertEquals(1, parser.getCurrentLocation().getLineNr());\n\n        assertEquals(1, parser.getTokenLocation().getLineNr());\n\n        assertEquals(3, parser.getCurrentLocation().getColumnNr());\n\n        assertEquals(2, parser.getTokenLocation().getColumnNr());\n\n        parser.close();\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: expected:<1> but was:<3>\n\tat com.fasterxml.jackson.core.json.async.AsyncLocationTest.testLocationOffsets(AsyncLocationTest.java:21)  assertEquals(1, parser.getCurrentLocation().getByteOffset());\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Incorrect calculation of _currInputRowStart\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n    \n    // Adjust row start correctly\n    _currInputRowStart = start;\n    \n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Adjust row start to account for the new buffer\n    _currInputRowStart = start;\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Correctly adjust row start by considering already processed bytes\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen; \n\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Adjust row start position correctly\n    _currInputRowStart = start;\n\n    // Update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Correctly adjust row start to work as if it extended into the past with respect to new buffer\n    _currInputRowStart += start - _inputPtr;\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Adjust row start correctly\n    _currInputRowStart += start - _inputPtr;\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "2": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) and relevant context to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**********************************************************************\n*/\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testLocationOffsets() throws Exception\n\n    {\n\n        JsonParser parser = DEFAULT_F.createNonBlockingByteArrayParser();\n\n        ByteArrayFeeder feeder = (ByteArrayFeeder) parser.getNonBlockingInputFeeder();\n\n\n\n        byte[] input = utf8Bytes(\"[[[\");\n\n\n\n        feeder.feedInput(input, 2, 3);\n\n        assertEquals(JsonToken.START_ARRAY, parser.nextToken());\n\n        assertEquals(1, parser.getCurrentLocation().getByteOffset());\n\n        assertEquals(1, parser.getTokenLocation().getByteOffset());\n\n        assertEquals(1, parser.getCurrentLocation().getLineNr());\n\n        assertEquals(1, parser.getTokenLocation().getLineNr());\n\n        assertEquals(2, parser.getCurrentLocation().getColumnNr());\n\n        assertEquals(1, parser.getTokenLocation().getColumnNr());\n\n\n\n        feeder.feedInput(input, 0, 1);\n\n        assertEquals(JsonToken.START_ARRAY, parser.nextToken());\n\n        assertEquals(2, parser.getCurrentLocation().getByteOffset());\n\n        assertEquals(2, parser.getTokenLocation().getByteOffset());\n\n        assertEquals(1, parser.getCurrentLocation().getLineNr());\n\n        assertEquals(1, parser.getTokenLocation().getLineNr());\n\n        assertEquals(3, parser.getCurrentLocation().getColumnNr());\n\n        assertEquals(2, parser.getTokenLocation().getColumnNr());\n\n        parser.close();\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: expected:<1> but was:<3>\n\tat com.fasterxml.jackson.core.json.async.AsyncLocationTest.testLocationOffsets(AsyncLocationTest.java:21)  assertEquals(1, parser.getCurrentLocation().getByteOffset());\n\n\n## \ud83d\udca1 Context from Project\n\n            \n```java\nprotected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException { if (commaBefore) { _cfgPrettyPrinter.writeObjectEntrySeparator(this); } else { _cfgPrettyPrinter.beforeObjectEntries(this); } final char[] quoted = name.asQuotedChars(); if (_cfgUnqNames) { writeRaw(quoted, 0, quoted.length); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = _quoteChar; writeRaw(quoted, 0, quoted.length); if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = _quoteChar; } }\n```\n\n            \n```java\nprivate void _writeLongString(String text) throws IOException { _flushBuffer(); final int textLen = text.length(); int offset = 0; do { int max = _outputEnd; int segmentLen = ((offset + max) > textLen) ? (textLen - offset) : max; text.getChars(offset, offset + segmentLen, _outputBuffer, 0); if (_characterEscapes != null) { _writeSegmentCustom(segmentLen); } else if (_maximumNonEscapedChar != 0) { _writeSegmentASCII(segmentLen, _maximumNonEscapedChar); } else { _writeSegment(segmentLen); } offset += segmentLen; } while (offset < textLen); }\n```\n\n            \n```java\nprotected JsonGenerator _createGenerator(Writer out, IOContext ctxt) throws IOException { WriterBasedJsonGenerator gen = new WriterBasedJsonGenerator(ctxt, _generatorFeatures, _objectCodec, out); if (_maximumNonEscapedChar > 0) { gen.setHighestNonEscapedChar(_maximumNonEscapedChar); } if (_characterEscapes != null) { gen.setCharacterEscapes(_characterEscapes); } SerializableString rootSep = _rootValueSeparator; if (rootSep != DEFAULT_ROOT_VALUE_SEPARATOR) { gen.setRootValueSeparator(rootSep); } return gen; }\n```\n\n            \n```java\nprivate void _testSimpleNumbers(boolean useStream) throws Exception { final String DOC = \\\"1 2\\t3\\r4\\n5\\r\\n6\\r\\n 7\\\"; JsonParser jp = useStream ? createParserUsingStream(JSON_F, DOC, \\\"UTF-8\\\") : createParserUsingReader(JSON_F, DOC); for (int i = 1; i <= 7; ++i) { assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); assertEquals(i, jp.getIntValue()); } assertNull(jp.nextToken()); jp.close(); }\n```\n\n            \n```java\nprivate final int _decodeUtf8_3fast(int c1) throws IOException { c1 &= 0x0F; int d = (int) _inputBuffer[_inputPtr++]; if ((d & 0xC0) != 0x080) { _reportInvalidOther(d & 0xFF, _inputPtr); } int c = (c1 << 6) | (d & 0x3F); d = (int) _inputBuffer[_inputPtr++]; if ((d & 0xC0) != 0x080) { _reportInvalidOther(d & 0xFF, _inputPtr); } c = (c << 6) | (d & 0x3F); return c; }\n```\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Recompute _currInputRowStart correctly\n    _currInputRowStart += start - _inputPtr;\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Fix the calculation for _currInputRowStart\n    _currInputRowStart -= start;\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart -= start;\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    _currInputProcessed += _origBufferLen;\n\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = (_currInputRowStart - _inputPtr) + start;\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Fix for correct calculation of _currInputRowStart\n    _currInputRowStart += (_inputPtr - start);\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart); // Corrected\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Correct calculation of _currInputRowStart\n    _currInputRowStart += (start - _inputPtr);\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ],
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n\n    // Recompute _currInputRowStart correctly\n    _currInputRowStart += start - _inputPtr;\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}\n"
                ]
            ]
        },
        "iteration_done": true
    }
}