{
    "Jsoup-19": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n// ok if not defined protocol; otherwise test\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.absUrl(attr.getKey());\n    if (!preserveRelativeLinks)\n        attr.setValue(value);\n    \n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    @Test public void handlesCustomProtocols() {\n\n        String html = \"<img src='cid:12345' /> <img src='data:gzzt' />\";\n\n        String dropped = Jsoup.clean(html, Whitelist.basicWithImages());\n\n        assertEquals(\"<img /> \\n<img />\", dropped);\n\n\n\n        String preserved = Jsoup.clean(html, Whitelist.basicWithImages().addProtocols(\"img\", \"src\", \"cid\", \"data\"));\n\n        assertEquals(\"<img src=\\\"cid:12345\\\" /> \\n<img src=\\\"data:gzzt\\\" />\", preserved);\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: expected:<<img [src=\"cid:12345\" /> \n<img src=\"data:gzzt\"] />> but was:<<img [/> \n<img] />>\n\tat org.jsoup.safety.CleanerTest.handlesCustomProtocols(CleanerTest.java:123)  assertEquals(\"<img src=\\\"cid:12345\\\" /> \\n<img src=\\\"data:gzzt\\\" />\", preserved);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\n// ok if not defined protocol; otherwise test\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.attr(attr.getKey()); // Change absUrl to attr\n    if (!preserveRelativeLinks)\n        attr.setValue(el.absUrl(attr.getKey()));\n    \n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n"
                ],
                [
                    "\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.attr(attr.getKey()); // Change this line to get the original attribute value\n    if (!preserveRelativeLinks) \n        attr.setValue(el.absUrl(attr.getKey())); // Only set the value if preserveRelativeLinks is false\n    \n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n"
                ],
                [
                    "\n// ok if not defined protocol; otherwise test\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.attr(attr.getKey());\n    if (!preserveRelativeLinks) {\n        String absValue = el.absUrl(attr.getKey());\n        if (!absValue.isEmpty()) {\n            value = absValue;\n        }\n        attr.setValue(value);\n    }\n\n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n"
                ],
                [
                    "\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.attr(attr.getKey()); // Change from absUrl to attr\n    if (!preserveRelativeLinks) {\n        String absValue = el.absUrl(attr.getKey());\n        if (!absValue.isEmpty()) {\n            attr.setValue(absValue);\n        }\n    }\n\n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n"
                ],
                [
                    "\n// ok if not defined protocol; otherwise test\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.attr(attr.getKey());\n    if (!preserveRelativeLinks) {\n        String absValue = el.absUrl(attr.getKey());\n        if (!absValue.isEmpty()) {\n            value = absValue;\n        }\n        attr.setValue(value);\n    }\n    \n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n"
                ],
                [
                    "\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.absUrl(attr.getKey());\n    if (!preserveRelativeLinks && !value.isEmpty())\n        attr.setValue(value);\n    else\n        value = attr.getValue();\n    \n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString().toLowerCase() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n"
                ],
                [
                    "\n// ok if not defined protocol; otherwise test\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.attr(attr.getKey());\n    if (!preserveRelativeLinks) {\n        String absValue = el.absUrl(attr.getKey());\n        if (!absValue.isEmpty()) {\n            attr.setValue(absValue);\n        }\n    }\n    \n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n"
                ],
                [
                    "\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.attr(attr.getKey()); // Use el.attr() to get the original value\n    if (!preserveRelativeLinks)\n        attr.setValue(el.absUrl(attr.getKey())); // Update the attribute only if needed\n    \n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString().toLowerCase() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n"
                ],
                [
                    "\n// ok if not defined protocol; otherwise test\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.absUrl(attr.getKey());\n    if (value.isEmpty()) {\n        value = attr.getValue();\n    }\n    if (!preserveRelativeLinks)\n        attr.setValue(value);\n    \n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n"
                ],
                [
                    "\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    String value = attr.getValue(); // Get the original attribute value\n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\n// ok if not defined protocol; otherwise test\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.absUrl(attr.getKey());\n    if (value.isEmpty()) {\n        value = attr.getValue();\n    }\n    if (!preserveRelativeLinks)\n        attr.setValue(value);\n    \n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\n// ok if not defined protocol; otherwise test\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.absUrl(attr.getKey());\n    if (value.isEmpty()) {\n        value = attr.getValue();\n    }\n    if (!preserveRelativeLinks)\n        attr.setValue(value);\n    \n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}\n"
                ]
            ]
        }
    }
}