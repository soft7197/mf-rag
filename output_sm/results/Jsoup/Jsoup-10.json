{
    "Jsoup-10": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n* <code>&lt;img src></code>).\n* <p/>\n* E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n* <p/>\n* If the attribute value is already absolute (i.e. it starts with a protocol, like\n* <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n* returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n* absolute using that.\n* <p/>\n* As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n* <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n*\n* @param attributeKey The attribute key\n* @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n* could not be made successfully into a URL.\n* @see #attr\n* @see java.net.URL#URL(java.net.URL, String)\n*/\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    @Test public void absHandlesRelativeQuery() {\n\n        Document doc = Jsoup.parse(\"<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>\", \"http://jsoup.org/path/file?bar\");\n\n\n\n        Element a1 = doc.select(\"a\").first();\n\n        assertEquals(\"http://jsoup.org/path/file?foo\", a1.absUrl(\"href\"));\n\n\n\n        Element a2 = doc.select(\"a\").get(1);\n\n        assertEquals(\"http://jsoup.org/path/bar.html?foo\", a2.absUrl(\"href\"));\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: expected:<...tp://jsoup.org/path/[file]?foo> but was:<...tp://jsoup.org/path/[]?foo>\n\tat org.jsoup.nodes.NodeTest.absHandlesRelativeQuery(NodeTest.java:49)  assertEquals(\"http://jsoup.org/path/file?foo\", a1.absUrl(\"href\"));\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            base = new URL(baseUri);\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            String fixedUrl = abs.toExternalForm();\n            \n            // Handle the issue with query strings on relative URLs\n            if (relUrl.startsWith(\"?\") && base.getPath().length() > 0) {\n                fixedUrl = base.getProtocol() + \"://\" + base.getHost() + base.getPath() + relUrl;\n            }\n            return fixedUrl;\n        } catch (MalformedURLException e) {\n            try {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException ignored) {\n                return \"\";\n            }\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            if (relUrl.startsWith(\"?\")) {\n                String baseStr = baseUri;\n                int questionMarkIndex = baseStr.indexOf(\"?\");\n                if (questionMarkIndex > -1) {\n                    baseStr = baseStr.substring(0, questionMarkIndex);\n                }\n                base = new URL(baseStr);\n            }\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    }\n\n    String relUrl = attr(attributeKey);\n    try {\n        URL base = new URL(baseUri);\n        // Check if relUrl is already an absolute URL\n        URL abs = new URL(base, relUrl);\n        // Ensure the correct handling of relative queries\n        if (relUrl.startsWith(\"?\")) {\n            return base.toString().split(\"\\\\?\")[0] + relUrl;\n        }\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        try {\n            // If the baseUri is invalid, check if relUrl is an absolute URL\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException ignored) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            if (relUrl.startsWith(\"?\")) {\n                String basePath = base.getPath();\n                if (!basePath.endsWith(\"/\")) {\n                    abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), basePath + relUrl);\n                }\n            }\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    }\n\n    String relUrl = attr(attributeKey);\n    URL base;\n    try {\n        base = new URL(baseUri);\n    } catch (MalformedURLException e) {\n        // the base is unsuitable, but the attribute may be abs on its own, so try that\n        try {\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException ex) {\n            return \"\";\n        }\n    }\n\n    try {\n        URL abs = new URL(base, relUrl);\n        if (relUrl.startsWith(\"?\") && !base.getPath().endsWith(\"/\")) {\n            abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), base.getPath() + relUrl);\n        }\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        return \"\";\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // fix: handle relative URLs that are just queries\n            if (relUrl.startsWith(\"?\")) {\n                relUrl = base.getPath() + relUrl;\n            }\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    }\n\n    String relUrl = attr(attributeKey);\n\n    URL base;\n    try {\n        base = new URL(baseUri);\n    } catch (MalformedURLException e) {\n        // the base is unsuitable, but the attribute may be abs on its own, so try that\n        try {\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException ex) {\n            return \"\";\n        }\n    }\n\n    try {\n        // Correctly resolve relative URLs with query parts\n        if (relUrl.startsWith(\"?\")) {\n            relUrl = base.getPath() + relUrl;\n        }\n        URL abs = new URL(base, relUrl);\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        return \"\";\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    }\n\n    String relUrl = attr(attributeKey);\n    try {\n        URL base = new URL(baseUri);\n        if (relUrl.startsWith(\"?\")) {\n            // Special handling for relative query strings\n            String basePath = base.getPath();\n            if (!basePath.endsWith(\"/\")) {\n                basePath = basePath.substring(0, basePath.lastIndexOf('/') + 1);\n            }\n            URL abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), basePath + relUrl);\n            return abs.toExternalForm();\n        } else {\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        }\n    } catch (MalformedURLException e) {\n        try {\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException ex) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // Check if the relative URL is a query string and base path doesn't end with '/'\n            if (relUrl.startsWith(\"?\") && !base.getPath().endsWith(\"/\")) {\n                String basePath = base.getPath();\n                base = new URL(base, basePath + relUrl);\n            } else {\n                base = new URL(base, relUrl);\n            }\n            return base.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            if (relUrl.startsWith(\"?\")) {\n                relUrl = base.getPath() + relUrl;\n            }\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            base = new URL(baseUri);\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            String fixedUrl = abs.toExternalForm();\n            \n            // Handle the issue with query strings on relative URLs\n            if (relUrl.startsWith(\"?\") && base.getPath().length() > 0) {\n                fixedUrl = base.getProtocol() + \"://\" + base.getHost() + base.getPath() + relUrl;\n            }\n            return fixedUrl;\n        } catch (MalformedURLException e) {\n            try {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException ignored) {\n                return \"\";\n            }\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    }\n\n    String relUrl = attr(attributeKey);\n    try {\n        URL base = new URL(baseUri);\n        // Check if relUrl is already an absolute URL\n        URL abs = new URL(base, relUrl);\n        // Ensure the correct handling of relative queries\n        if (relUrl.startsWith(\"?\")) {\n            return base.toString().split(\"\\\\?\")[0] + relUrl;\n        }\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        try {\n            // If the baseUri is invalid, check if relUrl is an absolute URL\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException ignored) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            if (relUrl.startsWith(\"?\")) {\n                String basePath = base.getPath();\n                if (!basePath.endsWith(\"/\")) {\n                    abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), basePath + relUrl);\n                }\n            }\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    }\n\n    String relUrl = attr(attributeKey);\n    URL base;\n    try {\n        base = new URL(baseUri);\n    } catch (MalformedURLException e) {\n        // the base is unsuitable, but the attribute may be abs on its own, so try that\n        try {\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException ex) {\n            return \"\";\n        }\n    }\n\n    try {\n        URL abs = new URL(base, relUrl);\n        if (relUrl.startsWith(\"?\") && !base.getPath().endsWith(\"/\")) {\n            abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), base.getPath() + relUrl);\n        }\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        return \"\";\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // fix: handle relative URLs that are just queries\n            if (relUrl.startsWith(\"?\")) {\n                relUrl = base.getPath() + relUrl;\n            }\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    }\n\n    String relUrl = attr(attributeKey);\n\n    URL base;\n    try {\n        base = new URL(baseUri);\n    } catch (MalformedURLException e) {\n        // the base is unsuitable, but the attribute may be abs on its own, so try that\n        try {\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException ex) {\n            return \"\";\n        }\n    }\n\n    try {\n        // Correctly resolve relative URLs with query parts\n        if (relUrl.startsWith(\"?\")) {\n            relUrl = base.getPath() + relUrl;\n        }\n        URL abs = new URL(base, relUrl);\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        return \"\";\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // Check if the relative URL is a query string and base path doesn't end with '/'\n            if (relUrl.startsWith(\"?\") && !base.getPath().endsWith(\"/\")) {\n                String basePath = base.getPath();\n                base = new URL(base, basePath + relUrl);\n            } else {\n                base = new URL(base, relUrl);\n            }\n            return base.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            if (relUrl.startsWith(\"?\")) {\n                relUrl = base.getPath() + relUrl;\n            }\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            base = new URL(baseUri);\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            String fixedUrl = abs.toExternalForm();\n            \n            // Handle the issue with query strings on relative URLs\n            if (relUrl.startsWith(\"?\") && base.getPath().length() > 0) {\n                fixedUrl = base.getProtocol() + \"://\" + base.getHost() + base.getPath() + relUrl;\n            }\n            return fixedUrl;\n        } catch (MalformedURLException e) {\n            try {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException ignored) {\n                return \"\";\n            }\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    }\n\n    String relUrl = attr(attributeKey);\n    try {\n        URL base = new URL(baseUri);\n        // Check if relUrl is already an absolute URL\n        URL abs = new URL(base, relUrl);\n        // Ensure the correct handling of relative queries\n        if (relUrl.startsWith(\"?\")) {\n            return base.toString().split(\"\\\\?\")[0] + relUrl;\n        }\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        try {\n            // If the baseUri is invalid, check if relUrl is an absolute URL\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException ignored) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            if (relUrl.startsWith(\"?\")) {\n                String basePath = base.getPath();\n                if (!basePath.endsWith(\"/\")) {\n                    abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), basePath + relUrl);\n                }\n            }\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    }\n\n    String relUrl = attr(attributeKey);\n    URL base;\n    try {\n        base = new URL(baseUri);\n    } catch (MalformedURLException e) {\n        // the base is unsuitable, but the attribute may be abs on its own, so try that\n        try {\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException ex) {\n            return \"\";\n        }\n    }\n\n    try {\n        URL abs = new URL(base, relUrl);\n        if (relUrl.startsWith(\"?\") && !base.getPath().endsWith(\"/\")) {\n            abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), base.getPath() + relUrl);\n        }\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        return \"\";\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // fix: handle relative URLs that are just queries\n            if (relUrl.startsWith(\"?\")) {\n                relUrl = base.getPath() + relUrl;\n            }\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    }\n\n    String relUrl = attr(attributeKey);\n\n    URL base;\n    try {\n        base = new URL(baseUri);\n    } catch (MalformedURLException e) {\n        // the base is unsuitable, but the attribute may be abs on its own, so try that\n        try {\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException ex) {\n            return \"\";\n        }\n    }\n\n    try {\n        // Correctly resolve relative URLs with query parts\n        if (relUrl.startsWith(\"?\")) {\n            relUrl = base.getPath() + relUrl;\n        }\n        URL abs = new URL(base, relUrl);\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        return \"\";\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // Check if the relative URL is a query string and base path doesn't end with '/'\n            if (relUrl.startsWith(\"?\") && !base.getPath().endsWith(\"/\")) {\n                String basePath = base.getPath();\n                base = new URL(base, basePath + relUrl);\n            } else {\n                base = new URL(base, relUrl);\n            }\n            return base.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ],
                [
                    "\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            if (relUrl.startsWith(\"?\")) {\n                relUrl = base.getPath() + relUrl;\n            }\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n"
                ]
            ]
        }
    }
}