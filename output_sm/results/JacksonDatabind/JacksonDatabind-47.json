{
    "JacksonDatabind-47": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Method called to find out possible type refinements to use\n* for deserialization.\n*\n* @since 2.7\n*/\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n    \n    // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to\n    //    now-deprecated secondary methods; this because while\n    //    direct sub-class not yet retrofitted may only override\n    //    those methods. With 2.8 or later we may consider removal\n    //    of these methods\n\n    \n    // Ok: start by refining the main type itself; common to all types\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of\n            //    static typing this way\n            type = type.withStaticTyping();\n        } else {\n            try {\n                // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,\n                //   may be needed here too in future?\n                    type = tf.constructGeneralizedType(type, serClass);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n    // Then further processing for container types\n\n    // First, key type (for Maps, Map-like types):\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually\n                    //   specialize (narrow) type sometimes, even if more commonly opposite\n                    //   is needed.\n                    if (keyClass.isAssignableFrom(currRaw)) { // common case\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) { // collection[like], map[like], array, reference\n        // And then value types for all containers:\n       Class<?> contentClass = findSerializationContentType(a, contentType);\n       if (contentClass != null) {\n           if (contentType.hasRawClass(contentClass)) {\n               contentType = contentType.withStaticTyping();\n           } else {\n               // 03-Apr-2016, tatu: As per [databind#1178], may need to actually\n               //   specialize (narrow) type sometimes, even if more commonly opposite\n               //   is needed.\n               Class<?> currRaw = contentType.getRawClass();\n               try {\n                   if (contentClass.isAssignableFrom(currRaw)) { // common case\n                       contentType = tf.constructGeneralizedType(contentType, contentClass);\n                   } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well\n                       contentType = tf.constructSpecializedType(contentType, contentClass);\n                   } else {\n                       throw new JsonMappingException(null,\n                               String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                       contentType, contentClass.getName()));\n                   }\n               } catch (IllegalArgumentException iae) { // shouldn't really happen\n                   throw new JsonMappingException(null,\n                           String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                   type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                   iae);\n               }\n           }\n           type = type.withContentType(contentType);\n       }\n    }\n    return type;\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testBrokenAnnotation() throws Exception\n\n    {\n\n        try {\n\n            serializeAsString(MAPPER, new BrokenClass());\n\n        } catch (Exception e) {\n\n            verifyException(e, \"types not related\");\n\n        }\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: Expected an exception with one of substrings ([types not related]): got one with message \"Failed to widen type [simple type, class java.lang.Long] with annotation (value java.lang.String), from 'getValue': Class java.lang.String not a super-type of [simple type, class java.lang.Long]\"\n\tat com.fasterxml.jackson.databind.BaseTest.verifyException(BaseTest.java:368)  fail(\"Expected an exception with one of substrings (\"+Arrays.asList(matches)+\"): got one with message \\\"\"+msg+\"\\\"\");\n\tat com.fasterxml.jackson.databind.ser.TestJsonSerialize.testBrokenAnnotation(TestJsonSerialize.java:152)  verifyException(e, \"types not related\");\n \n#Test method 2:\n```java\n    public void testSpecializedAsIntermediate() throws IOException {\n\n        assertEquals(aposToQuotes(\"{'value':{'a':1,'b':2}}\"),\n\n                WRITER.writeValueAsString(new Bean1178Holder()));\n\n    }\n\n```\n#Error message: com.fasterxml.jackson.databind.JsonMappingException: Failed to widen type [simple type, class com.fasterxml.jackson.databind.ser.TestJsonSerializeAs$Bean1178Base] with annotation (value com.fasterxml.jackson.databind.ser.TestJsonSerializeAs$Bean1178Abstract), from 'value': Class com.fasterxml.jackson.databind.ser.TestJsonSerializeAs$Bean1178Abstract not a super-type of [simple type, class com.fasterxml.jackson.databind.ser.TestJsonSerializeAs$Bean1178Base]\n\tat com.fasterxml.jackson.databind.AnnotationIntrospector.refineSerializationType(AnnotationIntrospector.java:821)  throw new JsonMappingException(null,                            String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",                                    type, serClass.getName(), a.getName(), iae.getMessage()),                                    iae);\n\tat com.fasterxml.jackson.databind.ser.PropertyBuilder.findSerializationType(PropertyBuilder.java:194)  JavaType secondary = _annotationIntrospector.refineSerializationType(_config, a, declaredType);\n\tat com.fasterxml.jackson.databind.ser.PropertyBuilder.buildWriter(PropertyBuilder.java:73)  JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n\tat com.fasterxml.jackson.databind.ser.BeanSerializerFactory._constructWriter(BeanSerializerFactory.java:805)  BeanPropertyWriter pbw = pb.buildWriter(prov, propDef, type, annotatedSerializer,                        typeSer, contentTypeSer, accessor, staticTyping);\n\tat com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanProperties(BeanSerializerFactory.java:610)  result.add(_constructWriter(prov, property, pb, staticTyping, (AnnotatedField) accessor));\n\tat com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer(BeanSerializerFactory.java:388)  List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n\tat com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanSerializer(BeanSerializerFactory.java:271)  return constructBeanSerializer(prov, beanDesc);\n\tat com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(BeanSerializerFactory.java:223)  ser = findBeanSerializer(prov, type, beanDesc);\n\tat com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:157)  return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n\tat com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1215)  return (JsonSerializer<Object>)_serializerFactory.createSerializer(this, type);\n\tat com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1167)  ser = _createUntypedSerializer(fullType);\n\tat com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(SerializerProvider.java:490)  ser = _createAndCacheUntypedSerializer(valueType);\n\tat com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(SerializerProvider.java:688)  ser = findValueSerializer(valueType, property);\n\tat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:107)  final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n\tat com.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue(ObjectWriter.java:1129)  _prefetch.serialize(gen, value, _serializerProvider());\n\tat com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(ObjectWriter.java:1001)  _configAndWriteValue(_generatorFactory.createGenerator(sw), value);\n\tat com.fasterxml.jackson.databind.ser.TestJsonSerializeAs.testSpecializedAsIntermediate(TestJsonSerializeAs.java:118)  assertEquals(aposToQuotes(\"{'value':{'a':1,'b':2}}\"),                WRITER.writeValueAsString(new Bean1178Holder()));\nCaused by: java.lang.IllegalArgumentException: Class com.fasterxml.jackson.databind.ser.TestJsonSerializeAs$Bean1178Abstract not a super-type of [simple type, class com.fasterxml.jackson.databind.ser.TestJsonSerializeAs$Bean1178Base]\n\tat com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType(TypeFactory.java:482)  throw new IllegalArgumentException(String.format(                        \"Class %s not a super-type of %s\", superClass.getName(), baseType));\n\tat com.fasterxml.jackson.databind.AnnotationIntrospector.refineSerializationType(AnnotationIntrospector.java:819)  type = tf.constructGeneralizedType(type, serClass);\n\t... 51 more\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n    \n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                if (serClass.isAssignableFrom(type.getRawClass())) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n    \n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (contentType.hasRawClass(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                Class<?> currRaw = contentType.getRawClass();\n                try {\n                    if (contentClass.isAssignableFrom(currRaw)) {\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currRaw.isAssignableFrom(contentClass)) {\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                        contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}\n"
                ],
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                if (serClass.isAssignableFrom(type.getRawClass())) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else if (type.getRawClass().isAssignableFrom(serClass)) {\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n       Class<?> contentClass = findSerializationContentType(a, contentType);\n       if (contentClass != null) {\n           if (contentType.hasRawClass(contentClass)) {\n               contentType = contentType.withStaticTyping();\n           } else {\n               Class<?> currRaw = contentType.getRawClass();\n               try {\n                   if (contentClass.isAssignableFrom(currRaw)) {\n                       contentType = tf.constructGeneralizedType(contentType, contentClass);\n                   } else if (currRaw.isAssignableFrom(contentClass)) {\n                       contentType = tf.constructSpecializedType(contentType, contentClass);\n                   } else {\n                       throw new JsonMappingException(null,\n                               String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                       contentType, contentClass.getName()));\n                   }\n               } catch (IllegalArgumentException iae) {\n                   throw new JsonMappingException(null,\n                           String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                   type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                   iae);\n               }\n           }\n           type = type.withContentType(contentType);\n       }\n    }\n    return type;\n}\n"
                ],
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    // Ok: start by refining the main type itself; common to all types\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of\n            //    static typing this way\n            type = type.withStaticTyping();\n        } else {\n            try {\n                // Use `constructSpecializedType` instead of `constructGeneralizedType`\n                type = tf.constructSpecializedType(type, serClass);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to specialize type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n    // Then further processing for container types\n\n    // First, key type (for Maps, Map-like types):\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) { // common case\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) { // collection[like], map[like], array, reference\n        // And then value types for all containers:\n       Class<?> contentClass = findSerializationContentType(a, contentType);\n       if (contentClass != null) {\n           if (contentType.hasRawClass(contentClass)) {\n               contentType = contentType.withStaticTyping();\n           } else {\n               Class<?> currRaw = contentType.getRawClass();\n               try {\n                   if (contentClass.isAssignableFrom(currRaw)) { // common case\n                       contentType = tf.constructGeneralizedType(contentType, contentClass);\n                   } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well\n                       contentType = tf.constructSpecializedType(contentType, contentClass);\n                   } else {\n                       throw new JsonMappingException(null,\n                               String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                       contentType, contentClass.getName()));\n                   }\n               } catch (IllegalArgumentException iae) { // shouldn't really happen\n                   throw new JsonMappingException(null,\n                           String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                   type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                   iae);\n               }\n           }\n           type = type.withContentType(contentType);\n       }\n    }\n    return type;\n}\n"
                ],
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    // Ok: start by refining the main type itself; common to all types\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                // Corrected to use constructSpecializedType instead of constructGeneralizedType\n                type = tf.constructSpecializedType(type, serClass);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n    // Then further processing for container types\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n       Class<?> contentClass = findSerializationContentType(a, contentType);\n       if (contentClass != null) {\n           if (contentType.hasRawClass(contentClass)) {\n               contentType = contentType.withStaticTyping();\n           } else {\n               Class<?> currRaw = contentType.getRawClass();\n               try {\n                   if (contentClass.isAssignableFrom(currRaw)) {\n                       contentType = tf.constructGeneralizedType(contentType, contentClass);\n                   } else if (currRaw.isAssignableFrom(contentClass)) {\n                       contentType = tf.constructSpecializedType(contentType, contentClass);\n                   } else {\n                       throw new JsonMappingException(null,\n                               String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                       contentType, contentClass.getName()));\n                   }\n               } catch (IllegalArgumentException iae) {\n                   throw new JsonMappingException(null,\n                           String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                   type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                   iae);\n               }\n           }\n           type = type.withContentType(contentType);\n       }\n    }\n    return type;\n}\n"
                ],
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n    \n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                // Check if serClass is a super-type of the current type\n                if (serClass.isAssignableFrom(type.getRawClass())) {\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else if (type.getRawClass().isAssignableFrom(serClass)) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to refine type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to refine key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (contentType.hasRawClass(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                Class<?> currRaw = contentType.getRawClass();\n                try {\n                    if (contentClass.isAssignableFrom(currRaw)) {\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currRaw.isAssignableFrom(contentClass)) {\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                        contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to refine content type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}\n"
                ],
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                if (serClass.isAssignableFrom(type.getRawClass())) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else if (type.getRawClass().isAssignableFrom(serClass)) {\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n       Class<?> contentClass = findSerializationContentType(a, contentType);\n       if (contentClass != null) {\n           if (contentType.hasRawClass(contentClass)) {\n               contentType = contentType.withStaticTyping();\n           } else {\n               Class<?> currRaw = contentType.getRawClass();\n               try {\n                   if (contentClass.isAssignableFrom(currRaw)) {\n                       contentType = tf.constructGeneralizedType(contentType, contentClass);\n                   } else if (currRaw.isAssignableFrom(contentClass)) {\n                       contentType = tf.constructSpecializedType(contentType, contentClass);\n                   } else {\n                       throw new JsonMappingException(null,\n                               String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                       contentType, contentClass.getName()));\n                   }\n               } catch (IllegalArgumentException iae) {\n                   throw new JsonMappingException(null,\n                           String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                   type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                   iae);\n               }\n           }\n           type = type.withContentType(contentType);\n       }\n    }\n    return type;\n}\n"
                ],
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n    \n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                if (serClass.isAssignableFrom(type.getRawClass())) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else if (type.getRawClass().isAssignableFrom(serClass)) {\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n       Class<?> contentClass = findSerializationContentType(a, contentType);\n       if (contentClass != null) {\n           if (contentType.hasRawClass(contentClass)) {\n               contentType = contentType.withStaticTyping();\n           } else {\n               Class<?> currRaw = contentType.getRawClass();\n               try {\n                   if (contentClass.isAssignableFrom(currRaw)) {\n                       contentType = tf.constructGeneralizedType(contentType, contentClass);\n                   } else if (currRaw.isAssignableFrom(contentClass)) {\n                       contentType = tf.constructSpecializedType(contentType, contentClass);\n                   } else {\n                       throw new JsonMappingException(null,\n                               String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                       contentType, contentClass.getName()));\n                   }\n               } catch (IllegalArgumentException iae) {\n                   throw new JsonMappingException(null,\n                           String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                   type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                   iae);\n               }\n           }\n           type = type.withContentType(contentType);\n       }\n    }\n    return type;\n}\n"
                ],
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                if (serClass.isAssignableFrom(type.getRawClass())) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': Class %s not a super-type of %s\",\n                                type, serClass.getName(), a.getName(), serClass.getName(), type));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n       Class<?> contentClass = findSerializationContentType(a, contentType);\n       if (contentClass != null) {\n           if (contentType.hasRawClass(contentClass)) {\n               contentType = contentType.withStaticTyping();\n           } else {\n               Class<?> currRaw = contentType.getRawClass();\n               try {\n                   if (contentClass.isAssignableFrom(currRaw)) {\n                       contentType = tf.constructGeneralizedType(contentType, contentClass);\n                   } else if (currRaw.isAssignableFrom(contentClass)) {\n                       contentType = tf.constructSpecializedType(contentType, contentClass);\n                   } else {\n                       throw new JsonMappingException(null,\n                               String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                       contentType, contentClass.getName()));\n                   }\n               } catch (IllegalArgumentException iae) {\n                   throw new JsonMappingException(null,\n                           String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                   type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                   iae);\n               }\n           }\n           type = type.withContentType(contentType);\n       }\n    }\n    return type;\n}\n"
                ],
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n    \n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                if (serClass.isAssignableFrom(type.getRawClass())) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else if (type.getRawClass().isAssignableFrom(serClass)) {\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n       Class<?> contentClass = findSerializationContentType(a, contentType);\n       if (contentClass != null) {\n           if (contentType.hasRawClass(contentClass)) {\n               contentType = contentType.withStaticTyping();\n           } else {\n               Class<?> currRaw = contentType.getRawClass();\n               try {\n                   if (contentClass.isAssignableFrom(currRaw)) {\n                       contentType = tf.constructGeneralizedType(contentType, contentClass);\n                   } else if (currRaw.isAssignableFrom(contentClass)) {\n                       contentType = tf.constructSpecializedType(contentType, contentClass);\n                   } else {\n                       throw new JsonMappingException(null,\n                               String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                       contentType, contentClass.getName()));\n                   }\n               } catch (IllegalArgumentException iae) {\n                   throw new JsonMappingException(null,\n                           String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                   type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                   iae);\n               }\n           }\n           type = type.withContentType(contentType);\n       }\n    }\n    return type;\n}\n"
                ],
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                if (serClass.isAssignableFrom(type.getRawClass())) {\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else if (type.getRawClass().isAssignableFrom(serClass)) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (contentType.hasRawClass(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                Class<?> currRaw = contentType.getRawClass();\n                try {\n                    if (contentClass.isAssignableFrom(currRaw)) {\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currRaw.isAssignableFrom(contentClass)) {\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                        contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n    \n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                // Check if serClass is a super-type of the current type\n                if (serClass.isAssignableFrom(type.getRawClass())) {\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else if (type.getRawClass().isAssignableFrom(serClass)) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to refine type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to refine key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (contentType.hasRawClass(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                Class<?> currRaw = contentType.getRawClass();\n                try {\n                    if (contentClass.isAssignableFrom(currRaw)) {\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currRaw.isAssignableFrom(contentClass)) {\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                        contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to refine content type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}\n"
                ],
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                if (serClass.isAssignableFrom(type.getRawClass())) {\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else if (type.getRawClass().isAssignableFrom(serClass)) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (contentType.hasRawClass(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                Class<?> currRaw = contentType.getRawClass();\n                try {\n                    if (contentClass.isAssignableFrom(currRaw)) {\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currRaw.isAssignableFrom(contentClass)) {\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                        contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}\n"
                ]
            ],
            "compiler_error_or_timeout": true,
            "plausible_patches": [
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n    \n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                // Check if serClass is a super-type of the current type\n                if (serClass.isAssignableFrom(type.getRawClass())) {\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else if (type.getRawClass().isAssignableFrom(serClass)) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to refine type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to refine key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (contentType.hasRawClass(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                Class<?> currRaw = contentType.getRawClass();\n                try {\n                    if (contentClass.isAssignableFrom(currRaw)) {\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currRaw.isAssignableFrom(contentClass)) {\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                        contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to refine content type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}\n"
                ],
                [
                    "\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                if (serClass.isAssignableFrom(type.getRawClass())) {\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else if (type.getRawClass().isAssignableFrom(serClass)) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (contentType.hasRawClass(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                Class<?> currRaw = contentType.getRawClass();\n                try {\n                    if (contentClass.isAssignableFrom(currRaw)) {\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currRaw.isAssignableFrom(contentClass)) {\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                        contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}\n"
                ]
            ]
        }
    }
}