{
    "JacksonDatabind-35": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Method that handles type information wrapper, locates actual\n* subtype deserializer to use, and calls it to do actual\n* deserialization.\n*/\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n        // should always get field name, but just in case...\n        if (p.nextToken() != JsonToken.FIELD_NAME) {\n            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                    \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n        }\n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    p.nextToken();\n\n    // Minor complication: we may need to merge type id in?\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject(); // recreate START_OBJECT\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n    \n    Object value = deser.deserialize(p, ctxt);\n    // And then need the closing END_OBJECT\n    if (p.nextToken() != JsonToken.END_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                \"expected closing END_OBJECT after type information and deserialized value\");\n    }\n    return value;\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testSimple() throws Exception\n\n    {\n\n        Company comp = new Company();\n\n        comp.addComputer(new DesktopComputer(\"computer-1\", \"Bangkok\"));\n\n        comp.addComputer(new DesktopComputer(\"computer-2\", \"Pattaya\"));\n\n        comp.addComputer(new LaptopComputer(\"computer-3\", \"Apple\"));\n\n\n\n        final ObjectMapper mapper = new ObjectMapper();\n\n\n\n        String json = mapper.writerWithDefaultPrettyPrinter()\n\n                .writeValueAsString(comp);\n\n\n\n        System.out.println(\"JSON: \"+json);\n\n\n\n        Company result = mapper.readValue(json, Company.class);\n\n        assertNotNull(result);\n\n        assertNotNull(result.computers);\n\n        assertEquals(3, result.computers.size());\n\n    }\n\n```\n#Error message: com.fasterxml.jackson.databind.JsonMappingException: Unexpected token (FIELD_NAME), expected START_OBJECT: need JSON Object to contain As.WRAPPER_OBJECT type information for class com.fasterxml.jackson.databind.jsontype.WrapperObjectWithObjectIdTest$Computer\n  \"computers\" : [ {\n    \"desktop\" : {\n      \"id\" : \"computer-1\",\n      \"location\" : \"Bangkok\"\n    }\n  }, {\n    \"desktop\" : {\n      \"id\" : \"computer-2\",\n      \"location\" : \"Pattaya\"\n    }\n  }, {\n    \"laptop\" : {\n      \"id\" : \"computer-3\",\n      \"vendor\" : \"Apple\"\n    }\n  } ]\n}; line: 3, column: 5] (through reference chain: com.fasterxml.jackson.databind.jsontype.Company[\"computers\"]->java.util.ArrayList[0])\n\tat com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)  return new JsonMappingException(msg, ((jp == null) ? null : jp.getTokenLocation()));\n\tat com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(DeserializationContext.java:927)  return JsonMappingException.from(p, msg);\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer._deserialize(AsWrapperTypeDeserializer.java:90)  throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer.deserializeTypedFromObject(AsWrapperTypeDeserializer.java:49)  return _deserialize(jp, ctxt);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeWithType(BeanDeserializerBase.java:966)  return typeDeserializer.deserializeTypedFromObject(p, ctxt);\n\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:247)  value = valueDes.deserializeWithType(p, ctxt, typeDeser);\n\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:217)  return deserialize(p, ctxt, (Collection<Object>) _valueInstantiator.createUsingDefault(ctxt));\n\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:25)  @JacksonStdImpl\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:523)  return _valueDeserializer.deserialize(p, ctxt);\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:101)  Object value = deserialize(jp, ctxt);\n\tat com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.findDeserializeAndSet(BeanPropertyMap.java:285)  bucket.value.deserializeAndSet(p, ctxt, bean);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:248)  if (!_beanProperties.findDeserializeAndSet(p, ctxt, bean, propName)) {                handleUnknownVanilla(p, ctxt, bean, propName);            }\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:136)  return vanillaDeserialize(p, ctxt, p.nextToken());\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3564)  result = deser.deserialize(jp, ctxt);\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2580)  return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueType));\n\tat com.fasterxml.jackson.databind.jsontype.WrapperObjectWithObjectIdTest.testSimple(WrapperObjectWithObjectIdTest.java:83)  Company result = mapper.readValue(json, Company.class);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    // should always get field name, but just in case...\n    if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n        p.nextToken(); // move to FIELD_NAME\n    }\n    if (p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n    }\n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    p.nextToken();\n\n    // Minor complication: we may need to merge type id in?\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject(); // recreate START_OBJECT\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n    \n    Object value = deser.deserialize(p, ctxt);\n    // And then need the closing END_OBJECT\n    if (p.nextToken() != JsonToken.END_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                \"expected closing END_OBJECT after type information and deserialized value\");\n    }\n    return value;\n}\n"
                ],
                [
                    "\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    // should always get field name, but just in case...\n    if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n        p.nextToken();\n    }\n    if (p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n    }\n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    p.nextToken();\n\n    // Minor complication: we may need to merge type id in?\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject(); // recreate START_OBJECT\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n    \n    Object value = deser.deserialize(p, ctxt);\n    // And then need the closing END_OBJECT\n    if (p.nextToken() != JsonToken.END_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                \"expected closing END_OBJECT after type information and deserialized value\");\n    }\n    return value;\n}\n"
                ],
                [
                    "\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    if (p.getCurrentToken() == JsonToken.FIELD_NAME || p.nextToken() == JsonToken.FIELD_NAME) {\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n\n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }\n    throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n            \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n}\n"
                ],
                [
                    "\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n\n    if (p.getCurrentToken() == JsonToken.FIELD_NAME) {\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n\n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    } else {\n        p.nextToken(); // Move to FIELD_NAME\n        return _deserialize(p, ctxt); // Retry with FIELD_NAME\n    }\n}\n"
                ],
                [
                    "\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \" + baseTypeName());\n    }\n    // should always get field name, but just in case...\n    if (p.getCurrentToken() == JsonToken.FIELD_NAME || p.nextToken() == JsonToken.FIELD_NAME) {\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n\n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }\n    throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n            \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n}\n"
                ],
                [
                    "\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    // should always get field name, but just in case...\n    if (p.getCurrentToken() == JsonToken.FIELD_NAME || p.nextToken() == JsonToken.FIELD_NAME) {\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    } else {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n    }\n}\n"
                ],
                [
                    "\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    // should always get field name, but just in case...\n    if (p.getCurrentToken() == JsonToken.FIELD_NAME || p.nextToken() == JsonToken.FIELD_NAME) {\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    } else {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n    }\n}\n"
                ],
                [
                    "\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    // should always get field name, but just in case...\n    if (p.getCurrentToken() == JsonToken.FIELD_NAME || p.nextToken() == JsonToken.FIELD_NAME) {\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    } else {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n    }\n}\n"
                ],
                [
                    "\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    if (p.getCurrentToken() == JsonToken.FIELD_NAME) {\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    } else {\n        // should always get field name, but just in case...\n        if (p.nextToken() != JsonToken.FIELD_NAME) {\n            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                    \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n        }\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }\n}\n"
                ],
                [
                    "\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    // should always get field name, but just in case...\n    if (p.getCurrentToken() == JsonToken.FIELD_NAME || p.nextToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n    }\n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    p.nextToken();\n\n    // Minor complication: we may need to merge type id in?\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject(); // recreate START_OBJECT\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n    \n    Object value = deser.deserialize(p, ctxt);\n    // And then need the closing END_OBJECT\n    if (p.nextToken() != JsonToken.END_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                \"expected closing END_OBJECT after type information and deserialized value\");\n    }\n    return value;\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    // should always get field name, but just in case...\n    if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n        p.nextToken(); // move to FIELD_NAME\n    }\n    if (p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n    }\n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    p.nextToken();\n\n    // Minor complication: we may need to merge type id in?\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject(); // recreate START_OBJECT\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n    \n    Object value = deser.deserialize(p, ctxt);\n    // And then need the closing END_OBJECT\n    if (p.nextToken() != JsonToken.END_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                \"expected closing END_OBJECT after type information and deserialized value\");\n    }\n    return value;\n}\n"
                ]
            ],
            "compiler_error_or_timeout": true,
            "plausible_patches": [
                [
                    "\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    // should always get field name, but just in case...\n    if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n        p.nextToken(); // move to FIELD_NAME\n    }\n    if (p.getCurrentToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n    }\n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    p.nextToken();\n\n    // Minor complication: we may need to merge type id in?\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject(); // recreate START_OBJECT\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n    \n    Object value = deser.deserialize(p, ctxt);\n    // And then need the closing END_OBJECT\n    if (p.nextToken() != JsonToken.END_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                \"expected closing END_OBJECT after type information and deserialized value\");\n    }\n    return value;\n}\n"
                ]
            ]
        }
    }
}