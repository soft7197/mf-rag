{
    "JacksonDatabind-78": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Method that {@link DeserializerCache}s call to create a new\n* deserializer for types other than Collections, Maps, arrays and\n* enums.\n*/\n@Override\n    public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        // We may also have custom overrides:\n        JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n        if (custom != null) {\n            return custom;\n        }\n        /* One more thing to check: do we have an exception type\n         * (Throwable or its sub-classes)? If so, need slightly\n         * different handling.\n         */\n        if (type.isThrowable()) {\n            return buildThrowableDeserializer(ctxt, type, beanDesc);\n        }\n        /* Or, for abstract types, may have alternate means for resolution\n         * (defaulting, materialization)\n         */\n        // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n        //    not something we could materialize anything for\n        if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n            // Let's make it possible to materialize abstract types.\n            JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n            if (concreteType != null) {\n                /* important: introspect actual implementation (abstract class or\n                 * interface doesn't have constructors, for one)\n                 */\n                beanDesc = config.introspect(concreteType);\n                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n            }\n        }\n        // Otherwise, may want to check handlers for standard types, from superclass:\n        @SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n        if (deser != null) {\n            return deser;\n        }\n\n        // Otherwise: could the class be a Bean class? If not, bail out\n        if (!isPotentialBeanType(type.getRawClass())) {\n            return null;\n        }\n        // For checks like [databind#1599]\n        // Use generic bean introspection to build deserializer\n        return buildBeanDeserializer(ctxt, type, beanDesc);\n    }\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testIssue1599() throws Exception\n\n    {\n\n        final String JSON = aposToQuotes(\n\n \"{'id': 124,\\n\"\n\n+\" 'obj':[ 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl',\\n\"\n\n+\"  {\\n\"\n\n+\"    'transletBytecodes' : [ 'AAIAZQ==' ],\\n\"\n\n+\"    'transletName' : 'a.b',\\n\"\n\n+\"    'outputProperties' : { }\\n\"\n\n+\"  }\\n\"\n\n+\" ]\\n\"\n\n+\"}\"\n\n        );\n\n        ObjectMapper mapper = new ObjectMapper();\n\n        mapper.enableDefaultTyping();\n\n        try {\n\n            mapper.readValue(JSON, Bean1599.class);\n\n            fail(\"Should not pass\");\n\n        } catch (JsonMappingException e) {\n\n            verifyException(e, \"Illegal type\");\n\n            verifyException(e, \"to deserialize\");\n\n            verifyException(e, \"prevented for security reasons\");\n\n        }\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: Expected an exception with one of substrings ([Illegal type]): got one with message \"N/A\n \"obj\":[ \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\",\n  {\n    \"transletBytecodes\" : [ \"AAIAZQ==\" ],\n    \"transletName\" : \"a.b\",\n    \"outputProperties\" : { }\n  }\n ]\n}; line: 6, column: 26] (through reference chain: com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest$Bean1599[\"obj\"]->com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl[\"outputProperties\"])\"\n\tat com.fasterxml.jackson.databind.BaseTest.verifyException(BaseTest.java:367)  fail(\"Expected an exception with one of substrings (\"+Arrays.asList(matches)+\"): got one with message \\\"\"+msg+\"\\\"\");\n\tat com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest.testIssue1599(IllegalTypesCheckTest.java:35)  verifyException(e, \"Illegal type\");\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\n@Override\n    public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        // We may also have custom overrides:\n        JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n        if (custom != null) {\n            return custom;\n        }\n        /* One more thing to check: do we have an exception type\n         * (Throwable or its sub-classes)? If so, need slightly\n         * different handling.\n         */\n        if (type.isThrowable()) {\n            return buildThrowableDeserializer(ctxt, type, beanDesc);\n        }\n        /* Or, for abstract types, may have alternate means for resolution\n         * (defaulting, materialization)\n         */\n        // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n        //    not something we could materialize anything for\n        if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n            // Let's make it possible to materialize abstract types.\n            JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n            if (concreteType != null) {\n                /* important: introspect actual implementation (abstract class or\n                 * interface doesn't have constructors, for one)\n                 */\n                beanDesc = config.introspect(concreteType);\n                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n            }\n        }\n        // Otherwise, may want to check handlers for standard types, from superclass:\n        @SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n        if (deser != null) {\n            return deser;\n        }\n\n        // Check for illegal types to prevent security issues\n        if (isIllegalType(type.getRawClass())) {\n            throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" +\n                    type.getRawClass().getName() + \"; prevented for security reasons\");\n        }\n\n        // Otherwise: could the class be a Bean class? If not, bail out\n        if (!isPotentialBeanType(type.getRawClass())) {\n            return null;\n        }\n        // For checks like [databind#1599]\n        // Use generic bean introspection to build deserializer\n        return buildBeanDeserializer(ctxt, type, beanDesc);\n    }\n\n    private boolean isIllegalType(Class<?> rawClass) {\n        return rawClass.getName().equals(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n    }\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    // Check for illegal types and throw exception if found\n    if (isIllegalType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type +\n                \"; prevented for security reasons\");\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isIllegalType(Class<?> rawClass) {\n    // Add logic to determine if the class is illegal, e.g., checking against a list of disallowed types\n    return rawClass.getName().equals(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n}\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Check for known illegal types to prevent security issues */\n    if (isIllegalType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: prevented for security reasons\");\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isIllegalType(Class<?> rawClass) {\n    // Add checks for known illegal types\n    return \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\".equals(rawClass.getName());\n}\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    // Security check for illegal types\n    if (isIllegalType(type)) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type);\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isIllegalType(JavaType type) {\n    String className = type.getRawClass().getName();\n    return className.equals(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n}\n"
                ],
                [
                    "\n@Override\n    public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        // We may also have custom overrides:\n        JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n        if (custom != null) {\n            return custom;\n        }\n        /* One more thing to check: do we have an exception type\n         * (Throwable or its sub-classes)? If so, need slightly\n         * different handling.\n         */\n        if (type.isThrowable()) {\n            return buildThrowableDeserializer(ctxt, type, beanDesc);\n        }\n        /* Or, for abstract types, may have alternate means for resolution\n         * (defaulting, materialization)\n         */\n        // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n        //    not something we could materialize anything for\n        if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n            // Let's make it possible to materialize abstract types.\n            JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n            if (concreteType != null) {\n                /* important: introspect actual implementation (abstract class or\n                 * interface doesn't have constructors, for one)\n                 */\n                beanDesc = config.introspect(concreteType);\n                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n            }\n        }\n        // Otherwise, may want to check handlers for standard types, from superclass:\n        @SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n        if (deser != null) {\n            return deser;\n        }\n\n        // Security check for illegal types\n        if (isIllegalType(type.getRawClass())) {\n            throw JsonMappingException.from(ctxt, \"Illegal type to deserialize: \" + type);\n        }\n\n        // Otherwise: could the class be a Bean class? If not, bail out\n        if (!isPotentialBeanType(type.getRawClass())) {\n            return null;\n        }\n        // For checks like [databind#1599]\n        // Use generic bean introspection to build deserializer\n        return buildBeanDeserializer(ctxt, type, beanDesc);\n    }\n\n    private boolean isIllegalType(Class<?> rawClass) {\n        String className = rawClass.getName();\n        return className.equals(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n    }\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Security check: Prevent deserialization of certain types\n    if (isForbiddenType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type.getRawClass().getName() +\n                \"; prevented for security reasons\");\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isForbiddenType(Class<?> rawClass) {\n    // Add forbidden types here\n    return rawClass.getName().equals(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n}\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n\n    // Security check for disallowed types\n    if (isDisallowedType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type.getRawClass().getName() + \"; prevented for security reasons\");\n    }\n\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isDisallowedType(Class<?> rawClass) {\n    // Example check, this should include actual checks for security\n    String className = rawClass.getName();\n    return \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\".equals(className);\n}\n"
                ],
                [
                    "\n@Override\n    public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        // We may also have custom overrides:\n        JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n        if (custom != null) {\n            return custom;\n        }\n        /* One more thing to check: do we have an exception type\n         * (Throwable or its sub-classes)? If so, need slightly\n         * different handling.\n         */\n        if (type.isThrowable()) {\n            return buildThrowableDeserializer(ctxt, type, beanDesc);\n        }\n        /* Or, for abstract types, may have alternate means for resolution\n         * (defaulting, materialization)\n         */\n        // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n        //    not something we could materialize anything for\n        if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n            // Let's make it possible to materialize abstract types.\n            JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n            if (concreteType != null) {\n                /* important: introspect actual implementation (abstract class or\n                 * interface doesn't have constructors, for one)\n                 */\n                beanDesc = config.introspect(concreteType);\n                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n            }\n        }\n        // Otherwise, may want to check handlers for standard types, from superclass:\n        @SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n        if (deser != null) {\n            return deser;\n        }\n\n        // Check for illegal types for security reasons\n        if (isIllegalType(type.getRawClass())) {\n            throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type);\n        }\n\n        // Otherwise: could the class be a Bean class? If not, bail out\n        if (!isPotentialBeanType(type.getRawClass())) {\n            return null;\n        }\n        // For checks like [databind#1599]\n        // Use generic bean introspection to build deserializer\n        return buildBeanDeserializer(ctxt, type, beanDesc);\n    }\n\n    private boolean isIllegalType(Class<?> rawClass) {\n        // Add checks for known illegal types\n        return \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\".equals(rawClass.getName());\n    }\n"
                ],
                [
                    "\n@Override\n    public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        // We may also have custom overrides:\n        JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n        if (custom != null) {\n            return custom;\n        }\n        /* One more thing to check: do we have an exception type\n         * (Throwable or its sub-classes)? If so, need slightly\n         * different handling.\n         */\n        if (type.isThrowable()) {\n            return buildThrowableDeserializer(ctxt, type, beanDesc);\n        }\n        /* Or, for abstract types, may have alternate means for resolution\n         * (defaulting, materialization)\n         */\n        // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n        //    not something we could materialize anything for\n        if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n            // Let's make it possible to materialize abstract types.\n            JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n            if (concreteType != null) {\n                /* important: introspect actual implementation (abstract class or\n                 * interface doesn't have constructors, for one)\n                 */\n                beanDesc = config.introspect(concreteType);\n                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n            }\n        }\n        // Security check to prevent deserialization of certain types\n        if (isIllegalType(type)) {\n            throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type);\n        }\n        // Otherwise, may want to check handlers for standard types, from superclass:\n        @SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n        if (deser != null) {\n            return deser;\n        }\n\n        // Otherwise: could the class be a Bean class? If not, bail out\n        if (!isPotentialBeanType(type.getRawClass())) {\n            return null;\n        }\n        // For checks like [databind#1599]\n        // Use generic bean introspection to build deserializer\n        return buildBeanDeserializer(ctxt, type, beanDesc);\n    }\n\n    private boolean isIllegalType(JavaType type) {\n        // Define logic to check for illegal types, e.g., specific classes or packages\n        String className = type.getRawClass().getName();\n        return className.startsWith(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n    }\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    // Check for illegal types for security reasons\n    if (isIllegalType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type);\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isIllegalType(Class<?> clazz) {\n    // Add checks for known illegal types here\n    String className = clazz.getName();\n    return className.equals(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\n@Override\n    public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        // We may also have custom overrides:\n        JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n        if (custom != null) {\n            return custom;\n        }\n        /* One more thing to check: do we have an exception type\n         * (Throwable or its sub-classes)? If so, need slightly\n         * different handling.\n         */\n        if (type.isThrowable()) {\n            return buildThrowableDeserializer(ctxt, type, beanDesc);\n        }\n        /* Or, for abstract types, may have alternate means for resolution\n         * (defaulting, materialization)\n         */\n        // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n        //    not something we could materialize anything for\n        if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n            // Let's make it possible to materialize abstract types.\n            JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n            if (concreteType != null) {\n                /* important: introspect actual implementation (abstract class or\n                 * interface doesn't have constructors, for one)\n                 */\n                beanDesc = config.introspect(concreteType);\n                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n            }\n        }\n        // Otherwise, may want to check handlers for standard types, from superclass:\n        @SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n        if (deser != null) {\n            return deser;\n        }\n\n        // Check for illegal types to prevent security issues\n        if (isIllegalType(type.getRawClass())) {\n            throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" +\n                    type.getRawClass().getName() + \"; prevented for security reasons\");\n        }\n\n        // Otherwise: could the class be a Bean class? If not, bail out\n        if (!isPotentialBeanType(type.getRawClass())) {\n            return null;\n        }\n        // For checks like [databind#1599]\n        // Use generic bean introspection to build deserializer\n        return buildBeanDeserializer(ctxt, type, beanDesc);\n    }\n\n    private boolean isIllegalType(Class<?> rawClass) {\n        return rawClass.getName().equals(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n    }\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    // Check for illegal types and throw exception if found\n    if (isIllegalType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type +\n                \"; prevented for security reasons\");\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isIllegalType(Class<?> rawClass) {\n    // Add logic to determine if the class is illegal, e.g., checking against a list of disallowed types\n    return rawClass.getName().equals(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n}\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Check for known illegal types to prevent security issues */\n    if (isIllegalType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: prevented for security reasons\");\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isIllegalType(Class<?> rawClass) {\n    // Add checks for known illegal types\n    return \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\".equals(rawClass.getName());\n}\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Security check: Prevent deserialization of certain types\n    if (isForbiddenType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type.getRawClass().getName() +\n                \"; prevented for security reasons\");\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isForbiddenType(Class<?> rawClass) {\n    // Add forbidden types here\n    return rawClass.getName().equals(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n}\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n\n    // Security check for disallowed types\n    if (isDisallowedType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type.getRawClass().getName() + \"; prevented for security reasons\");\n    }\n\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isDisallowedType(Class<?> rawClass) {\n    // Example check, this should include actual checks for security\n    String className = rawClass.getName();\n    return \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\".equals(className);\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    // Check for illegal types and throw exception if found\n    if (isIllegalType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type +\n                \"; prevented for security reasons\");\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isIllegalType(Class<?> rawClass) {\n    // Add logic to determine if the class is illegal, e.g., checking against a list of disallowed types\n    return rawClass.getName().equals(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n}\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Check for known illegal types to prevent security issues */\n    if (isIllegalType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: prevented for security reasons\");\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isIllegalType(Class<?> rawClass) {\n    // Add checks for known illegal types\n    return \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\".equals(rawClass.getName());\n}\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Security check: Prevent deserialization of certain types\n    if (isForbiddenType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type.getRawClass().getName() +\n                \"; prevented for security reasons\");\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isForbiddenType(Class<?> rawClass) {\n    // Add forbidden types here\n    return rawClass.getName().equals(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n}\n"
                ],
                [
                    "\n@Override\npublic JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n        JavaType type, BeanDescription beanDesc)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    // We may also have custom overrides:\n    JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    /* One more thing to check: do we have an exception type\n     * (Throwable or its sub-classes)? If so, need slightly\n     * different handling.\n     */\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    /* Or, for abstract types, may have alternate means for resolution\n     * (defaulting, materialization)\n     */\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n    //    not something we could materialize anything for\n    if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {\n        // Let's make it possible to materialize abstract types.\n        JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            /* important: introspect actual implementation (abstract class or\n             * interface doesn't have constructors, for one)\n             */\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    // Otherwise, may want to check handlers for standard types, from superclass:\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser != null) {\n        return deser;\n    }\n\n    // Otherwise: could the class be a Bean class? If not, bail out\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n\n    // Security check for disallowed types\n    if (isDisallowedType(type.getRawClass())) {\n        throw new JsonMappingException(ctxt.getParser(), \"Illegal type to deserialize: \" + type.getRawClass().getName() + \"; prevented for security reasons\");\n    }\n\n    // For checks like [databind#1599]\n    // Use generic bean introspection to build deserializer\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}\n\nprivate boolean isDisallowedType(Class<?> rawClass) {\n    // Example check, this should include actual checks for security\n    String className = rawClass.getName();\n    return \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\".equals(className);\n}\n"
                ]
            ]
        }
    }
}