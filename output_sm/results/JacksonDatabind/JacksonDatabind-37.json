{
    "JacksonDatabind-37": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n// ... and while we are at it, not array types either\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // Should we check that there is a sub-class relationship?\n    // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n    //    placeholder values, so no.\n    /*\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    */\n    // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n      public void testSimple() throws Exception {\n\n          final ObjectMapper mapper = new ObjectMapper();\n\n          final String json = aposToQuotes(\"{'schemas': [{\\n\"\n\n              + \"  'name': 'FoodMart'\\n\"\n\n              + \"}]}\\n\");\n\n          mapper.readValue(json, JsonRoot.class);\n\n      }\n\n```\n#Error message: com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"name\" (class com.fasterxml.jackson.databind.objectid.Objecid1083Test$JsonMapSchema), not marked as ignorable (0 known properties: ])\n  \"name\": \"FoodMart\"\n}]}\n; line: 3, column: 2] (through reference chain: com.fasterxml.jackson.databind.objectid.JsonRoot[\"schemas\"]->java.util.ArrayList[0]->com.fasterxml.jackson.databind.objectid.JsonMapSchema[\"name\"])\n\tat com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:62)  UnrecognizedPropertyException e = new UnrecognizedPropertyException(p, msg,                p.getCurrentLocation(), ref, propertyName, propertyIds);\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(DeserializationContext.java:855)  throw UnrecognizedPropertyException.from(_parser,                instanceOrClass, fieldName, propIds);\n\tat com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1083)  ctxt.reportUnknownProperty(instanceOrClass, propName, this);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1389)  super.handleUnknownProperty(p, ctxt, beanOrClass, propName);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1367)  handleUnknownProperty(p, ctxt, bean, propName);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:266)  handleUnknownVanilla(p, ctxt, bean, propName);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:163)  return vanillaDeserialize(p, ctxt, t);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:135)  return _deserializeOther(p, ctxt, p.getCurrentToken());\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:136)  return deser.deserialize(p, ctxt);\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:99)  return _deserializeTypedUsingDefaultImpl(p, ctxt, tb);\n\tat com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:142)  return typeDeserializer.deserializeTypedFromObject(p, ctxt);\n\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:279)  value = valueDes.deserializeWithType(p, ctxt, typeDeser);\n\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:249)  return deserialize(p, ctxt, (Collection<Object>) _valueInstantiator.createUsingDefault(ctxt));\n\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:26)  @JacksonStdImpl\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:490)  return _valueDeserializer.deserialize(p, ctxt);\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:101)  Object value = deserialize(p, ctxt);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:260)  prop.deserializeAndSet(p, ctxt, bean);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:125)  return vanillaDeserialize(p, ctxt, p.nextToken());\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3788)  result = deser.deserialize(jp, ctxt);\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2779)  return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueType));\n\tat com.fasterxml.jackson.databind.objectid.Objecid1083Test.testSimple(Objecid1083Test.java:43)  mapper.readValue(json, JsonRoot.class);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    return new SimpleType(subclass, _bindings, null, null,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \"\n                + _class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (_class.isArray()) {\n        if (subclass.isArray()) {\n            Class<?> componentType = _class.getComponentType();\n            Class<?> subclassComponentType = subclass.getComponentType();\n            JavaType narrowedComponent = _narrow(componentType, subclassComponentType);\n            return new ArrayType(subclass, narrowedComponent, _valueHandler, _typeHandler, _asStatic);\n        }\n        throw new IllegalArgumentException(\"Cannot narrow array type \" + _class.getName() + \" to non-array type \" + subclass.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n}\n\nprotected JavaType _narrow(Class<?> componentType, Class<?> subclassComponentType) {\n    if (componentType == subclassComponentType) {\n        return this;\n    }\n    return new SimpleType(subclassComponentType, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \"\n                + _class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \" + _class.getName());\n    }\n    return new SimpleType(subclass, _bindings, null, null, _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \"\n                + _class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "2": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) and relevant context to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n// ... and while we are at it, not array types either\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // Should we check that there is a sub-class relationship?\n    // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n    //    placeholder values, so no.\n    /*\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    */\n    // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n      public void testSimple() throws Exception {\n\n          final ObjectMapper mapper = new ObjectMapper();\n\n          final String json = aposToQuotes(\"{'schemas': [{\\n\"\n\n              + \"  'name': 'FoodMart'\\n\"\n\n              + \"}]}\\n\");\n\n          mapper.readValue(json, JsonRoot.class);\n\n      }\n\n```\n#Error message: com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"name\" (class com.fasterxml.jackson.databind.objectid.Objecid1083Test$JsonMapSchema), not marked as ignorable (0 known properties: ])\n  \"name\": \"FoodMart\"\n}]}\n; line: 3, column: 2] (through reference chain: com.fasterxml.jackson.databind.objectid.JsonRoot[\"schemas\"]->java.util.ArrayList[0]->com.fasterxml.jackson.databind.objectid.JsonMapSchema[\"name\"])\n\tat com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:62)  UnrecognizedPropertyException e = new UnrecognizedPropertyException(p, msg,                p.getCurrentLocation(), ref, propertyName, propertyIds);\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(DeserializationContext.java:855)  throw UnrecognizedPropertyException.from(_parser,                instanceOrClass, fieldName, propIds);\n\tat com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1083)  ctxt.reportUnknownProperty(instanceOrClass, propName, this);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1389)  super.handleUnknownProperty(p, ctxt, beanOrClass, propName);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1367)  handleUnknownProperty(p, ctxt, bean, propName);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:266)  handleUnknownVanilla(p, ctxt, bean, propName);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:163)  return vanillaDeserialize(p, ctxt, t);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:135)  return _deserializeOther(p, ctxt, p.getCurrentToken());\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:136)  return deser.deserialize(p, ctxt);\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:99)  return _deserializeTypedUsingDefaultImpl(p, ctxt, tb);\n\tat com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:142)  return typeDeserializer.deserializeTypedFromObject(p, ctxt);\n\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:279)  value = valueDes.deserializeWithType(p, ctxt, typeDeser);\n\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:249)  return deserialize(p, ctxt, (Collection<Object>) _valueInstantiator.createUsingDefault(ctxt));\n\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:26)  @JacksonStdImpl\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:490)  return _valueDeserializer.deserialize(p, ctxt);\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:101)  Object value = deserialize(p, ctxt);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:260)  prop.deserializeAndSet(p, ctxt, bean);\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:125)  return vanillaDeserialize(p, ctxt, p.nextToken());\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3788)  result = deser.deserialize(jp, ctxt);\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2779)  return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueType));\n\tat com.fasterxml.jackson.databind.objectid.Objecid1083Test.testSimple(Objecid1083Test.java:43)  mapper.readValue(json, JsonRoot.class);\n\n\n## \ud83d\udca1 Context from Project\n\n            \n```java\n@Override protected JavaType _narrow(Class<?> subclass) { return new MapType(subclass, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic); }\n```\n\n            \n```java\n@Override protected JavaType _narrow(Class<?> subclass) { return new MapLikeType(subclass, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic); }\n```\n\n            \n```java\n@Override protected JavaType _narrow(Class<?> subclass) { return new CollectionLikeType(subclass, _bindings, _superClass, _superInterfaces, _elementType, _valueHandler, _typeHandler, _asStatic); }\n```\n\n            \n```java\n@Override protected JavaType _narrow(Class<?> subclass) { return new ReferenceType(subclass, _bindings, _superClass, _superInterfaces, _referencedType, _valueHandler, _typeHandler, _asStatic); }\n```\n\n            \n```java\n@Override public MapType withKeyTypeHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withTypeHandler(h), _valueType, _valueHandler, _typeHandler, _asStatic); }\n```\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\n@Override\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \"\n                + _class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    \n    if (_class.isArray()) {\n        return new ArrayType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n    }\n    \n    // Resolve based on type\n    if (Map.class.isAssignableFrom(subclass)) {\n        return new MapType(subclass, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic);\n    }\n    if (Collection.class.isAssignableFrom(subclass)) {\n        return new CollectionLikeType(subclass, _bindings, _superClass, _superInterfaces, _elementType, _valueHandler, _typeHandler, _asStatic);\n    }\n    if (_class.getName().equals(\"java.util.Map\")) {\n        return new MapType(subclass, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic);\n    }\n    if (_class.getName().equals(\"java.util.Collection\")) {\n        return new CollectionLikeType(subclass, _bindings, _superClass, _superInterfaces, _elementType, _valueHandler, _typeHandler, _asStatic);\n    }\n    \n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \" + _class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \" + _class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass.narrowBy(subclass), _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\n@Override\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    if (Map.class.isAssignableFrom(subclass)) {\n        return new MapType(subclass, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic);\n    }\n    if (Collection.class.isAssignableFrom(subclass)) {\n        return new CollectionLikeType(subclass, _bindings, _superClass, _superInterfaces, _elementType, _valueHandler, _typeHandler, _asStatic);\n    }\n    if (Reference.class.isAssignableFrom(subclass)) {\n        return new ReferenceType(subclass, _bindings, _superClass, _superInterfaces, _referencedType, _valueHandler, _typeHandler, _asStatic);\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    \n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    \n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!subclass.isAssignableFrom(_class)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \"\n                + _class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n\n    // Check that the subclass is indeed a subclass or the same class\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \" + _class.getName());\n    }\n\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\n@Override\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \" + _class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n}\n"
                ],
                [
                    "\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "iteration_done": true
    }
}