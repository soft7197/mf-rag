{
    "Compress-39": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Returns a \"sanitized\" version of the string given as arguments,\n* where sanitized means non-printable characters have been\n* replaced with a question mark and the outcome is not longer\n* than 255 chars.\n*\n* <p>This method is used to clean up file names when they are\n* used in exception messages as they may end up in log files or\n* as console output and may have been read from a corrupted\n* input.</p>\n*\n* @param s the string to sanitize\n* @return a sanitized version of the argument\n* @since Compress 1.12\n*/\npublic static String sanitize(String s) {\n        final char[] chars = s.toCharArray();\n        final int len = chars.length;\n        final StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            final char c = chars[i];\n            if (!Character.isISOControl(c)) {\n                Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n                if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                    sb.append(c);\n                    continue;\n                }\n            }\n            sb.append('?');\n        }\n        return sb.toString();\n    }\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void sanitizeShortensString() {\n\n        String input = \"012345678901234567890123456789012345678901234567890123456789\"\n\n            + \"012345678901234567890123456789012345678901234567890123456789\"\n\n            + \"012345678901234567890123456789012345678901234567890123456789\"\n\n            + \"012345678901234567890123456789012345678901234567890123456789\"\n\n            + \"012345678901234567890123456789012345678901234567890123456789\";\n\n        String expected = \"012345678901234567890123456789012345678901234567890123456789\"\n\n            + \"012345678901234567890123456789012345678901234567890123456789\"\n\n            + \"012345678901234567890123456789012345678901234567890123456789\"\n\n            + \"012345678901234567890123456789012345678901234567890123456789\"\n\n            + \"012345678901...\";\n\n        assertEquals(expected, ArchiveUtils.sanitize(input));\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: expected:<...23456789012345678901[...]> but was:<...23456789012345678901[234567890123456789012345678901234567890123456789]>\n\tat org.apache.commons.compress.ArchiveUtilsTest.sanitizeShortensString(ArchiveUtilsTest.java:82)  assertEquals(expected, ArchiveUtils.sanitize(input));\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        if (sb.length() >= 255) {\n            sb.append(\"...\");\n            break;\n        }\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    return sb.toString();\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String sanitized = sb.toString();\n    if (sanitized.length() > 255) {\n        sanitized = sanitized.substring(0, 252) + \"...\";\n    }\n    return sanitized;\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n        final char[] chars = s.toCharArray();\n        final int len = chars.length;\n        final StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            final char c = chars[i];\n            if (!Character.isISOControl(c)) {\n                Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n                if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                    sb.append(c);\n                    continue;\n                }\n            }\n            sb.append('?');\n        }\n        if (sb.length() > 255) {\n            return sb.substring(0, 252) + \"...\";\n        }\n        return sb.toString();\n    }\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        if (sb.length() >= 255) {\n            sb.append(\"...\");\n            break;\n        }\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    return sb.toString();\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    if (sb.length() > 255) {\n        return sb.substring(0, 252) + \"...\";\n    }\n    return sb.toString();\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String result = sb.toString();\n    if (result.length() > 255) {\n        return result.substring(0, 252) + \"...\";\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String sanitized = sb.toString();\n    if (sanitized.length() > 255) {\n        return sanitized.substring(0, 252) + \"...\";\n    }\n    return sanitized;\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String sanitized = sb.toString();\n    if (sanitized.length() > 255) {\n        sanitized = sanitized.substring(0, 252) + \"...\";\n    }\n    return sanitized;\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String sanitized = sb.toString();\n    if (sanitized.length() > 255) {\n        return sanitized.substring(0, 252) + \"...\";\n    }\n    return sanitized;\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n        final char[] chars = s.toCharArray();\n        final int len = chars.length;\n        final StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            final char c = chars[i];\n            if (!Character.isISOControl(c)) {\n                Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n                if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                    sb.append(c);\n                    continue;\n                }\n            }\n            sb.append('?');\n        }\n        String sanitized = sb.toString();\n        if (sanitized.length() > 255) {\n            return sanitized.substring(0, 252) + \"...\";\n        }\n        return sanitized;\n    }\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String sanitized = sb.toString();\n    if (sanitized.length() > 255) {\n        sanitized = sanitized.substring(0, 252) + \"...\";\n    }\n    return sanitized;\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n        final char[] chars = s.toCharArray();\n        final int len = chars.length;\n        final StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            final char c = chars[i];\n            if (!Character.isISOControl(c)) {\n                Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n                if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                    sb.append(c);\n                    continue;\n                }\n            }\n            sb.append('?');\n        }\n        if (sb.length() > 255) {\n            return sb.substring(0, 252) + \"...\";\n        }\n        return sb.toString();\n    }\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    if (sb.length() > 255) {\n        return sb.substring(0, 252) + \"...\";\n    }\n    return sb.toString();\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String result = sb.toString();\n    if (result.length() > 255) {\n        return result.substring(0, 252) + \"...\";\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String sanitized = sb.toString();\n    if (sanitized.length() > 255) {\n        return sanitized.substring(0, 252) + \"...\";\n    }\n    return sanitized;\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String sanitized = sb.toString();\n    if (sanitized.length() > 255) {\n        sanitized = sanitized.substring(0, 252) + \"...\";\n    }\n    return sanitized;\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String sanitized = sb.toString();\n    if (sanitized.length() > 255) {\n        return sanitized.substring(0, 252) + \"...\";\n    }\n    return sanitized;\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n        final char[] chars = s.toCharArray();\n        final int len = chars.length;\n        final StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            final char c = chars[i];\n            if (!Character.isISOControl(c)) {\n                Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n                if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                    sb.append(c);\n                    continue;\n                }\n            }\n            sb.append('?');\n        }\n        String sanitized = sb.toString();\n        if (sanitized.length() > 255) {\n            return sanitized.substring(0, 252) + \"...\";\n        }\n        return sanitized;\n    }\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String sanitized = sb.toString();\n    if (sanitized.length() > 255) {\n        sanitized = sanitized.substring(0, 252) + \"...\";\n    }\n    return sanitized;\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n        final char[] chars = s.toCharArray();\n        final int len = chars.length;\n        final StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            final char c = chars[i];\n            if (!Character.isISOControl(c)) {\n                Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n                if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                    sb.append(c);\n                    continue;\n                }\n            }\n            sb.append('?');\n        }\n        if (sb.length() > 255) {\n            return sb.substring(0, 252) + \"...\";\n        }\n        return sb.toString();\n    }\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String result = sb.toString();\n    if (result.length() > 255) {\n        return result.substring(0, 252) + \"...\";\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    String sanitized = sb.toString();\n    if (sanitized.length() > 255) {\n        return sanitized.substring(0, 252) + \"...\";\n    }\n    return sanitized;\n}\n"
                ]
            ]
        }
    }
}