{
    "Compress-21": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n//\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift == 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift > 0) {\n        header.write(cache);\n    }\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testSevenEmptyFiles() throws Exception {\n\n        testCompress252(7, 0);\n\n    }\n\n```\n#Error message: java.io.IOException: Unknown property 128\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(SevenZFile.java:714)  throw new IOException(\"Unknown property \" + propertyType);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(SevenZFile.java:241)  readFilesInfo(header, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(SevenZFile.java:197)  readHeader(nextHeaderInputStream, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:94)  archive = readHeaders(password);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:116)  this(filename, null);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(SevenZOutputFileTest.java:226)  SevenZFile archive = new SevenZFile(output);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(SevenZOutputFileTest.java:221)  verifyCompress252(output, numberOfFiles, numberOfNonEmptyFiles);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSevenEmptyFiles(SevenZOutputFileTest.java:183)  testCompress252(7, 0);\n \n#Test method 2:\n```java\n    public void testEightFilesSomeNotEmpty() throws Exception {\n\n        testCompress252(8, 2);\n\n    }\n\n```\n#Error message: java.io.IOException: Badly terminated header\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(SevenZFile.java:246)  throw new IOException(\"Badly terminated header\");\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(SevenZFile.java:197)  readHeader(nextHeaderInputStream, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:94)  archive = readHeaders(password);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:116)  this(filename, null);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(SevenZOutputFileTest.java:226)  SevenZFile archive = new SevenZFile(output);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(SevenZOutputFileTest.java:221)  verifyCompress252(output, numberOfFiles, numberOfNonEmptyFiles);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testEightFilesSomeNotEmpty(SevenZOutputFileTest.java:195)  testCompress252(8, 2);\n \n#Test method 3:\n```java\n    public void testSixEmptyFiles() throws Exception {\n\n        testCompress252(6, 0);\n\n    }\n\n```\n#Error message: java.io.IOException: Badly terminated header\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(SevenZFile.java:246)  throw new IOException(\"Badly terminated header\");\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(SevenZFile.java:197)  readHeader(nextHeaderInputStream, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:94)  archive = readHeaders(password);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:116)  this(filename, null);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(SevenZOutputFileTest.java:226)  SevenZFile archive = new SevenZFile(output);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(SevenZOutputFileTest.java:221)  verifyCompress252(output, numberOfFiles, numberOfNonEmptyFiles);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSixEmptyFiles(SevenZOutputFileTest.java:175)  testCompress252(6, 0);\n \n#Test method 4:\n```java\n    public void testEightEmptyFiles() throws Exception {\n\n        testCompress252(8, 0);\n\n    }\n\n```\n#Error message: java.io.IOException: Unknown property 192\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(SevenZFile.java:714)  throw new IOException(\"Unknown property \" + propertyType);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(SevenZFile.java:241)  readFilesInfo(header, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(SevenZFile.java:197)  readHeader(nextHeaderInputStream, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:94)  archive = readHeaders(password);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:116)  this(filename, null);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(SevenZOutputFileTest.java:226)  SevenZFile archive = new SevenZFile(output);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(SevenZOutputFileTest.java:221)  verifyCompress252(output, numberOfFiles, numberOfNonEmptyFiles);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testEightEmptyFiles(SevenZOutputFileTest.java:191)  testCompress252(8, 0);\n \n#Test method 5:\n```java\n    public void testNineEmptyFiles() throws Exception {\n\n        testCompress252(9, 0);\n\n    }\n\n```\n#Error message: java.lang.ArrayIndexOutOfBoundsException: 0\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(SevenZFile.java:728)  files[i].setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(SevenZFile.java:241)  readFilesInfo(header, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(SevenZFile.java:197)  readHeader(nextHeaderInputStream, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:94)  archive = readHeaders(password);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:116)  this(filename, null);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(SevenZOutputFileTest.java:226)  SevenZFile archive = new SevenZFile(output);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(SevenZOutputFileTest.java:221)  verifyCompress252(output, numberOfFiles, numberOfNonEmptyFiles);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testNineEmptyFiles(SevenZOutputFileTest.java:199)  testCompress252(9, 0);\n \n#Test method 6:\n```java\n    public void testSixFilesSomeNotEmpty() throws Exception {\n\n        testCompress252(6, 2);\n\n    }\n\n```\n#Error message: java.io.IOException: Badly terminated header\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(SevenZFile.java:246)  throw new IOException(\"Badly terminated header\");\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(SevenZFile.java:197)  readHeader(nextHeaderInputStream, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:94)  archive = readHeaders(password);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:116)  this(filename, null);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(SevenZOutputFileTest.java:226)  SevenZFile archive = new SevenZFile(output);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(SevenZOutputFileTest.java:221)  verifyCompress252(output, numberOfFiles, numberOfNonEmptyFiles);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSixFilesSomeNotEmpty(SevenZOutputFileTest.java:179)  testCompress252(6, 2);\n \n#Test method 7:\n```java\n    public void testNineFilesSomeNotEmpty() throws Exception {\n\n        testCompress252(9, 2);\n\n    }\n\n```\n#Error message: java.io.IOException: Unknown property 128\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(SevenZFile.java:714)  throw new IOException(\"Unknown property \" + propertyType);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(SevenZFile.java:241)  readFilesInfo(header, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(SevenZFile.java:197)  readHeader(nextHeaderInputStream, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:94)  archive = readHeaders(password);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:116)  this(filename, null);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(SevenZOutputFileTest.java:226)  SevenZFile archive = new SevenZFile(output);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(SevenZOutputFileTest.java:221)  verifyCompress252(output, numberOfFiles, numberOfNonEmptyFiles);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testNineFilesSomeNotEmpty(SevenZOutputFileTest.java:203)  testCompress252(9, 2);\n \n#Test method 8:\n```java\n    public void testSevenFilesSomeNotEmpty() throws Exception {\n\n        testCompress252(7, 2);\n\n    }\n\n```\n#Error message: java.io.IOException: Unknown property 128\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(SevenZFile.java:714)  throw new IOException(\"Unknown property \" + propertyType);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(SevenZFile.java:241)  readFilesInfo(header, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(SevenZFile.java:197)  readHeader(nextHeaderInputStream, archive);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:94)  archive = readHeaders(password);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:116)  this(filename, null);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(SevenZOutputFileTest.java:226)  SevenZFile archive = new SevenZFile(output);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(SevenZOutputFileTest.java:221)  verifyCompress252(output, numberOfFiles, numberOfNonEmptyFiles);\n\tat org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSevenFilesSomeNotEmpty(SevenZOutputFileTest.java:187)  testCompress252(7, 2);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift < 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift < 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift < 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift != 7) { // Ensure we write remaining bits if any\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (shift != 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift < 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (shift != 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift != 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift != 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift < 7) {\n        header.write(cache);\n    }\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift < 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift < 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift < 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift != 7) { // Ensure we write remaining bits if any\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (shift != 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift < 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (shift != 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift != 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift != 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift < 7) {\n        header.write(cache);\n    }\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift < 7) {\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift != 7) { // Ensure we write remaining bits if any\n        header.write(cache);\n    }\n}\n"
                ],
                [
                    "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (shift != 7) {\n        header.write(cache);\n    }\n}\n"
                ]
            ]
        }
    }
}