{
    "Cli-17": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* <p>Breaks <code>token</code> into its constituent parts\n* using the following algorithm.\n* <ul>\n*  <li>ignore the first character (\"<b>-</b>\")</li>\n*  <li>foreach remaining character check if an {@link Option}\n*  exists with that id.</li>\n*  <li>if an {@link Option} does exist then add that character\n*  prepended with \"<b>-</b>\" to the list of processed tokens.</li>\n*  <li>if the {@link Option} can have an argument value and there\n*  are remaining characters in the token then add the remaining\n*  characters as a token to the list of processed tokens.</li>\n*  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n*  <code>stopAtNonOption</code> <b>IS</b> set then add the special token\n*  \"<b>--</b>\" followed by the remaining characters and also\n*  the remaining tokens directly to the processed tokens list.</li>\n*  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n*  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that\n*  character prepended with \"<b>-</b>\".</li>\n* </ul>\n* </p>\n*\n* @param token The current token to be <b>burst</b>\n* @param stopAtNonOption Specifies whether to stop processing\n* at the first non-Option encountered.\n*/\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            process(token.substring(i));\n        }\n        else\n        {\n            tokens.add(token);\n            break;\n        }\n    }\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testStopBursting() throws Exception\n\n    {\n\n        String[] args = new String[] { \"-azc\" };\n\n\n\n        CommandLine cl = parser.parse(options, args, true);\n\n        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n\n        assertFalse( \"Confirm -c is not set\", cl.hasOption(\"c\") );\n\n\n\n        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n\n        assertTrue(cl.getArgList().contains(\"zc\"));\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: Confirm  1 extra arg: 2\n\tat org.apache.commons.cli.PosixParserTest.testStopBursting(PosixParserTest.java:141)  assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\" + token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(token.substring(i));\n            break;\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\" + token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                tokens.add(\"--\");\n                tokens.add(token.substring(i));\n                break;\n            }\n            else\n            {\n                tokens.add(\"-\" + ch);\n            }\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "2": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) and relevant context to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* <p>Breaks <code>token</code> into its constituent parts\n* using the following algorithm.\n* <ul>\n*  <li>ignore the first character (\"<b>-</b>\")</li>\n*  <li>foreach remaining character check if an {@link Option}\n*  exists with that id.</li>\n*  <li>if an {@link Option} does exist then add that character\n*  prepended with \"<b>-</b>\" to the list of processed tokens.</li>\n*  <li>if the {@link Option} can have an argument value and there\n*  are remaining characters in the token then add the remaining\n*  characters as a token to the list of processed tokens.</li>\n*  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n*  <code>stopAtNonOption</code> <b>IS</b> set then add the special token\n*  \"<b>--</b>\" followed by the remaining characters and also\n*  the remaining tokens directly to the processed tokens list.</li>\n*  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n*  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that\n*  character prepended with \"<b>-</b>\".</li>\n* </ul>\n* </p>\n*\n* @param token The current token to be <b>burst</b>\n* @param stopAtNonOption Specifies whether to stop processing\n* at the first non-Option encountered.\n*/\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            process(token.substring(i));\n        }\n        else\n        {\n            tokens.add(token);\n            break;\n        }\n    }\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testStopBursting() throws Exception\n\n    {\n\n        String[] args = new String[] { \"-azc\" };\n\n\n\n        CommandLine cl = parser.parse(options, args, true);\n\n        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n\n        assertFalse( \"Confirm -c is not set\", cl.hasOption(\"c\") );\n\n\n\n        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n\n        assertTrue(cl.getArgList().contains(\"zc\"));\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: Confirm  1 extra arg: 2\n\tat org.apache.commons.cli.PosixParserTest.testStopBursting(PosixParserTest.java:141)  assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n\n\n## \ud83d\udca1 Context from Project\n\n            \n```java\nstatic void validateOption(String opt) throws IllegalArgumentException { if (opt == null) { return; } else if (opt.length() == 1) { char ch = opt.charAt(0); if (!isValidOpt(ch)) { throw new IllegalArgumentException(\\\"illegal option value '\\\" + ch + \\\"'\\\"); } } else { char[] chars = opt.toCharArray(); for (int i = 0; i < chars.length; i++) { if (!isValidChar(chars[i])) { throw new IllegalArgumentException(\\\"opt contains illegal character value '\\\" + chars[i] + \\\"'\\\"); } } } }\n```\n\n            \n```java\npublic String toString() { StringBuffer buff = new StringBuffer(); Iterator iter = getOptions().iterator(); buff.append(\\\"[\\\"); while (iter.hasNext()) { Option option = (Option) iter.next(); if (option.getOpt() != null) { buff.append(\\\"-\\\"); buff.append(option.getOpt()); } else { buff.append(\\\"--\\\"); buff.append(option.getLongOpt()); } buff.append(\\\" \\\"); buff.append(option.getDescription()); if (iter.hasNext()) { buff.append(\\\", \\\"); } } buff.append(\\\"]\\\"); return buff.toString(); }\n```\n\n            \n```java\npublic void test31148() throws ParseException { Option multiArgOption = new Option(\\\"o\\\", \\\"option with multiple args\\\"); multiArgOption.setArgs(1); Options options = new Options(); options.addOption(multiArgOption); Parser parser = new PosixParser(); String[] args = new String[] {}; Properties props = new Properties(); props.setProperty(\\\"o\\\", \\\"ovalue\\\"); CommandLine cl = parser.parse(options, args, props); assertTrue(cl.hasOption('o')); assertEquals(\\\"ovalue\\\", cl.getOptionValue('o')); }\n```\n\n            \n```java\npublic void test21215() { Options options = new Options(); HelpFormatter formatter = new HelpFormatter(); String SEP = System.getProperty(\\\"line.separator\\\"); String header = SEP + \\\"Header\\\"; String footer = \\\"Footer\\\"; StringWriter out = new StringWriter(); formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", header, options, 2, 2, footer, true); assertEquals(\\\"usage: foobar\\\" + SEP + \\\"\\\" + SEP + \\\"Header\\\" + SEP + \\\"\\\" + SEP + \\\"Footer\\\" + SEP, out.toString()); }\n```\n\n            \n```java\npublic void testShortOptionalArgValues() throws Exception { String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" }; Parser parser = new PosixParser(); CommandLine cmd = parser.parse(opts, args); assertTrue(cmd.hasOption(\\\"j\\\")); assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"j\\\")); assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"j\\\")[0]); assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"j\\\")[1]); assertEquals(cmd.getArgs().length, 0); }\n```\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                tokens.add(\"--\");\n                tokens.add(token.substring(i));\n                break;\n            }\n            else\n            {\n                tokens.add(\"-\" + ch);\n            }\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(token);\n            break;\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                tokens.add(\"--\");\n                process(token.substring(i));\n            }\n            else\n            {\n                tokens.add(\"-\" + token.substring(i));\n            }\n            break;\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                tokens.add(\"--\");\n                tokens.add(token.substring(i));\n            }\n            else\n            {\n                tokens.add(\"-\" + ch);\n            }\n            break;\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                process(token.substring(i));\n            }\n            else\n            {\n                tokens.add(\"-\" + token.substring(i));\n            }\n            break;\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                tokens.add(\"--\");\n                tokens.add(token.substring(i)); \n            }\n            else\n            {\n                tokens.add(token);\n            }\n            break;\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                tokens.add(\"--\");\n                tokens.add(token.substring(i));\n                break;\n            }\n            else\n            {\n                tokens.add(\"-\" + ch);\n            }\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    boolean foundOption = false;\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n            foundOption = true;\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            process(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(\"-\" + ch);\n        }\n    }\n\n    if (!foundOption && stopAtNonOption)\n    {\n        tokens.add(\"--\" + token.substring(1));\n    }\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(token);\n            break;\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                tokens.add(\"--\");\n                tokens.add(token.substring(i)); \n            }\n            else\n            {\n                tokens.add(token);\n            }\n            break;\n        }\n    }\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokens.add(token);\n            break;\n        }\n    }\n}\n"
                ],
                [
                    "\nprotected void burstToken(String token, boolean stopAtNonOption)\n{\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (token.length() != (i + 1)))\n            {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                tokens.add(\"--\");\n                tokens.add(token.substring(i)); \n            }\n            else\n            {\n                tokens.add(token);\n            }\n            break;\n        }\n    }\n}\n"
                ]
            ]
        }
    }
}