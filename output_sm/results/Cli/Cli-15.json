{
    "Cli-15": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Creates a new WriteableCommandLineImpl rooted on the specified Option, to\n* hold the parsed arguments.\n*\n* @param rootOption the CommandLine's root Option\n* @param arguments the arguments this CommandLine represents\n*/\npublic List getValues(final Option option,\n                      List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // augment the list with the default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n            // if there are more default values as specified, add them to\n            // the list.\n                // copy the list first\n    \n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testSingleOptionSingleArgument() throws Exception {\n\n        Parser parser = createDefaultValueParser(new String[]{\"100\", \"1000\"});\n\n        String enteredValue1 = \"1\";\n\n        String[] args = new String[]{\"-b\", enteredValue1};\n\n        CommandLine cl = parser.parse(args);\n\n        CommandLine cmd = cl;\n\n        assertNotNull(cmd);\n\n        List b = cmd.getValues(\"-b\");\n\n        assertEquals(\"[\" + enteredValue1 + \", 1000]\", b + \"\");\n\n    }\n\n```\n#Error message: junit.framework.ComparisonFailure: expected:<[1[, 1000]]> but was:<[1[]]>\n\tat org.apache.commons.cli2.bug.BugCLI158Test.testSingleOptionSingleArgument(BugCLI158Test.java:70)  assertEquals(\"[\" + enteredValue1 + \", 1000]\", b + \"\");\n \n#Test method 2:\n```java\n    public void testSingleOptionMaximumNumberOfArgument() throws Exception {\n\n        String[] args = new String[]{\"-b\", \"1\", \"2\"};\n\n        final ArgumentBuilder abuilder = new ArgumentBuilder();\n\n        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n\n        final GroupBuilder gbuilder = new GroupBuilder();\n\n\n\n        DefaultOption bOption = obuilder.withShortName(\"b\")\n\n                .withLongName(\"b\")\n\n                .withArgument(abuilder.withName(\"b\")\n\n                        .withMinimum(2)\n\n                        .withMaximum(4)\n\n                        .withDefault(\"100\")\n\n                        .withDefault(\"1000\")\n\n                        .withDefault(\"10000\")\n\n                        .create())\n\n                .create();\n\n\n\n        Group options = gbuilder\n\n                .withName(\"options\")\n\n                .withOption(bOption)\n\n                .create();\n\n\n\n        Parser parser = new Parser();\n\n        parser.setHelpTrigger(\"--help\");\n\n        parser.setGroup(options);\n\n        CommandLine cl = parser.parse(args);\n\n        CommandLine cmd = cl;\n\n        assertNotNull(cmd);\n\n        List b = cmd.getValues(\"-b\");\n\n        assertEquals(\"[1, 2, 10000]\", b + \"\");\n\n    }\n\n```\n#Error message: junit.framework.ComparisonFailure: expected:<[1, 2[, 10000]]> but was:<[1, 2[]]>\n\tat org.apache.commons.cli2.bug.BugCLI158Test.testSingleOptionMaximumNumberOfArgument(BugCLI158Test.java:112)  assertEquals(\"[1, 2, 10000]\", b + \"\");\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // augment the list with the default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        List optionDefaultValues = (List) this.defaultValues.get(option);\n        if (optionDefaultValues != null) {\n            valueList = new ArrayList(valueList);\n            valueList.addAll(optionDefaultValues);\n        }\n    }\n\n    // if there are more default values as specified, add them to\n    // the list.\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if there are no values, use default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = new ArrayList(defaultValues);\n    } else {\n        // augment the list with the default values\n        List optionDefaults = (List) this.defaultValues.get(option);\n        if (optionDefaults != null) {\n            for (Object defaultValue : optionDefaults) {\n                if (!valueList.contains(defaultValue)) {\n                    valueList.add(defaultValue);\n                }\n            }\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // create a new list to avoid modifying the original defaultValues\n    List resultList = new ArrayList();\n\n    if (valueList != null) {\n        resultList.addAll(valueList);\n    }\n\n    // augment the list with the default values\n    if (resultList.isEmpty()) {\n        resultList.addAll(defaultValues);\n    }\n\n    if (resultList.isEmpty()) {\n        List optionDefaultValues = (List) this.defaultValues.get(option);\n        if (optionDefaultValues != null) {\n            resultList.addAll(optionDefaultValues);\n        }\n    }\n\n    return resultList.isEmpty() ? Collections.EMPTY_LIST : resultList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if there are more default values as specified, add them to the list.\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = new ArrayList(defaultValues);\n    }\n\n    // augment the list with the default values\n    List optionDefaultValues = (List) this.defaultValues.get(option);\n    if (optionDefaultValues != null && !optionDefaultValues.isEmpty()) {\n        for (Object defaultValue : optionDefaultValues) {\n            if (!valueList.contains(defaultValue)) {\n                valueList.add(defaultValue);\n            }\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option,\n                      List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // copy the list first\n    if (valueList == null) {\n        valueList = new ArrayList();\n    } else {\n        valueList = new ArrayList(valueList);\n    }\n\n    // augment the list with the default values\n    if (valueList.isEmpty()) {\n        List optionDefaultValues = (List) this.defaultValues.get(option);\n        if (optionDefaultValues != null) {\n            valueList.addAll(optionDefaultValues);\n        }\n    }\n\n    // if there are more default values as specified, add them to\n    // the list.\n    if (defaultValues != null) {\n        for (Object defaultValue : defaultValues) {\n            if (!valueList.contains(defaultValue)) {\n                valueList.add(defaultValue);\n            }\n        }\n    }\n    \n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) new ArrayList(values.get(option));\n\n    // augment the list with the default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = new ArrayList(defaultValues);\n    } else {\n        valueList.addAll(defaultValues);\n    }\n\n    // if there are more default values as specified, add them to the list.\n    List additionalDefaults = (List) this.defaultValues.get(option);\n    if (additionalDefaults != null) {\n        valueList.addAll(additionalDefaults);\n    }\n\n    // copy the list first\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option,\n                      List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues != null ? new ArrayList(defaultValues) : null;\n    }\n\n    // augment the list with the default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        List optionDefaults = (List) this.defaultValues.get(option);\n        if (optionDefaults != null) {\n            if (valueList == null) {\n                valueList = new ArrayList(optionDefaults);\n            } else {\n                valueList.addAll(optionDefaults);\n            }\n        }\n    }\n    \n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if no values exist for the option, use default values\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = new ArrayList(defaultValues);\n    } else {\n        // if there are more default values specified, add them to the list\n        List optionDefaultValues = (List) this.defaultValues.get(option);\n        if (optionDefaultValues != null) {\n            for (Object defaultValue : optionDefaultValues) {\n                if (!valueList.contains(defaultValue)) {\n                    valueList.add(defaultValue);\n                }\n            }\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option,\n                      List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if (valueList == null) {\n        valueList = new ArrayList();\n    }\n\n    // augment the list with the default values\n    if (valueList.isEmpty()) {\n        List optionDefaultValues = (List) this.defaultValues.get(option);\n        if (optionDefaultValues != null) {\n            valueList.addAll(optionDefaultValues);\n        }\n    }\n\n    // add the provided default values if necessary\n    if (defaultValues != null) {\n        for (Object defaultValue : defaultValues) {\n            if (!valueList.contains(defaultValue)) {\n                valueList.add(defaultValue);\n            }\n        }\n    }\n\n    return valueList.isEmpty() ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option,\n                      List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = new ArrayList(defaultValues);\n    }\n\n    // augment the list with the default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        List optionDefaultValues = (List) this.defaultValues.get(option);\n        if (optionDefaultValues != null) {\n            valueList.addAll(optionDefaultValues);\n        }\n    } else {\n        List optionDefaultValues = (List) this.defaultValues.get(option);\n        if (optionDefaultValues != null) {\n            for (Object defaultValue : optionDefaultValues) {\n                if (!valueList.contains(defaultValue)) {\n                    valueList.add(defaultValue);\n                }\n            }\n        }\n    }\n    \n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "2": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) and relevant context to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Creates a new WriteableCommandLineImpl rooted on the specified Option, to\n* hold the parsed arguments.\n*\n* @param rootOption the CommandLine's root Option\n* @param arguments the arguments this CommandLine represents\n*/\npublic List getValues(final Option option,\n                      List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // augment the list with the default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n            // if there are more default values as specified, add them to\n            // the list.\n                // copy the list first\n    \n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testSingleOptionSingleArgument() throws Exception {\n\n        Parser parser = createDefaultValueParser(new String[]{\"100\", \"1000\"});\n\n        String enteredValue1 = \"1\";\n\n        String[] args = new String[]{\"-b\", enteredValue1};\n\n        CommandLine cl = parser.parse(args);\n\n        CommandLine cmd = cl;\n\n        assertNotNull(cmd);\n\n        List b = cmd.getValues(\"-b\");\n\n        assertEquals(\"[\" + enteredValue1 + \", 1000]\", b + \"\");\n\n    }\n\n```\n#Error message: junit.framework.ComparisonFailure: expected:<[1[, 1000]]> but was:<[1[]]>\n\tat org.apache.commons.cli2.bug.BugCLI158Test.testSingleOptionSingleArgument(BugCLI158Test.java:70)  assertEquals(\"[\" + enteredValue1 + \", 1000]\", b + \"\");\n \n#Test method 2:\n```java\n    public void testSingleOptionMaximumNumberOfArgument() throws Exception {\n\n        String[] args = new String[]{\"-b\", \"1\", \"2\"};\n\n        final ArgumentBuilder abuilder = new ArgumentBuilder();\n\n        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n\n        final GroupBuilder gbuilder = new GroupBuilder();\n\n\n\n        DefaultOption bOption = obuilder.withShortName(\"b\")\n\n                .withLongName(\"b\")\n\n                .withArgument(abuilder.withName(\"b\")\n\n                        .withMinimum(2)\n\n                        .withMaximum(4)\n\n                        .withDefault(\"100\")\n\n                        .withDefault(\"1000\")\n\n                        .withDefault(\"10000\")\n\n                        .create())\n\n                .create();\n\n\n\n        Group options = gbuilder\n\n                .withName(\"options\")\n\n                .withOption(bOption)\n\n                .create();\n\n\n\n        Parser parser = new Parser();\n\n        parser.setHelpTrigger(\"--help\");\n\n        parser.setGroup(options);\n\n        CommandLine cl = parser.parse(args);\n\n        CommandLine cmd = cl;\n\n        assertNotNull(cmd);\n\n        List b = cmd.getValues(\"-b\");\n\n        assertEquals(\"[1, 2, 10000]\", b + \"\");\n\n    }\n\n```\n#Error message: junit.framework.ComparisonFailure: expected:<[1, 2[, 10000]]> but was:<[1, 2[]]>\n\tat org.apache.commons.cli2.bug.BugCLI158Test.testSingleOptionMaximumNumberOfArgument(BugCLI158Test.java:112)  assertEquals(\"[1, 2, 10000]\", b + \"\");\n\n\n## \ud83d\udca1 Context from Project\n\n            \n```java\npublic void processParent(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { final String arg = (String) arguments.next(); if (canProcess(commandLine, arg)) { commandLine.addOption(this); arguments.set(preferredName); } else { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg); } }\n```\n\n            \n```java\npublic Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; }\n```\n\n            \n```java\npublic void testNullDefault() { try { this.argumentBuilder.withDefault(null); fail(\\\"cannot use null default\\\"); } catch (IllegalArgumentException exp) { assertEquals(\\\"wrong exception message\\\", resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT), exp.getMessage()); } }\n```\n\n            \n```java\npublic List getValues(Option option, List defaultValues) { for (final Iterator i = commandLines.iterator(); i.hasNext(); ) { final CommandLine commandLine = (CommandLine) i.next(); final List actual = commandLine.getValues(option); if (actual != null && !actual.isEmpty()) { return actual; } } if (defaultValues == null) { return Collections.EMPTY_LIST; } else { return defaultValues; } }\n```\n\n            \n```java\npublic void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); }\n```\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic List getValues(final Option option,\n                      List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n\n    // augment the list with the default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        return defaultValues == null ? Collections.EMPTY_LIST : new ArrayList(defaultValues);\n    }\n\n    if (defaultValues != null) {\n        List finalList = new ArrayList(valueList);\n        for (Object defaultValue : defaultValues) {\n            if (!finalList.contains(defaultValue)) {\n                finalList.add(defaultValue);\n            }\n        }\n        return finalList;\n    }\n    \n    return valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option,\n                      List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // if there are more default values as specified, add them to\n    // the list.\n    if ((valueList == null || valueList.isEmpty()) && this.defaultValues.containsKey(option)) {\n        valueList = new ArrayList(valueList != null ? valueList : Collections.EMPTY_LIST);\n        List additionalDefaults = (List) this.defaultValues.get(option);\n        if (additionalDefaults != null) {\n            valueList.addAll(additionalDefaults);\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option,\n                      List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if valueList is null, grab the defaultValues or global default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues != null ? new ArrayList(defaultValues) : null;\n    }\n    \n    // if still no values, fall back to the option's default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        List optionDefaultValues = (List) this.defaultValues.get(option);\n        if (optionDefaultValues != null) {\n            if (valueList == null) {\n                valueList = new ArrayList(optionDefaultValues); // create a new list\n            } else {\n                // add the default values from the option\n                valueList.addAll(optionDefaultValues);\n            }\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if valueList is null or empty, initialize it with the defaultValues\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = new ArrayList(defaultValues);\n    }\n\n    List globalDefault = (List) this.defaultValues.get(option);\n    \n    // augment the list with the global default values if needed\n    if (valueList.size() < option.getArgumentLimit() && globalDefault != null) {\n        for (Object defaultValue : globalDefault) {\n            if (valueList.size() < option.getArgumentLimit()) {\n                valueList.add(defaultValue);\n            } else {\n                break;\n            }\n        }\n    }\n    \n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // augment the list with the default values from `this.defaultValues`\n    List optionDefaults = (List) this.defaultValues.get(option);\n\n    if (valueList == null || valueList.isEmpty()) {\n        // use default values if no argument is provided for '-b'\n        valueList = new ArrayList<>(defaultValues != null ? defaultValues : Collections.EMPTY_LIST);\n\n        if (optionDefaults != null && !optionDefaults.isEmpty()) {\n            for (Object defaultValue : optionDefaults) {\n                if (!valueList.contains(defaultValue)) {\n                    valueList.add(defaultValue);\n                }\n            }\n        }\n    } else {\n        // if arguments are provided, augment them with default values\n        if (optionDefaults != null && valueList.size() < ((Argument) option).getMaximum()) {\n            for (Object defaultValue : optionDefaults) {\n                if (valueList.size() >= ((Argument) option).getMaximum()) break;\n                if (!valueList.contains(defaultValue)) {\n                    valueList.add(defaultValue);\n                }\n            }\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // augment the list with the default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues != null ? new ArrayList(defaultValues) : null;\n    }\n\n    if (valueList == null || valueList.isEmpty()) {\n        List optionDefaults = (List) this.defaultValues.get(option);\n        if (optionDefaults != null) {\n            if (valueList == null) {\n                valueList = new ArrayList(optionDefaults);\n            } else {\n                valueList.addAll(optionDefaults);\n            }\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if the valueList is null or empty, initialize it with defaultValues\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = new ArrayList();\n        \n        if (defaultValues != null) {\n            valueList.addAll(defaultValues);\n        }\n\n        // add any default values from the defaultValues map if needed\n        List mapDefaults = (List) this.defaultValues.get(option);\n        if (mapDefaults != null) {\n            for (Object value : mapDefaults) {\n                if (!valueList.contains(value)) {\n                    valueList.add(value);\n                }\n            }\n        }\n    }\n    \n    return valueList.isEmpty() ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if the valueList is null or empty, initialize it with defaultValues\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = defaultValues != null ? new ArrayList(defaultValues) : null;\n    }\n\n    // if the valueList is still null or empty, initialize it with option-specific default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        List optionDefaults = (List) this.defaultValues.get(option);\n        if (optionDefaults != null) {\n            if (valueList == null) {\n                valueList = new ArrayList(optionDefaults);\n            } else {\n                valueList.addAll(optionDefaults);\n            }\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = new ArrayList();\n        if (defaultValues != null) {\n            valueList.addAll(defaultValues);\n        }\n    }\n\n    List optionDefaults = (List) this.defaultValues.get(option);\n    if (optionDefaults != null && !optionDefaults.isEmpty()) {\n        for (Object defaultValue : optionDefaults) {\n            if (!valueList.contains(defaultValue)) {\n                valueList.add(defaultValue);\n            }\n        }\n    }\n\n    return valueList.isEmpty() ? Collections.EMPTY_LIST : valueList;\n}\n"
                ],
                [
                    "\npublic List getValues(final Option option, List defaultValues) {\n    List valueList = (List) values.get(option);\n\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    } else {\n        List optionDefaults = (List) this.defaultValues.get(option);\n        if (optionDefaults != null) {\n            for (Object defaultValue : optionDefaults) {\n                if (!valueList.contains(defaultValue)) {\n                    valueList.add(defaultValue);\n                }\n            }\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n"
                ]
            ]
        },
        "iteration_done": true
    }
}