{
    "Time-5": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Normalizes this period using standard rules, assuming a 12 month year,\n* 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n* providing control over how the result is split into fields.\n* <p>\n* This method allows you to normalize a period.\n* However to achieve this it makes the assumption that all years are\n* 12 months, all weeks are 7 days, all days are 24 hours,\n* all hours are 60 minutes and all minutes are 60 seconds. This is not\n* true when daylight savings time is considered, and may also not be true\n* for some chronologies. However, it is included as it is a useful operation\n* for many applications and business rules.\n* <p>\n* If the period contains years or months, then the months will be\n* normalized to be between 0 and 11. The days field and below will be\n* normalized as necessary, however this will not overflow into the months\n* field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n* But a period of 1 month 40 days will remain as 1 month 40 days.\n* <p>\n* The PeriodType parameter controls how the result is created. It allows\n* you to omit certain fields from the result if desired. For example,\n* you may not want the result to include weeks, in which case you pass\n* in <code>PeriodType.yearMonthDayTime()</code>.\n*\n* @param type  the period type of the new period, null means standard type\n* @return a normalized period equivalent to this period\n* @throws ArithmeticException if any field is too large to be represented\n* @throws UnsupportedOperationException if this period contains non-zero\n*  years or months but the specified period type does not support them\n* @since 1.5\n*/\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testNormalizedStandard_periodType_months1() {\n\n        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n\n        Period result = test.normalizedStandard(PeriodType.months());\n\n        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n\n        assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n\n    }\n\n```\n#Error message: java.lang.UnsupportedOperationException: Field is not supported\n\tat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)  throw new UnsupportedOperationException(\"Field is not supported\");\n\tat org.joda.time.Period.withYears(Period.java:896)  getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n\tat org.joda.time.Period.normalizedStandard(Period.java:1631)  result = result.withYears(years);\n\tat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months1(TestPeriod_Basics.java:1522)  Period result = test.normalizedStandard(PeriodType.months());\n \n#Test method 2:\n```java\n    public void testNormalizedStandard_periodType_months2() {\n\n        Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);\n\n        Period result = test.normalizedStandard(PeriodType.months());\n\n        assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);\n\n        assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n\n    }\n\n```\n#Error message: java.lang.UnsupportedOperationException: Field is not supported\n\tat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)  throw new UnsupportedOperationException(\"Field is not supported\");\n\tat org.joda.time.Period.withYears(Period.java:896)  getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n\tat org.joda.time.Period.normalizedStandard(Period.java:1631)  result = result.withYears(years);\n\tat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months2(TestPeriod_Basics.java:1529)  Period result = test.normalizedStandard(PeriodType.months());\n \n#Test method 3:\n```java\n    public void testNormalizedStandard_periodType_monthsWeeks() {\n\n        PeriodType type = PeriodType.forFields(new DurationFieldType[]{\n\n                        DurationFieldType.months(),\n\n                        DurationFieldType.weeks(),\n\n                        DurationFieldType.days()});\n\n        Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\n\n        Period result = test.normalizedStandard(type);\n\n        assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);\n\n        assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);\n\n    }\n\n```\n#Error message: java.lang.UnsupportedOperationException: Field is not supported\n\tat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)  throw new UnsupportedOperationException(\"Field is not supported\");\n\tat org.joda.time.Period.withYears(Period.java:896)  getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n\tat org.joda.time.Period.normalizedStandard(Period.java:1631)  result = result.withYears(years);\n\tat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks(TestPeriod_Basics.java:1557)  Period result = test.normalizedStandard(type);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (type.isSupported(DurationFieldType.years()) && years != 0) {\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months()) && months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (type.isSupported(DurationFieldType.years())) {\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n        } else if (years != 0) {\n            throw new UnsupportedOperationException(\"Years field is not supported by the specified period type.\");\n        }\n        if (type.isSupported(DurationFieldType.months())) {\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        } else if (months != 0) {\n            throw new UnsupportedOperationException(\"Months field is not supported by the specified period type.\");\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        }\n        if (months != 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        }\n        if (months != 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        }\n        if (months != 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (type.isSupported(DurationFieldType.years()) && years != 0) {\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months()) && months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        }\n        if (months != 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        } else if (years != 0) {\n            throw new UnsupportedOperationException(\"Field 'years' is not supported\");\n        }\n        if (type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        } else if (months != 0) {\n            throw new UnsupportedOperationException(\"Field 'months' is not supported\");\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        }\n        if (months != 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  \n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (type.isSupported(DurationFieldType.years()) && years != 0) {\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months()) && months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "2": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) and relevant context to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Normalizes this period using standard rules, assuming a 12 month year,\n* 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n* providing control over how the result is split into fields.\n* <p>\n* This method allows you to normalize a period.\n* However to achieve this it makes the assumption that all years are\n* 12 months, all weeks are 7 days, all days are 24 hours,\n* all hours are 60 minutes and all minutes are 60 seconds. This is not\n* true when daylight savings time is considered, and may also not be true\n* for some chronologies. However, it is included as it is a useful operation\n* for many applications and business rules.\n* <p>\n* If the period contains years or months, then the months will be\n* normalized to be between 0 and 11. The days field and below will be\n* normalized as necessary, however this will not overflow into the months\n* field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n* But a period of 1 month 40 days will remain as 1 month 40 days.\n* <p>\n* The PeriodType parameter controls how the result is created. It allows\n* you to omit certain fields from the result if desired. For example,\n* you may not want the result to include weeks, in which case you pass\n* in <code>PeriodType.yearMonthDayTime()</code>.\n*\n* @param type  the period type of the new period, null means standard type\n* @return a normalized period equivalent to this period\n* @throws ArithmeticException if any field is too large to be represented\n* @throws UnsupportedOperationException if this period contains non-zero\n*  years or months but the specified period type does not support them\n* @since 1.5\n*/\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testNormalizedStandard_periodType_months1() {\n\n        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n\n        Period result = test.normalizedStandard(PeriodType.months());\n\n        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n\n        assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n\n    }\n\n```\n#Error message: java.lang.UnsupportedOperationException: Field is not supported\n\tat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)  throw new UnsupportedOperationException(\"Field is not supported\");\n\tat org.joda.time.Period.withYears(Period.java:896)  getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n\tat org.joda.time.Period.normalizedStandard(Period.java:1631)  result = result.withYears(years);\n\tat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months1(TestPeriod_Basics.java:1522)  Period result = test.normalizedStandard(PeriodType.months());\n \n#Test method 2:\n```java\n    public void testNormalizedStandard_periodType_months2() {\n\n        Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);\n\n        Period result = test.normalizedStandard(PeriodType.months());\n\n        assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);\n\n        assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n\n    }\n\n```\n#Error message: java.lang.UnsupportedOperationException: Field is not supported\n\tat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)  throw new UnsupportedOperationException(\"Field is not supported\");\n\tat org.joda.time.Period.withYears(Period.java:896)  getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n\tat org.joda.time.Period.normalizedStandard(Period.java:1631)  result = result.withYears(years);\n\tat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months2(TestPeriod_Basics.java:1529)  Period result = test.normalizedStandard(PeriodType.months());\n \n#Test method 3:\n```java\n    public void testNormalizedStandard_periodType_monthsWeeks() {\n\n        PeriodType type = PeriodType.forFields(new DurationFieldType[]{\n\n                        DurationFieldType.months(),\n\n                        DurationFieldType.weeks(),\n\n                        DurationFieldType.days()});\n\n        Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\n\n        Period result = test.normalizedStandard(type);\n\n        assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);\n\n        assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);\n\n    }\n\n```\n#Error message: java.lang.UnsupportedOperationException: Field is not supported\n\tat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)  throw new UnsupportedOperationException(\"Field is not supported\");\n\tat org.joda.time.Period.withYears(Period.java:896)  getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n\tat org.joda.time.Period.normalizedStandard(Period.java:1631)  result = result.withYears(years);\n\tat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks(TestPeriod_Basics.java:1557)  Period result = test.normalizedStandard(type);\n\n\n## \ud83d\udca1 Context from Project\n\n            \n```java\npublic void testMaxYear() { final ISOChronology chrono = ISOChronology.getInstanceUTC(); final int maxYear = chrono.year().getMaximumValue(); DateTime start = new DateTime(maxYear, 1, 1, 0, 0, 0, 0, chrono); DateTime end = new DateTime(maxYear, 12, 31, 23, 59, 59, 999, chrono); assertTrue(start.getMillis() > 0); assertTrue(end.getMillis() > start.getMillis()); assertEquals(maxYear, start.getYear()); assertEquals(maxYear, end.getYear()); long delta = end.getMillis() - start.getMillis(); long expectedDelta = (start.year().isLeap() ? 366L : 365L) * DateTimeConstants.MILLIS_PER_DAY - 1; assertEquals(expectedDelta, delta); assertEquals(start, new DateTime(maxYear + \\\"-01-01T00:00:00.000Z\\\", chrono)); assertEquals(end, new DateTime(maxYear + \\\"-12-31T23:59:59.999Z\\\", chrono)); try { start.plusYears(1); fail(); } catch (IllegalFieldValueException e) { } try { end.plusYears(1); fail(); } catch (IllegalFieldValueException e) { } assertEquals(maxYear + 1, chrono.year().get(Long.MAX_VALUE)); }\n```\n\n            \n```java\n@SuppressWarnings(\\\"unchecked\\\") public int parseInto(DateTimeParserBucket bucket, String text, int position) { Locale locale = bucket.getLocale(); Set<String> validValues = null; int maxLength = 0; synchronized (cParseCache) { Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale); if (innerMap == null) { innerMap = new HashMap<DateTimeFieldType, Object[]>(); cParseCache.put(locale, innerMap); } Object[] array = innerMap.get(iFieldType); if (array == null) { validValues = new HashSet<String>(32); MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC); Property property = dt.property(iFieldType); int min = property.getMinimumValueOverall(); int max = property.getMaximumValueOverall(); if (max - min > 32) { return ~position; } maxLength = property.getMaximumTextLength(locale); for (int i = min; i <= max; i++) { property.set(i); validValues.add(property.getAsShortText(locale)); validValues.add(property.getAsShortText(locale).toLowerCase(locale)); validValues.add(property.getAsShortText(locale).toUpperCase(locale)); validValues.add(property.getAsText(locale)); validValues.add(property.getAsText(locale).toLowerCase(locale)); validValues.add(property.getAsText(locale).toUpperCase(locale)); } if (\\\"en\\\".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) { validValues.add(\\\"BCE\\\"); validValues.add(\\\"bce\\\"); validValues.add(\\\"CE\\\"); validValues.add(\\\"ce\\\"); maxLength = 3; } array = new Object[] { validValues, Integer.valueOf(maxLength) }; innerMap.put(iFieldType, array); } else { validValues = (Set<String>) array[0]; maxLength = ((Integer) array[1]).intValue(); } } int limit = Math.min(text.length(), position + maxLength); for (int i = limit; i > position; i--) { String match = text.substring(position, i); if (validValues.contains(match)) { bucket.saveField(iFieldType, match, locale); return i; } } return ~position; }\n```\n\n            \n```java\npublic void testMinYear() { final ISOChronology chrono = ISOChronology.getInstanceUTC(); final int minYear = chrono.year().getMinimumValue(); DateTime start = new DateTime(minYear, 1, 1, 0, 0, 0, 0, chrono); DateTime end = new DateTime(minYear, 12, 31, 23, 59, 59, 999, chrono); assertTrue(start.getMillis() < 0); assertTrue(end.getMillis() > start.getMillis()); assertEquals(minYear, start.getYear()); assertEquals(minYear, end.getYear()); long delta = end.getMillis() - start.getMillis(); long expectedDelta = (start.year().isLeap() ? 366L : 365L) * DateTimeConstants.MILLIS_PER_DAY - 1; assertEquals(expectedDelta, delta); assertEquals(start, new DateTime(minYear + \\\"-01-01T00:00:00.000Z\\\", chrono)); assertEquals(end, new DateTime(minYear + \\\"-12-31T23:59:59.999Z\\\", chrono)); try { start.minusYears(1); fail(); } catch (IllegalFieldValueException e) { } try { end.minusYears(1); fail(); } catch (IllegalFieldValueException e) { } assertEquals(minYear - 1, chrono.year().get(Long.MIN_VALUE)); }\n```\n\n            \n```java\npublic void testCalendar() { if (TestAll.FAST) { return; } System.out.println(\\\"\\nTestEthiopicChronology.testCalendar\\\"); DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC); long millis = epoch.getMillis(); long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); DateTimeField dayOfWeek = ETHIOPIC_UTC.dayOfWeek(); DateTimeField dayOfYear = ETHIOPIC_UTC.dayOfYear(); DateTimeField dayOfMonth = ETHIOPIC_UTC.dayOfMonth(); DateTimeField monthOfYear = ETHIOPIC_UTC.monthOfYear(); DateTimeField year = ETHIOPIC_UTC.year(); DateTimeField yearOfEra = ETHIOPIC_UTC.yearOfEra(); DateTimeField era = ETHIOPIC_UTC.era(); int expectedDOW = new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); int expectedDOY = 1; int expectedDay = 1; int expectedMonth = 1; int expectedYear = 1; while (millis < end) { int dowValue = dayOfWeek.get(millis); int doyValue = dayOfYear.get(millis); int dayValue = dayOfMonth.get(millis); int monthValue = monthOfYear.get(millis); int yearValue = year.get(millis); int yearOfEraValue = yearOfEra.get(millis); int monthLen = dayOfMonth.getMaximumValue(millis); if (monthValue < 1 || monthValue > 13) { fail(\\\"Bad month: \\\" + millis); } assertEquals(1, era.get(millis)); assertEquals(\\\"EE\\\", era.getAsText(millis)); assertEquals(\\\"EE\\\", era.getAsShortText(millis)); assertEquals(expectedYear, yearValue); assertEquals(expectedYear, yearOfEraValue); assertEquals(expectedMonth, monthValue); assertEquals(expectedDay, dayValue); assertEquals(expectedDOW, dowValue); assertEquals(expectedDOY, doyValue); assertEquals(yearValue % 4 == 3, year.isLeap(millis)); if (monthValue == 13) { assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis)); if (yearValue % 4 == 3) { assertEquals(6, monthLen); } else { assertEquals(5, monthLen); } } else { assertEquals(30, monthLen); } expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; expectedDay++; expectedDOY++; if (expectedDay == 31 && expectedMonth < 13) { expectedDay = 1; expectedMonth++; } else if (expectedMonth == 13) { if (expectedYear % 4 == 3 && expectedDay == 7) { expectedDay = 1; expectedMonth = 1; expectedYear++; expectedDOY = 1; } else if (expectedYear % 4 != 3 && expectedDay == 6) { expectedDay = 1; expectedMonth = 1; expectedYear++; expectedDOY = 1; } } millis += SKIP; } }\n```\n\n            \n```java\npublic void testCalendar() { if (TestAll.FAST) { return; } System.out.println(\\\"\\nTestCopticChronology.testCalendar\\\"); DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, COPTIC_UTC); long millis = epoch.getMillis(); long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); DateTimeField dayOfWeek = COPTIC_UTC.dayOfWeek(); DateTimeField dayOfYear = COPTIC_UTC.dayOfYear(); DateTimeField dayOfMonth = COPTIC_UTC.dayOfMonth(); DateTimeField monthOfYear = COPTIC_UTC.monthOfYear(); DateTimeField year = COPTIC_UTC.year(); DateTimeField yearOfEra = COPTIC_UTC.yearOfEra(); DateTimeField era = COPTIC_UTC.era(); int expectedDOW = new DateTime(284, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); int expectedDOY = 1; int expectedDay = 1; int expectedMonth = 1; int expectedYear = 1; while (millis < end) { int dowValue = dayOfWeek.get(millis); int doyValue = dayOfYear.get(millis); int dayValue = dayOfMonth.get(millis); int monthValue = monthOfYear.get(millis); int yearValue = year.get(millis); int yearOfEraValue = yearOfEra.get(millis); int monthLen = dayOfMonth.getMaximumValue(millis); if (monthValue < 1 || monthValue > 13) { fail(\\\"Bad month: \\\" + millis); } assertEquals(1, era.get(millis)); assertEquals(\\\"AM\\\", era.getAsText(millis)); assertEquals(\\\"AM\\\", era.getAsShortText(millis)); assertEquals(expectedYear, yearValue); assertEquals(expectedYear, yearOfEraValue); assertEquals(expectedMonth, monthValue); assertEquals(expectedDay, dayValue); assertEquals(expectedDOW, dowValue); assertEquals(expectedDOY, doyValue); assertEquals(yearValue % 4 == 3, year.isLeap(millis)); if (monthValue == 13) { assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis)); if (yearValue % 4 == 3) { assertEquals(6, monthLen); } else { assertEquals(5, monthLen); } } else { assertEquals(30, monthLen); } expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; expectedDay++; expectedDOY++; if (expectedDay == 31 && expectedMonth < 13) { expectedDay = 1; expectedMonth++; } else if (expectedMonth == 13) { if (expectedYear % 4 == 3 && expectedDay == 7) { expectedDay = 1; expectedMonth = 1; expectedYear++; expectedDOY = 1; } else if (expectedYear % 4 != 3 && expectedDay == 6) { expectedDay = 1; expectedMonth = 1; expectedYear++; expectedDOY = 1; } } millis += SKIP; } }\n```\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        \n        if (type.isSupported(DurationFieldType.years()) && years != 0) {\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months()) && months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (type.isSupported(DurationFieldType.years()) && years != 0) {\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months()) && months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        } else if (years != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        if (months != 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        } else if (months != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n\n        if (type.isSupported(DurationFieldType.years()) && years != 0) {\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months()) && months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        }\n        if (months != 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        }\n        if (months != 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (type.isSupported(DurationFieldType.years()) && years != 0) {\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months()) && months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        }\n        if (months != 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        \n        if (type.isSupported(DurationFieldType.years())) {\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n        } else if (years != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        \n        if (type.isSupported(DurationFieldType.months())) {\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        } else if (months != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n    return result;\n}\n"
                ],
                [
                    "\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        } else if (years != 0) {\n            throw new UnsupportedOperationException(\"Years field is not supported\");\n        }\n        if (months != 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        } else if (months != 0) {\n            throw new UnsupportedOperationException(\"Months field is not supported\");\n        }\n    }\n    return result;\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "iteration_done": true
    }
}