{
    "Time-15": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n/**\n* Multiply two values throwing an exception if overflow occurs.\n*\n* @param val1  the first value\n* @param val2  the second value\n* @return the new total\n* @throws ArithmeticException if the value is too big or too small\n* @since 1.2\n*/\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2 != val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testSafeMultiplyLongInt() {\n\n        assertEquals(0L, FieldUtils.safeMultiply(0L, 0));\n\n        \n\n        assertEquals(1L, FieldUtils.safeMultiply(1L, 1));\n\n        assertEquals(3L, FieldUtils.safeMultiply(1L, 3));\n\n        assertEquals(3L, FieldUtils.safeMultiply(3L, 1));\n\n        \n\n        assertEquals(6L, FieldUtils.safeMultiply(2L, 3));\n\n        assertEquals(-6L, FieldUtils.safeMultiply(2L, -3));\n\n        assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));\n\n        assertEquals(6L, FieldUtils.safeMultiply(-2L, -3));\n\n        \n\n        assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));\n\n        \n\n        assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));\n\n        assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));\n\n        assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));\n\n        \n\n        try {\n\n            FieldUtils.safeMultiply(Long.MIN_VALUE, -1);\n\n            fail();\n\n        } catch (ArithmeticException e) {\n\n        }\n\n        \n\n        try {\n\n            FieldUtils.safeMultiply(Long.MIN_VALUE, 100);\n\n            fail();\n\n        } catch (ArithmeticException e) {\n\n        }\n\n        \n\n        try {\n\n            FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);\n\n            fail();\n\n        } catch (ArithmeticException e) {\n\n        }\n\n        \n\n        try {\n\n            FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);\n\n            fail();\n\n        } catch (ArithmeticException e) {\n\n        }\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyLongInt(TestFieldUtils.java:261)  fail();\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    if (val1 > Long.MAX_VALUE / val2 || val1 < Long.MIN_VALUE / val2) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return val1 * val2;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    if (val2 == 0) {\n        return 0L;\n    }\n    if (val2 == 1) {\n        return val1;\n    }\n    if (val2 == -1) {\n        if (val1 == Long.MIN_VALUE) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return -val1;\n    }\n    long total = val1 * val2;\n    if ((val2 > 0 && total / val2 != val1) || (val2 < 0 && total / val2 != val1)) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (val2 != 0 && total / val2 != val1) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    if (val1 > Long.MAX_VALUE / val2 || val1 < Long.MIN_VALUE / val2) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    long total = val1 * val2;\n    return total;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    if (val1 > Long.MAX_VALUE / val2 || val1 < Long.MIN_VALUE / val2) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    long total = val1 * val2;\n    return total;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    if (val1 > Long.MAX_VALUE / val2 || val1 < Long.MIN_VALUE / val2) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return val1 * val2;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if ((val2 != 0 && total / val2 != val1) || (val1 == Long.MIN_VALUE && val2 == -1)) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    if (val1 > Long.MAX_VALUE / val2 || val1 < Long.MIN_VALUE / val2) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    long total = val1 * val2;\n    return total;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (val2 != 0 && total / val2 != val1) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    if (val1 > Long.MAX_VALUE / val2 || val1 < Long.MIN_VALUE / val2) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    long total = val1 * val2;\n    return total;\n}\n"
                ]
            ],
            "evaluation_done": true,
            "old_plausible_patches": [
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    if (val2 == 0) {\n        return 0L;\n    }\n    if (val2 == 1) {\n        return val1;\n    }\n    if (val2 == -1) {\n        if (val1 == Long.MIN_VALUE) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return -val1;\n    }\n    long total = val1 * val2;\n    if ((val2 > 0 && total / val2 != val1) || (val2 < 0 && total / val2 != val1)) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (val2 != 0 && total / val2 != val1) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if ((val2 != 0 && total / val2 != val1) || (val1 == Long.MIN_VALUE && val2 == -1)) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (val2 != 0 && total / val2 != val1) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n"
                ]
            ],
            "plausible_patches": [
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (val2 != 0 && total / val2 != val1) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n"
                ],
                [
                    "\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if ((val2 != 0 && total / val2 != val1) || (val1 == Long.MIN_VALUE && val2 == -1)) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n"
                ]
            ]
        }
    }
}