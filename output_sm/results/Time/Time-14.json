{
    "Time-14": {
        "1": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n        // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testPlusMonths_int_negativeFromLeap() {\n\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.plusMonths(-1);\n\n        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)  throw new IllegalFieldValueException\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  FieldUtils.verifyValueBounds(this, value, getMinimumValue(),                                     getMaximumValueForSet(instant, value));\n\tat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n\tat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  newValues = getField(index).add(this, index, newValues, amount);\n\tat org.joda.time.MonthDay.plusMonths(MonthDay.java:592)  return withFieldAdded(DurationFieldType.months(), months);\n\tat org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeFromLeap(TestMonthDay_Basics.java:460)  MonthDay result = test.plusMonths(-1);\n \n#Test method 2:\n```java\n    public void testMinusDays_int_negativeFromLeap() {\n\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.minusDays(-1);\n\n        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)  throw new IllegalFieldValueException\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  FieldUtils.verifyValueBounds(this, value, getMinimumValue(),                                     getMaximumValueForSet(instant, value));\n\tat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n\tat org.joda.time.field.BaseDateTimeField.add(BaseDateTimeField.java:324)  values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field\n\tat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  newValues = getField(index).add(this, index, newValues, amount);\n\tat org.joda.time.MonthDay.minusDays(MonthDay.java:672)  return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));\n\tat org.joda.time.TestMonthDay_Basics.testMinusDays_int_negativeFromLeap(TestMonthDay_Basics.java:610)  MonthDay result = test.minusDays(-1);\n \n#Test method 3:\n```java\n    public void testPlusMonths_int_fromLeap() {\n\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.plusMonths(1);\n\n        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)  throw new IllegalFieldValueException\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  FieldUtils.verifyValueBounds(this, value, getMinimumValue(),                                     getMaximumValueForSet(instant, value));\n\tat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n\tat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  newValues = getField(index).add(this, index, newValues, amount);\n\tat org.joda.time.MonthDay.plusMonths(MonthDay.java:592)  return withFieldAdded(DurationFieldType.months(), months);\n\tat org.joda.time.TestMonthDay_Basics.testPlusMonths_int_fromLeap(TestMonthDay_Basics.java:453)  MonthDay result = test.plusMonths(1);\n \n#Test method 4:\n```java\n    public void testPlusMonths_int_negativeEndOfMonthAdjust() {\n\n        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.plusMonths(-1);\n\n        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>\n\tat org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust(TestMonthDay_Basics.java:476)  assertEquals(expected, result);\n \n#Test method 5:\n```java\n    public void testMinusMonths_int_endOfMonthAdjust() {\n\n        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.minusMonths(1);\n\n        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>\n\tat org.joda.time.TestMonthDay_Basics.testMinusMonths_int_endOfMonthAdjust(TestMonthDay_Basics.java:563)  assertEquals(expected, result);\n \n#Test method 6:\n```java\n    public void testMinusMonths_int_negativeFromLeap() {\n\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.minusMonths(-1);\n\n        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)  throw new IllegalFieldValueException\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  FieldUtils.verifyValueBounds(this, value, getMinimumValue(),                                     getMaximumValueForSet(instant, value));\n\tat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n\tat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  newValues = getField(index).add(this, index, newValues, amount);\n\tat org.joda.time.MonthDay.minusMonths(MonthDay.java:652)  return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));\n\tat org.joda.time.TestMonthDay_Basics.testMinusMonths_int_negativeFromLeap(TestMonthDay_Basics.java:554)  MonthDay result = test.minusMonths(-1);\n \n#Test method 7:\n```java\n    public void testMinusMonths_int_fromLeap() {\n\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.minusMonths(1);\n\n        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)  throw new IllegalFieldValueException\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  FieldUtils.verifyValueBounds(this, value, getMinimumValue(),                                     getMaximumValueForSet(instant, value));\n\tat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n\tat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  newValues = getField(index).add(this, index, newValues, amount);\n\tat org.joda.time.MonthDay.minusMonths(MonthDay.java:652)  return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));\n\tat org.joda.time.TestMonthDay_Basics.testMinusMonths_int_fromLeap(TestMonthDay_Basics.java:547)  MonthDay result = test.minusMonths(1);\n \n#Test method 8:\n```java\n    public void testPlusDays_int_fromLeap() {\n\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.plusDays(1);\n\n        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)  throw new IllegalFieldValueException\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  FieldUtils.verifyValueBounds(this, value, getMinimumValue(),                                     getMaximumValueForSet(instant, value));\n\tat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n\tat org.joda.time.field.BaseDateTimeField.add(BaseDateTimeField.java:324)  values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field\n\tat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  newValues = getField(index).add(this, index, newValues, amount);\n\tat org.joda.time.MonthDay.plusDays(MonthDay.java:612)  return withFieldAdded(DurationFieldType.days(), days);\n\tat org.joda.time.TestMonthDay_Basics.testPlusDays_int_fromLeap(TestMonthDay_Basics.java:509)  MonthDay result = test.plusDays(1);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // Use correct field index for addition\n        instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        \n        // Adjust for end-of-month scenarios\n        int[] result = iChronology.get(partial, instant);\n        if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear()) {\n            // Check if the resulting day is out of range for the resulting month\n            if (values.length > fieldIndex + 1) {\n                DateTimeField dayField = partial.getFieldType(fieldIndex + 1).getField(iChronology);\n                int maxDay = dayField.getMaximumValue(instant);\n                if (result[fieldIndex + 1] > maxDay) {\n                    result[fieldIndex + 1] = maxDay;\n                }\n            }\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] updatedValues = iChronology.get(partial, instant);\n\n        if (partial.size() > 1 && updatedValues[0] == 2 && updatedValues[1] == 28) {\n            int year = iChronology.year().get(instant);\n            if (iChronology.isLeapYear(year)) {\n                updatedValues[1] = 29;\n            }\n        }\n\n        return updatedValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = partial.getChronology().set(partial, 0L);\n        instant = add(instant, valueToAdd);\n        return partial.getChronology().get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\nprivate long add(long instant, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return instant;\n    }\n    Chronology chrono = iChronology.withUTC();\n    DateTime dt = new DateTime(instant, chrono);\n    DateTime result = dt.plusMonths(valueToAdd);\n    return result.getMillis();\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n\n        // Adjust for end of month\n        if (fieldIndex == 1 && partial.getFieldType(fieldIndex).getRangeDurationType() == DurationFieldType.months()) {\n            int month = iChronology.monthOfYear().get(instant);\n            int day = iChronology.dayOfMonth().get(instant);\n            int maxDaysInMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n            if (day > maxDaysInMonth) {\n                instant = iChronology.dayOfMonth().set(instant, maxDaysInMonth);\n            }\n        }\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        \n        // Adjust for end of month situations\n        if (partial.getFieldType(fieldIndex).getField(iChronology).getType() == DurationFieldType.months()) {\n            int month = iChronology.monthOfYear().get(instant);\n            int day = iChronology.dayOfMonth().get(instant);\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n            if (day > maxDay) {\n                instant = iChronology.dayOfMonth().set(instant, maxDay);\n            }\n        }\n        \n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] updatedValues = iChronology.get(partial, instant);\n\n        // Adjusting for end-of-month leap year cases\n        if (partial instanceof MonthDay) {\n            int month = updatedValues[0];\n            int day = updatedValues[1];\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n            if (day > maxDay) {\n                updatedValues[1] = maxDay;\n            }\n        }\n\n        return updatedValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        \n        int[] result = iChronology.get(partial, instant);\n        if (fieldIndex > 0 && result[fieldIndex] != values[fieldIndex]) {\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n            if (result[fieldIndex] > maxDay) {\n                result[fieldIndex] = maxDay;\n            }\n        }\n        \n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] result = iChronology.get(partial, instant);\n        \n        // Adjust for leap year issues\n        if (partial.getFieldType(fieldIndex).getName().equals(\"dayOfMonth\")) {\n            int month = result[0];\n            int day = result[1];\n            \n            // Check if the day is now invalid for the month\n            if (day > 28) {\n                try {\n                    iChronology.dayOfMonth().set(instant, day);\n                } catch (IllegalFieldValueException e) {\n                    // Handle end of February, adjust to last valid day\n                    day = iChronology.dayOfMonth().getMaximumValue(instant);\n                    result[1] = day;\n                }\n            }\n        }\n        \n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] result = iChronology.get(partial, instant);\n        \n        // Check for leap year adjustments\n        if (fieldIndex == partial.size() - 1 && partial.getFieldType(fieldIndex).equals(DateTimeFieldType.dayOfMonth())) {\n            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n            if (result[fieldIndex] > maxDayOfMonth) {\n                result[fieldIndex] = maxDayOfMonth;\n            }\n        }\n        \n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "2": {
            "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) and relevant context to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n        // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testPlusMonths_int_negativeFromLeap() {\n\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.plusMonths(-1);\n\n        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)  throw new IllegalFieldValueException\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  FieldUtils.verifyValueBounds(this, value, getMinimumValue(),                                     getMaximumValueForSet(instant, value));\n\tat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n\tat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  newValues = getField(index).add(this, index, newValues, amount);\n\tat org.joda.time.MonthDay.plusMonths(MonthDay.java:592)  return withFieldAdded(DurationFieldType.months(), months);\n\tat org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeFromLeap(TestMonthDay_Basics.java:460)  MonthDay result = test.plusMonths(-1);\n \n#Test method 2:\n```java\n    public void testMinusDays_int_negativeFromLeap() {\n\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.minusDays(-1);\n\n        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)  throw new IllegalFieldValueException\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  FieldUtils.verifyValueBounds(this, value, getMinimumValue(),                                     getMaximumValueForSet(instant, value));\n\tat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n\tat org.joda.time.field.BaseDateTimeField.add(BaseDateTimeField.java:324)  values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field\n\tat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  newValues = getField(index).add(this, index, newValues, amount);\n\tat org.joda.time.MonthDay.minusDays(MonthDay.java:672)  return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));\n\tat org.joda.time.TestMonthDay_Basics.testMinusDays_int_negativeFromLeap(TestMonthDay_Basics.java:610)  MonthDay result = test.minusDays(-1);\n \n#Test method 3:\n```java\n    public void testPlusMonths_int_fromLeap() {\n\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.plusMonths(1);\n\n        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)  throw new IllegalFieldValueException\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  FieldUtils.verifyValueBounds(this, value, getMinimumValue(),                                     getMaximumValueForSet(instant, value));\n\tat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n\tat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  newValues = getField(index).add(this, index, newValues, amount);\n\tat org.joda.time.MonthDay.plusMonths(MonthDay.java:592)  return withFieldAdded(DurationFieldType.months(), months);\n\tat org.joda.time.TestMonthDay_Basics.testPlusMonths_int_fromLeap(TestMonthDay_Basics.java:453)  MonthDay result = test.plusMonths(1);\n \n#Test method 4:\n```java\n    public void testPlusMonths_int_negativeEndOfMonthAdjust() {\n\n        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.plusMonths(-1);\n\n        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>\n\tat org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust(TestMonthDay_Basics.java:476)  assertEquals(expected, result);\n \n#Test method 5:\n```java\n    public void testMinusMonths_int_endOfMonthAdjust() {\n\n        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.minusMonths(1);\n\n        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>\n\tat org.joda.time.TestMonthDay_Basics.testMinusMonths_int_endOfMonthAdjust(TestMonthDay_Basics.java:563)  assertEquals(expected, result);\n \n#Test method 6:\n```java\n    public void testMinusMonths_int_negativeFromLeap() {\n\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.minusMonths(-1);\n\n        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)  throw new IllegalFieldValueException\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  FieldUtils.verifyValueBounds(this, value, getMinimumValue(),                                     getMaximumValueForSet(instant, value));\n\tat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n\tat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  newValues = getField(index).add(this, index, newValues, amount);\n\tat org.joda.time.MonthDay.minusMonths(MonthDay.java:652)  return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));\n\tat org.joda.time.TestMonthDay_Basics.testMinusMonths_int_negativeFromLeap(TestMonthDay_Basics.java:554)  MonthDay result = test.minusMonths(-1);\n \n#Test method 7:\n```java\n    public void testMinusMonths_int_fromLeap() {\n\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.minusMonths(1);\n\n        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)  throw new IllegalFieldValueException\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  FieldUtils.verifyValueBounds(this, value, getMinimumValue(),                                     getMaximumValueForSet(instant, value));\n\tat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n\tat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  newValues = getField(index).add(this, index, newValues, amount);\n\tat org.joda.time.MonthDay.minusMonths(MonthDay.java:652)  return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));\n\tat org.joda.time.TestMonthDay_Basics.testMinusMonths_int_fromLeap(TestMonthDay_Basics.java:547)  MonthDay result = test.minusMonths(1);\n \n#Test method 8:\n```java\n    public void testPlusDays_int_fromLeap() {\n\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n\n        MonthDay result = test.plusDays(1);\n\n        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());\n\n        assertEquals(expected, result);\n\n    }\n\n```\n#Error message: org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)  throw new IllegalFieldValueException\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  FieldUtils.verifyValueBounds(this, value, getMinimumValue(),                                     getMaximumValueForSet(instant, value));\n\tat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n\tat org.joda.time.field.BaseDateTimeField.add(BaseDateTimeField.java:324)  values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field\n\tat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  newValues = getField(index).add(this, index, newValues, amount);\n\tat org.joda.time.MonthDay.plusDays(MonthDay.java:612)  return withFieldAdded(DurationFieldType.days(), days);\n\tat org.joda.time.TestMonthDay_Basics.testPlusDays_int_fromLeap(TestMonthDay_Basics.java:509)  MonthDay result = test.plusDays(1);\n\n\n## \ud83d\udca1 Context from Project\n\n            \n```java\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) { if (valueToAdd == 0) { return values; } if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]); } instant = add(instant, valueToAdd); return GJChronology.this.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } }\n```\n\n            \n```java\npublic DateTimeFormatter getFormatter() { DateTimeFormatter[] f = iFormatter; if (f == null) { if (size() == 0) { return null; } f = new DateTimeFormatter[2]; try { List<DateTimeFieldType> list = new ArrayList<DateTimeFieldType>(Arrays.asList(iTypes)); f[0] = ISODateTimeFormat.forFields(list, true, false); if (list.size() == 0) { f[1] = f[0]; } } catch (IllegalArgumentException ex) { } iFormatter = f; } return f[0]; }\n```\n\n            \n```java\npublic YearMonth withPeriodAdded(ReadablePeriod period, int scalar) { if (period == null || scalar == 0) { return this; } int[] newValues = getValues(); for (int i = 0; i < period.size(); i++) { DurationFieldType fieldType = period.getFieldType(i); int index = indexOf(fieldType); if (index >= 0) { newValues = getField(index).add(this, index, newValues, FieldUtils.safeMultiply(period.getValue(i), scalar)); } } return new YearMonth(this, newValues); }\n```\n\n            \n```java\nprotected int[] addPeriodInto(int[] values, ReadablePeriod period) { for (int i = 0, isize = period.size(); i < isize; i++) { DurationFieldType type = period.getFieldType(i); int value = period.getValue(i); if (value != 0) { int index = indexOf(type); if (index == -1) { throw new IllegalArgumentException(\\\"Period does not support field '\\\" + type.getName() + \\\"'\\\"); } else { values[index] = FieldUtils.safeAdd(getValue(index), value); } } } return values; }\n```\n\n            \n```java\npublic TimeOfDay withPeriodAdded(ReadablePeriod period, int scalar) { if (period == null || scalar == 0) { return this; } int[] newValues = getValues(); for (int i = 0; i < period.size(); i++) { DurationFieldType fieldType = period.getFieldType(i); int index = indexOf(fieldType); if (index >= 0) { newValues = getField(index).addWrapPartial(this, index, newValues, FieldUtils.safeMultiply(period.getValue(i), scalar)); } } return new TimeOfDay(this, newValues); }\n```\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
            "patches": [
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] result = iChronology.get(partial, instant);\n        \n        if (partial.getFieldType(fieldIndex).getDurationType() == DurationFieldType.months()) {\n            int month = result[fieldIndex];\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n            result[partial.size() - 1] = Math.min(result[partial.size() - 1], maxDay);\n        }\n\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] result = iChronology.get(partial, instant);\n\n        // Check if result is invalid based on the current chronology.\n        DateTimeField field = partial.getFieldType(fieldIndex).getField(iChronology);\n        int minimumValue = field.getMinimumValue(result);\n        int maximumValue = field.getMaximumValue(result);\n\n        if (values[fieldIndex] > maximumValue) {\n            result[fieldIndex] = maximumValue;\n        } else if (values[fieldIndex] < minimumValue) {\n            result[fieldIndex] = minimumValue;\n        }\n\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(partial.getFieldType(fieldIndex).getDurationType().getField(iChronology), instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        \n        // Adjust the day of month if needed\n        int maximumDay = iChronology.dayOfMonth().getMaximumValue(instant);\n        int currentDay = partial.getFieldType(fieldIndex).getField(iChronology).get(instant);\n        if (currentDay > maximumDay) {\n            instant = iChronology.dayOfMonth().set(instant, maximumDay);\n        }\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] newValues = iChronology.get(partial, instant);\n        if (fieldIndex == 1 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())) {\n            // Check if the final day is not valid for the resulting month and adjust to last day if necessary\n            int finalMonth = newValues[0];\n            int finalDay = newValues[1];\n            int maxDayOfMonth = iChronology.monthOfYear().getMaximumValue(instant);\n            if (finalDay > maxDayOfMonth) {\n                newValues[1] = maxDayOfMonth;\n            }\n        }\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] resultValues = iChronology.get(partial, instant);\n\n        // Special handling for MonthDay to adjust end of month situations\n        if (partial instanceof MonthDay) {\n            int dayOfMonth = resultValues[1];\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n            if (dayOfMonth > maxDay) {\n                resultValues[1] = maxDay;\n            }\n        }\n\n        return resultValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n\n        int[] result = iChronology.get(partial, instant);\n        if (fieldIndex < result.length) {\n            int fieldValue = result[fieldIndex];\n            int maxValue = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(instant);\n            if (fieldValue > maxValue) {\n                result[fieldIndex] = maxValue;\n            }\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        int[] results = values.clone();\n        int size = partial.size();\n        DurationField field = partial.getFieldType(fieldIndex).getField(iChronology);\n        \n        if (fieldIndex == size - 1) {\n            // direct addition\n            results[fieldIndex] = field.add(partial, fieldIndex, results, valueToAdd);\n        } else {\n            // complex addition\n            results = field.add(partial, fieldIndex, results, valueToAdd);\n            for (int i = fieldIndex + 1; i < size; i++) {\n                if (results[i] < partial.getFieldType(i).getField(iChronology).getMinimumValue()) {\n                    results[i] = partial.getFieldType(i).getField(iChronology).getMaximumValue();\n                    results[i - 1] -= 1;\n                } else {\n                    break;\n                }\n            }\n        }\n        \n        return results;\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] resultValues = iChronology.get(partial, instant);\n\n        // Handle leap year adjustments\n        if (partial.getFieldType(fieldIndex).equals(DateTimeFieldType.dayOfMonth())) {\n            int month = partial.getFieldType(DateTimeFieldType.monthOfYear()).getField(iChronology).get(instant);\n            int day = resultValues[fieldIndex];\n            int actualMaxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n\n            if (day > actualMaxDay) {\n                resultValues[fieldIndex] = actualMaxDay;\n            }\n        }\n\n        return resultValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ],
                [
                    "\n//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n        // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        // Adjust for end of month if necessary\n        int[] updatedValues = iChronology.get(partial, instant);\n        if (fieldIndex == 1 && updatedValues[1] > partial.getFieldType(1).getField(iChronology).getMaximumValue(updatedValues[0])) {\n            updatedValues[1] = partial.getFieldType(1).getField(iChronology).getMaximumValue(updatedValues[0]);\n        }\n        return updatedValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n"
                ]
            ],
            "evaluation_done": true
        },
        "iteration_done": true
    }
}