{
    "Jsoup-65": {
        "function_num": 4,
        "functions": [
            {
                "path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
                "start_loc": 359,
                "end_loc": 361,
                "buggy_function": "    void clearStackToTableBodyContext() {\n        clearStackToContext(\"tbody\", \"tfoot\", \"thead\");\n    }\n",
                "fixed_function": "    void clearStackToTableBodyContext() {\n        clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");\n    }\n",
                "comment": "",
                "normalized_body": [
                    "void clearStackToTableBodyContext() { clearStackToContext(\\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\"); }"
                ],
                "top_similar_methods": [
                    [
                        1.0,
                        "void clearStackToTableBodyContext() { clearStackToContext(\\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\"); }"
                    ],
                    [
                        0.9592387676239014,
                        "void clearStackToTableContext() { clearStackToContext(\\\"table\\\"); }"
                    ],
                    [
                        0.9576311111450195,
                        "void clearStackToTableRowContext() { clearStackToContext(\\\"tr\\\"); }"
                    ],
                    [
                        0.9444643259048462,
                        "void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break; } }"
                    ],
                    [
                        0.9392296671867371,
                        "void createDoctypePending() { doctypePending.reset(); }"
                    ],
                    [
                        0.9346317052841187,
                        "void markInsertionMode() { originalState = state; }"
                    ],
                    [
                        0.9337931871414185,
                        "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException { accum.append(getWholeData()); }"
                    ],
                    [
                        0.9334441423416138,
                        "@Test public void dropsUnterminatedAttribute() { String h1 = \\\"<p id=\\\\\"foo\\\"; Document doc = Jsoup.parse(h1); assertEquals(\\\"\\\", doc.text()); }"
                    ],
                    [
                        0.9303171634674072,
                        "void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); }"
                    ]
                ],
                "non_directly_related_tests": [
                    "org.jsoup.parser.HtmlParserTest::testTemplateInsideTable"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below are buggy method(s) from a large Java project. These methods cause one or more test failures.\nYour task is to fix the bugs in these methods. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Methods\n\n\n```java\n\n    void clearStackToTableBodyContext() {\n        clearStackToContext(\"tbody\", \"tfoot\", \"thead\");\n    }\n\n```\n\n```java\n\n    void clearStackToTableRowContext() {\n        clearStackToContext(\"tr\");\n    }\n\n```\n\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n  @Test public void testTemplateInsideTable() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/table-polymer-template.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n        doc.outputSettings().prettyPrint(true);\n\n        Elements templates = doc.body().getElementsByTag(\"template\");\n        for (Element template : templates) {\n            assertTrue(template.childNodes().size() > 1);\n        }\n  }\n```\n#Error message from the test method 1: junit.framework.AssertionFailedError\n\n---\n\n## Your Goal\n\nFix the buggy methods. Return only the fixed Java methods. Do not include explanations or other text.\n",
                        "patches": [
                            "\nvoid clearStackToTableBodyContext() {\n    clearStackToContext(\"tbody\");\n}\n\nvoid clearStackToTableRowContext() {\n    clearStackToContext(\"tr\");\n}\n",
                            "\nvoid clearStackToTableBodyContext() {\n    clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");\n}\n\nvoid clearStackToTableRowContext() {\n    clearStackToContext(\"tr\", \"template\");\n}\n",
                            "\nvoid clearStackToTableBodyContext() {\n    clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");\n}\n\nvoid clearStackToTableRowContext() {\n    clearStackToContext(\"tr\", \"template\");\n}\n",
                            "\nvoid clearStackToTableBodyContext() {\n    clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");\n}\n\nvoid clearStackToTableRowContext() {\n    clearStackToContext(\"tr\", \"template\");\n}\n",
                            "\nvoid clearStackToTableBodyContext() {\n    clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");\n}\n",
                            "\nvoid clearStackToTableBodyContext() {\n    clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");\n}\n\nvoid clearStackToTableRowContext() {\n    clearStackToContext(\"tr\", \"template\");\n}\n",
                            "\nvoid clearStackToTableBodyContext() {\n    clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");\n}\n\nvoid clearStackToTableRowContext() {\n    clearStackToContext(\"tr\", \"template\");\n}\n",
                            "\nvoid clearStackToTableBodyContext() {\n    clearStackToContext(\"tbodies\", \"tfoot\", \"thead\", \"template\");\n}\n",
                            "\nvoid clearStackToTableBodyContext() {\n    clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");\n}\n\nvoid clearStackToTableRowContext() {\n    clearStackToContext(\"tr\", \"template\");\n}\n",
                            "\nvoid clearStackToTableBodyContext() {\n    clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");\n}\n"
                        ]
                    }
                }
            },
            {
                "path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
                "start_loc": 363,
                "end_loc": 365,
                "buggy_function": "    void clearStackToTableRowContext() {\n        clearStackToContext(\"tr\");\n    }\n",
                "fixed_function": "    void clearStackToTableRowContext() {\n        clearStackToContext(\"tr\", \"template\");\n    }\n",
                "comment": "",
                "normalized_body": [
                    "void clearStackToTableRowContext() { clearStackToContext(\\\"tr\\\"); }"
                ],
                "top_similar_methods": [
                    [
                        1.0000001192092896,
                        "void clearStackToTableRowContext() { clearStackToContext(\\\"tr\\\"); }"
                    ],
                    [
                        0.9921717047691345,
                        "void clearStackToTableContext() { clearStackToContext(\\\"table\\\"); }"
                    ],
                    [
                        0.9632898569107056,
                        "void insertMarkerToFormattingElements() { formattingElements.add(null); }"
                    ],
                    [
                        0.95763099193573,
                        "void clearStackToTableBodyContext() { clearStackToContext(\\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\"); }"
                    ],
                    [
                        0.9574435353279114,
                        "void createDoctypePending() { doctypePending.reset(); }"
                    ],
                    [
                        0.9526597261428833,
                        "void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break; } }"
                    ],
                    [
                        0.9506899118423462,
                        "void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); }"
                    ],
                    [
                        0.9501382112503052,
                        "void emitDoctypePending() { emit(doctypePending); }"
                    ],
                    [
                        0.9473158121109009,
                        "void createTempBuffer() { Token.reset(dataBuffer); }"
                    ]
                ],
                "non_directly_related_tests": [
                    "org.jsoup.parser.HtmlParserTest::testTemplateInsideTable"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below are buggy method(s) from a large Java project. These methods cause one or more test failures.\nYour task is to fix the bugs in these methods. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Methods\n\n\n```java\n\n    void clearStackToTableBodyContext() {\n        clearStackToContext(\"tbody\", \"tfoot\", \"thead\");\n    }\n\n```\n\n```java\n\n    void clearStackToTableRowContext() {\n        clearStackToContext(\"tr\");\n    }\n\n```\n\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n  @Test public void testTemplateInsideTable() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/table-polymer-template.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n        doc.outputSettings().prettyPrint(true);\n\n        Elements templates = doc.body().getElementsByTag(\"template\");\n        for (Element template : templates) {\n            assertTrue(template.childNodes().size() > 1);\n        }\n  }\n```\n#Error message from the test method 1: junit.framework.AssertionFailedError\n\n---\n\n## Your Goal\n\nFix the buggy methods. Return only the fixed Java methods. Do not include explanations or other text.\n",
                        "patches": [
                            "\nvoid clearStackToTableRowContext() {\n    clearStackToContext(\"tr\", \"template\");\n}\n",
                            "\nvoid clearStackToTableRowContext() {\n    clearStackToContext(\"tr\", \"template\");\n}\n",
                            "\nvoid clearStackToTableRowContext() {\n    clearStackToContext(\"tr\", \"template\");\n}\n"
                        ],
                        "evaluation_done": true
                    }
                }
            },
            {
                "path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
                "start_loc": 1031,
                "end_loc": 1073,
                "buggy_function": "        boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }\n",
                "fixed_function": "        boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"template\")) {\n                        tb.insert(startTag);\n                    } else if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }\n",
                "comment": "",
                "normalized_body": [
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType(tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \\\"head\\\", \\\"body\\\", \\\"html\\\", \\\"br\\\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\")) { return InBody.process(t, tb); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"head\\\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \\\"head\\\", \\\"body\\\", \\\"html\\\", \\\"br\\\"))) { tb.processStartTag(\\\"head\\\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\\\"head\\\"); return tb.process(t); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch(t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\\\"html\\\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \\\"base\\\", \\\"basefont\\\", \\\"bgsound\\\", \\\"command\\\", \\\"link\\\")) { Element el = tb.insertEmpty(start); if (name.equals(\\\"base\\\") && el.hasAttr(\\\"href\\\")) tb.maybeSetBaseUri(el); } else if (name.equals(\\\"meta\\\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\\\"title\\\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \\\"noframes\\\", \\\"style\\\")) { handleRawtext(start, tb); } else if (name.equals(\\\"noscript\\\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\\\"script\\\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\\\"head\\\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\\\"head\\\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \\\"body\\\", \\\"html\\\", \\\"br\\\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\\\"noscript\\\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \\\"basefont\\\", \\\"bgsound\\\", \\\"link\\\", \\\"meta\\\", \\\"noframes\\\", \\\"style\\\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\\\"br\\\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \\\"head\\\", \\\"noscript\\\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\\\"html\\\")) { return tb.process(t, InBody); } else if (name.equals(\\\"body\\\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\\\"frameset\\\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \\\"base\\\", \\\"basefont\\\", \\\"bgsound\\\", \\\"link\\\", \\\"meta\\\", \\\"noframes\\\", \\\"script\\\", \\\"style\\\", \\\"title\\\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\\\"head\\\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \\\"body\\\", \\\"html\\\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { switch(t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\\\"a\\\")) { if (tb.getActiveFormattingElement(\\\"a\\\") != null) { tb.error(this); tb.processEndTag(\\\"a\\\"); Element remainingA = tb.getFromStack(\\\"a\\\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insert(startTag); } else if (name.equals(\\\"span\\\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\\\"li\\\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\\\"li\\\")) { tb.processEndTag(\\\"li\\\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insert(startTag); } else if (name.equals(\\\"html\\\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\\\"body\\\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\\\"body\\\"))) { return false; } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\\\"frameset\\\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\\\"body\\\"))) { return false; } else if (!tb.framesetOk()) { return false; } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size() - 1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insert(startTag); tb.framesetOk(false); } else if (name.equals(\\\"form\\\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insert(startTag); } else if (name.equals(\\\"plaintext\\\")) { if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); } else if (name.equals(\\\"button\\\")) { if (tb.inButtonScope(\\\"button\\\")) { tb.error(this); tb.processEndTag(\\\"button\\\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\\\"nobr\\\")) { tb.reconstructFormattingElements(); if (tb.inScope(\\\"nobr\\\")) { tb.error(this); tb.processEndTag(\\\"nobr\\\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\\\"table\\\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\\\"input\\\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\\\"type\\\").equalsIgnoreCase(\\\"hidden\\\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\\\"hr\\\")) { if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\\\"image\\\")) { if (tb.getFromStack(\\\"svg\\\") == null) return tb.process(startTag.name(\\\"img\\\")); else tb.insert(startTag); } else if (name.equals(\\\"isindex\\\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\\\"form\\\"); if (startTag.attributes.hasKey(\\\"action\\\")) { Element form = tb.getFormElement(); form.attr(\\\"action\\\", startTag.attributes.get(\\\"action\\\")); } tb.processStartTag(\\\"hr\\\"); tb.processStartTag(\\\"label\\\"); String prompt = startTag.attributes.hasKey(\\\"prompt\\\") ? startTag.attributes.get(\\\"prompt\\\") : \\\"This is a searchable index. Enter search keywords: \\\"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\\\"name\\\", \\\"isindex\\\"); tb.processStartTag(\\\"input\\\", inputAttribs); tb.processEndTag(\\\"label\\\"); tb.processStartTag(\\\"hr\\\"); tb.processEndTag(\\\"form\\\"); } else if (name.equals(\\\"textarea\\\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\\\"xmp\\\")) { if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\\\"iframe\\\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\\\"noembed\\\")) { handleRawtext(startTag, tb); } else if (name.equals(\\\"select\\\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\\\"option\\\")) tb.processEndTag(\\\"option\\\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\\\"ruby\\\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\\\"ruby\\\")) { tb.error(this); tb.popStackToBefore(\\\"ruby\\\"); } tb.insert(startTag); } } else if (name.equals(\\\"math\\\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\\\"svg\\\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\\\"span\\\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\\\"li\\\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\\\"body\\\")) { if (!tb.inScope(\\\"body\\\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\\\"html\\\")) { boolean notIgnored = tb.processEndTag(\\\"body\\\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\\\"form\\\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\\\"p\\\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\\\"sarcasm\\\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\\\"name\\\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\\\"br\\\")) { tb.error(this); tb.processStartTag(\\\"br\\\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\\\"caption\\\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\\\"colgroup\\\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\\\"col\\\")) { tb.processStartTag(\\\"colgroup\\\"); return tb.process(t); } else if (StringUtil.in(name, \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \\\"td\\\", \\\"th\\\", \\\"tr\\\")) { tb.processStartTag(\\\"tbody\\\"); return tb.process(t); } else if (name.equals(\\\"table\\\")) { tb.error(this); boolean processed = tb.processEndTag(\\\"table\\\"); if (processed) return tb.process(t); } else if (StringUtil.in(name, \\\"style\\\", \\\"script\\\")) { return tb.process(t, InHead); } else if (name.equals(\\\"input\\\")) { if (!startTag.attributes.get(\\\"type\\\").equalsIgnoreCase(\\\"hidden\\\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\\\"form\\\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\\\"table\\\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\\\"table\\\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\\\"html\\\")) tb.error(this); return true; } return anythingElse(t, tb); }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { switch(t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \\\"table\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\\\"caption\\\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\\\"caption\\\")) tb.error(this); tb.popStackToClose(\\\"caption\\\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\") || t.isEndTag() && t.asEndTag().normalName().equals(\\\"table\\\"))) { tb.error(this); boolean processed = tb.processEndTag(\\\"caption\\\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \\\"body\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch(t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch(startTag.normalName()) { case \\\"html\\\": return tb.process(t, InBody); case \\\"col\\\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\\\"colgroup\\\")) { if (tb.currentElement().nodeName().equals(\\\"html\\\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\\\"html\\\")) return true; else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { switch(t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\\\"tr\\\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \\\"th\\\", \\\"td\\\")) { tb.error(this); tb.processStartTag(\\\"tr\\\"); return tb.process(startTag); } else if (StringUtil.in(name, \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\\\"table\\\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"td\\\", \\\"th\\\", \\\"tr\\\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (StringUtil.in(name, \\\"th\\\", \\\"td\\\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\\\"tr\\\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.clearStackToTableRowContext(); tb.pop(); tb.transition(InTableBody); } else if (name.equals(\\\"table\\\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\\\"tr\\\"); return tb.process(t); } else if (StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"td\\\", \\\"th\\\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.in(name, \\\"td\\\", \\\"th\\\")) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\")) { tb.error(this); return false; } else if (StringUtil.in(name, \\\"table\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\")) { if (!(tb.inTableScope(\\\"td\\\") || tb.inTableScope(\\\"th\\\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { switch(t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\\\"html\\\")) return tb.process(start, InBody); else if (name.equals(\\\"option\\\")) { if (tb.currentElement().nodeName().equals(\\\"option\\\")) tb.processEndTag(\\\"option\\\"); tb.insert(start); } else if (name.equals(\\\"optgroup\\\")) { if (tb.currentElement().nodeName().equals(\\\"option\\\")) tb.processEndTag(\\\"option\\\"); else if (tb.currentElement().nodeName().equals(\\\"optgroup\\\")) tb.processEndTag(\\\"optgroup\\\"); tb.insert(start); } else if (name.equals(\\\"select\\\")) { tb.error(this); return tb.processEndTag(\\\"select\\\"); } else if (StringUtil.in(name, \\\"input\\\", \\\"keygen\\\", \\\"textarea\\\")) { tb.error(this); if (!tb.inSelectScope(\\\"select\\\")) return false; tb.processEndTag(\\\"select\\\"); return tb.process(start); } else if (name.equals(\\\"script\\\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch(name) { case \\\"optgroup\\\": if (tb.currentElement().nodeName().equals(\\\"option\\\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\\\"optgroup\\\")) tb.processEndTag(\\\"option\\\"); if (tb.currentElement().nodeName().equals(\\\"optgroup\\\")) tb.pop(); else tb.error(this); break; case \\\"option\\\": if (tb.currentElement().nodeName().equals(\\\"option\\\")) tb.pop(); else tb.error(this); break; case \\\"select\\\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\\\"html\\\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \\\"caption\\\", \\\"table\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\", \\\"td\\\", \\\"th\\\")) { tb.error(this); tb.processEndTag(\\\"select\\\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \\\"caption\\\", \\\"table\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\", \\\"td\\\", \\\"th\\\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\\\"select\\\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\\\"html\\\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch(start.normalName()) { case \\\"html\\\": return tb.process(start, InBody); case \\\"frameset\\\": tb.insert(start); break; case \\\"frame\\\": tb.insertEmpty(start); break; case \\\"noframes\\\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\\\"frameset\\\")) { if (tb.currentElement().nodeName().equals(\\\"html\\\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\\\"frameset\\\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\\\"html\\\")) { tb.error(this); return true; } } else { tb.error(this); return false; } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\\\"html\\\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"noframes\\\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"noframes\\\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { return true; }"
                ],
                "top_similar_methods": [
                    [
                        1.0000001192092896,
                        "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType(tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); } return true; }"
                    ],
                    [
                        0.9776461124420166,
                        "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \\\"head\\\", \\\"body\\\", \\\"html\\\", \\\"br\\\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }"
                    ],
                    [
                        0.9718533158302307,
                        "private static void handleDataEndTag(Tokeniser t, CharacterReader r, TokeniserState elseTransition) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name); t.dataBuffer.append(name); return; } boolean needsExitTransition = false; if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch(c) { case '\\t': case '\\n': case '\\r': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); needsExitTransition = true; } } else { needsExitTransition = true; } if (needsExitTransition) { t.emit(\\\"</\\\" + t.dataBuffer.toString()); t.transition(elseTransition); } }"
                    ],
                    [
                        0.9711065292358398,
                        "private static void handleDataDoubleEscapeTag(Tokeniser t, CharacterReader r, TokeniserState primary, TokeniserState fallback) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.dataBuffer.append(name); t.emit(name); return; } char c = r.consume(); switch(c) { case '\\t': case '\\n': case '\\r': case '\\f': case ' ': case '/': case '>': if (t.dataBuffer.toString().equals(\\\"script\\\")) t.transition(primary); else t.transition(fallback); t.emit(c); break; default: r.unconsume(); t.transition(fallback); } }"
                    ],
                    [
                        0.9666288495063782,
                        "public boolean hasClass(String className) { final String classAttr = attributes().getIgnoreCase(\\\"class\\\"); final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }"
                    ],
                    [
                        0.96360182762146,
                        "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() - 1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true; }"
                    ],
                    [
                        0.9627817869186401,
                        "void read(Tokeniser t, CharacterReader r) { String value = r.consumeToAny(attributeDoubleValueCharsSorted); if (value.length() > 0) t.tagPending.appendAttributeValue(value); else t.tagPending.setEmptyAttributeValue(); char c = r.consume(); switch(c) { case '\\\"': t.transition(AfterAttributeValue_quoted); break; case '&': int[] ref = t.consumeCharacterReference('\\\"', true); if (ref != null) t.tagPending.appendAttributeValue(ref); else t.tagPending.appendAttributeValue('&'); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); break; case eof: t.eofError(this); t.transition(Data); break; } }"
                    ],
                    [
                        0.9626094102859497,
                        "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch(c) { case '\\'': t.transition(AfterDoctypeSystemIdentifier); break; case nullChar: t.error(this); t.doctypePending.systemIdentifier.append(replacementChar); break; case '>': t.error(this); t.doctypePending.forceQuirks = true; t.emitDoctypePending(); t.transition(Data); break; case eof: t.eofError(this); t.doctypePending.forceQuirks = true; t.emitDoctypePending(); t.transition(Data); break; default: t.doctypePending.systemIdentifier.append(c); } }"
                    ],
                    [
                        0.9622589945793152,
                        "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch(c) { case '\\'': t.transition(AfterDoctypePublicIdentifier); break; case nullChar: t.error(this); t.doctypePending.publicIdentifier.append(replacementChar); break; case '>': t.error(this); t.doctypePending.forceQuirks = true; t.emitDoctypePending(); t.transition(Data); break; case eof: t.eofError(this); t.doctypePending.forceQuirks = true; t.emitDoctypePending(); t.transition(Data); break; default: t.doctypePending.publicIdentifier.append(c); } }"
                    ]
                ],
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
                "start_loc": 1091,
                "end_loc": 1137,
                "buggy_function": "        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isStartTag()) {\n                Token.StartTag startTag = t.asStartTag();\n                String name = startTag.normalName();\n\n                if (StringUtil.in(name, \"th\", \"td\")) {\n                    tb.clearStackToTableRowContext();\n                    tb.insert(startTag);\n                    tb.transition(InCell);\n                    tb.insertMarkerToFormattingElements();\n                } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                    return handleMissingTr(t, tb);\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else if (t.isEndTag()) {\n                Token.EndTag endTag = t.asEndTag();\n                String name = endTag.normalName();\n\n                if (name.equals(\"tr\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this); // frag\n                        return false;\n                    }\n                    tb.clearStackToTableRowContext();\n                    tb.pop(); // tr\n                    tb.transition(InTableBody);\n                } else if (name.equals(\"table\")) {\n                    return handleMissingTr(t, tb);\n                } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        return false;\n                    }\n                    tb.processEndTag(\"tr\");\n                    return tb.process(t);\n                } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }\n",
                "fixed_function": "        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isStartTag()) {\n                Token.StartTag startTag = t.asStartTag();\n                String name = startTag.normalName();\n\n                if (name.equals(\"template\")) {\n                    tb.insert(startTag);\n                } else if (StringUtil.in(name, \"th\", \"td\")) {\n                    tb.clearStackToTableRowContext();\n                    tb.insert(startTag);\n                    tb.transition(InCell);\n                    tb.insertMarkerToFormattingElements();\n                } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                    return handleMissingTr(t, tb);\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else if (t.isEndTag()) {\n                Token.EndTag endTag = t.asEndTag();\n                String name = endTag.normalName();\n\n                if (name.equals(\"tr\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this); // frag\n                        return false;\n                    }\n                    tb.clearStackToTableRowContext();\n                    tb.pop(); // tr\n                    tb.transition(InTableBody);\n                } else if (name.equals(\"table\")) {\n                    return handleMissingTr(t, tb);\n                } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        return false;\n                    }\n                    tb.processEndTag(\"tr\");\n                    return tb.process(t);\n                } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }\n",
                "comment": "",
                "normalized_body": [
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType(tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \\\"head\\\", \\\"body\\\", \\\"html\\\", \\\"br\\\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\")) { return InBody.process(t, tb); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"head\\\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \\\"head\\\", \\\"body\\\", \\\"html\\\", \\\"br\\\"))) { tb.processStartTag(\\\"head\\\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\\\"head\\\"); return tb.process(t); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch(t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\\\"html\\\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \\\"base\\\", \\\"basefont\\\", \\\"bgsound\\\", \\\"command\\\", \\\"link\\\")) { Element el = tb.insertEmpty(start); if (name.equals(\\\"base\\\") && el.hasAttr(\\\"href\\\")) tb.maybeSetBaseUri(el); } else if (name.equals(\\\"meta\\\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\\\"title\\\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \\\"noframes\\\", \\\"style\\\")) { handleRawtext(start, tb); } else if (name.equals(\\\"noscript\\\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\\\"script\\\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\\\"head\\\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\\\"head\\\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \\\"body\\\", \\\"html\\\", \\\"br\\\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\\\"noscript\\\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \\\"basefont\\\", \\\"bgsound\\\", \\\"link\\\", \\\"meta\\\", \\\"noframes\\\", \\\"style\\\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\\\"br\\\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \\\"head\\\", \\\"noscript\\\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\\\"html\\\")) { return tb.process(t, InBody); } else if (name.equals(\\\"body\\\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\\\"frameset\\\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \\\"base\\\", \\\"basefont\\\", \\\"bgsound\\\", \\\"link\\\", \\\"meta\\\", \\\"noframes\\\", \\\"script\\\", \\\"style\\\", \\\"title\\\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\\\"head\\\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \\\"body\\\", \\\"html\\\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { switch(t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\\\"a\\\")) { if (tb.getActiveFormattingElement(\\\"a\\\") != null) { tb.error(this); tb.processEndTag(\\\"a\\\"); Element remainingA = tb.getFromStack(\\\"a\\\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insert(startTag); } else if (name.equals(\\\"span\\\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\\\"li\\\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\\\"li\\\")) { tb.processEndTag(\\\"li\\\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insert(startTag); } else if (name.equals(\\\"html\\\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\\\"body\\\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\\\"body\\\"))) { return false; } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\\\"frameset\\\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\\\"body\\\"))) { return false; } else if (!tb.framesetOk()) { return false; } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size() - 1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insert(startTag); tb.framesetOk(false); } else if (name.equals(\\\"form\\\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insert(startTag); } else if (name.equals(\\\"plaintext\\\")) { if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); } else if (name.equals(\\\"button\\\")) { if (tb.inButtonScope(\\\"button\\\")) { tb.error(this); tb.processEndTag(\\\"button\\\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\\\"nobr\\\")) { tb.reconstructFormattingElements(); if (tb.inScope(\\\"nobr\\\")) { tb.error(this); tb.processEndTag(\\\"nobr\\\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\\\"table\\\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\\\"input\\\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\\\"type\\\").equalsIgnoreCase(\\\"hidden\\\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\\\"hr\\\")) { if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\\\"image\\\")) { if (tb.getFromStack(\\\"svg\\\") == null) return tb.process(startTag.name(\\\"img\\\")); else tb.insert(startTag); } else if (name.equals(\\\"isindex\\\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\\\"form\\\"); if (startTag.attributes.hasKey(\\\"action\\\")) { Element form = tb.getFormElement(); form.attr(\\\"action\\\", startTag.attributes.get(\\\"action\\\")); } tb.processStartTag(\\\"hr\\\"); tb.processStartTag(\\\"label\\\"); String prompt = startTag.attributes.hasKey(\\\"prompt\\\") ? startTag.attributes.get(\\\"prompt\\\") : \\\"This is a searchable index. Enter search keywords: \\\"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\\\"name\\\", \\\"isindex\\\"); tb.processStartTag(\\\"input\\\", inputAttribs); tb.processEndTag(\\\"label\\\"); tb.processStartTag(\\\"hr\\\"); tb.processEndTag(\\\"form\\\"); } else if (name.equals(\\\"textarea\\\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\\\"xmp\\\")) { if (tb.inButtonScope(\\\"p\\\")) { tb.processEndTag(\\\"p\\\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\\\"iframe\\\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\\\"noembed\\\")) { handleRawtext(startTag, tb); } else if (name.equals(\\\"select\\\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\\\"option\\\")) tb.processEndTag(\\\"option\\\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\\\"ruby\\\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\\\"ruby\\\")) { tb.error(this); tb.popStackToBefore(\\\"ruby\\\"); } tb.insert(startTag); } } else if (name.equals(\\\"math\\\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\\\"svg\\\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\\\"span\\\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\\\"li\\\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\\\"body\\\")) { if (!tb.inScope(\\\"body\\\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\\\"html\\\")) { boolean notIgnored = tb.processEndTag(\\\"body\\\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\\\"form\\\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\\\"p\\\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\\\"sarcasm\\\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\\\"name\\\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\\\"br\\\")) { tb.error(this); tb.processStartTag(\\\"br\\\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\\\"caption\\\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\\\"colgroup\\\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\\\"col\\\")) { tb.processStartTag(\\\"colgroup\\\"); return tb.process(t); } else if (StringUtil.in(name, \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \\\"td\\\", \\\"th\\\", \\\"tr\\\")) { tb.processStartTag(\\\"tbody\\\"); return tb.process(t); } else if (name.equals(\\\"table\\\")) { tb.error(this); boolean processed = tb.processEndTag(\\\"table\\\"); if (processed) return tb.process(t); } else if (StringUtil.in(name, \\\"style\\\", \\\"script\\\")) { return tb.process(t, InHead); } else if (name.equals(\\\"input\\\")) { if (!startTag.attributes.get(\\\"type\\\").equalsIgnoreCase(\\\"hidden\\\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\\\"form\\\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\\\"table\\\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\\\"table\\\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\\\"html\\\")) tb.error(this); return true; } return anythingElse(t, tb); }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { switch(t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \\\"table\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\\\"caption\\\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\\\"caption\\\")) tb.error(this); tb.popStackToClose(\\\"caption\\\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\") || t.isEndTag() && t.asEndTag().normalName().equals(\\\"table\\\"))) { tb.error(this); boolean processed = tb.processEndTag(\\\"caption\\\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \\\"body\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch(t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch(startTag.normalName()) { case \\\"html\\\": return tb.process(t, InBody); case \\\"col\\\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\\\"colgroup\\\")) { if (tb.currentElement().nodeName().equals(\\\"html\\\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\\\"html\\\")) return true; else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { switch(t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\\\"tr\\\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \\\"th\\\", \\\"td\\\")) { tb.error(this); tb.processStartTag(\\\"tr\\\"); return tb.process(startTag); } else if (StringUtil.in(name, \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\\\"table\\\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"td\\\", \\\"th\\\", \\\"tr\\\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (StringUtil.in(name, \\\"th\\\", \\\"td\\\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\\\"tr\\\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.clearStackToTableRowContext(); tb.pop(); tb.transition(InTableBody); } else if (name.equals(\\\"table\\\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\\\"tr\\\"); return tb.process(t); } else if (StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"td\\\", \\\"th\\\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.in(name, \\\"td\\\", \\\"th\\\")) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\")) { tb.error(this); return false; } else if (StringUtil.in(name, \\\"table\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\")) { if (!(tb.inTableScope(\\\"td\\\") || tb.inTableScope(\\\"th\\\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { switch(t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\\\"html\\\")) return tb.process(start, InBody); else if (name.equals(\\\"option\\\")) { if (tb.currentElement().nodeName().equals(\\\"option\\\")) tb.processEndTag(\\\"option\\\"); tb.insert(start); } else if (name.equals(\\\"optgroup\\\")) { if (tb.currentElement().nodeName().equals(\\\"option\\\")) tb.processEndTag(\\\"option\\\"); else if (tb.currentElement().nodeName().equals(\\\"optgroup\\\")) tb.processEndTag(\\\"optgroup\\\"); tb.insert(start); } else if (name.equals(\\\"select\\\")) { tb.error(this); return tb.processEndTag(\\\"select\\\"); } else if (StringUtil.in(name, \\\"input\\\", \\\"keygen\\\", \\\"textarea\\\")) { tb.error(this); if (!tb.inSelectScope(\\\"select\\\")) return false; tb.processEndTag(\\\"select\\\"); return tb.process(start); } else if (name.equals(\\\"script\\\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch(name) { case \\\"optgroup\\\": if (tb.currentElement().nodeName().equals(\\\"option\\\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\\\"optgroup\\\")) tb.processEndTag(\\\"option\\\"); if (tb.currentElement().nodeName().equals(\\\"optgroup\\\")) tb.pop(); else tb.error(this); break; case \\\"option\\\": if (tb.currentElement().nodeName().equals(\\\"option\\\")) tb.pop(); else tb.error(this); break; case \\\"select\\\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\\\"html\\\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \\\"caption\\\", \\\"table\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\", \\\"td\\\", \\\"th\\\")) { tb.error(this); tb.processEndTag(\\\"select\\\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \\\"caption\\\", \\\"table\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\", \\\"td\\\", \\\"th\\\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\\\"select\\\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\\\"html\\\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch(start.normalName()) { case \\\"html\\\": return tb.process(start, InBody); case \\\"frameset\\\": tb.insert(start); break; case \\\"frame\\\": tb.insertEmpty(start); break; case \\\"noframes\\\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\\\"frameset\\\")) { if (tb.currentElement().nodeName().equals(\\\"html\\\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\\\"frameset\\\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\\\"html\\\")) { tb.error(this); return true; } } else { tb.error(this); return false; } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\\\"html\\\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"noframes\\\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"noframes\\\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; }",
                    "boolean process(Token t, HtmlTreeBuilder tb) { return true; }"
                ],
                "top_similar_methods": [
                    [
                        1.0000001192092896,
                        "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType(tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); } return true; }"
                    ],
                    [
                        0.9776461124420166,
                        "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\\\"html\\\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \\\"head\\\", \\\"body\\\", \\\"html\\\", \\\"br\\\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }"
                    ],
                    [
                        0.9718533158302307,
                        "private static void handleDataEndTag(Tokeniser t, CharacterReader r, TokeniserState elseTransition) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name); t.dataBuffer.append(name); return; } boolean needsExitTransition = false; if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch(c) { case '\\t': case '\\n': case '\\r': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); needsExitTransition = true; } } else { needsExitTransition = true; } if (needsExitTransition) { t.emit(\\\"</\\\" + t.dataBuffer.toString()); t.transition(elseTransition); } }"
                    ],
                    [
                        0.9711065292358398,
                        "private static void handleDataDoubleEscapeTag(Tokeniser t, CharacterReader r, TokeniserState primary, TokeniserState fallback) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.dataBuffer.append(name); t.emit(name); return; } char c = r.consume(); switch(c) { case '\\t': case '\\n': case '\\r': case '\\f': case ' ': case '/': case '>': if (t.dataBuffer.toString().equals(\\\"script\\\")) t.transition(primary); else t.transition(fallback); t.emit(c); break; default: r.unconsume(); t.transition(fallback); } }"
                    ],
                    [
                        0.9666288495063782,
                        "public boolean hasClass(String className) { final String classAttr = attributes().getIgnoreCase(\\\"class\\\"); final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }"
                    ],
                    [
                        0.96360182762146,
                        "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() - 1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true; }"
                    ],
                    [
                        0.9627817869186401,
                        "void read(Tokeniser t, CharacterReader r) { String value = r.consumeToAny(attributeDoubleValueCharsSorted); if (value.length() > 0) t.tagPending.appendAttributeValue(value); else t.tagPending.setEmptyAttributeValue(); char c = r.consume(); switch(c) { case '\\\"': t.transition(AfterAttributeValue_quoted); break; case '&': int[] ref = t.consumeCharacterReference('\\\"', true); if (ref != null) t.tagPending.appendAttributeValue(ref); else t.tagPending.appendAttributeValue('&'); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); break; case eof: t.eofError(this); t.transition(Data); break; } }"
                    ],
                    [
                        0.9626094102859497,
                        "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch(c) { case '\\'': t.transition(AfterDoctypeSystemIdentifier); break; case nullChar: t.error(this); t.doctypePending.systemIdentifier.append(replacementChar); break; case '>': t.error(this); t.doctypePending.forceQuirks = true; t.emitDoctypePending(); t.transition(Data); break; case eof: t.eofError(this); t.doctypePending.forceQuirks = true; t.emitDoctypePending(); t.transition(Data); break; default: t.doctypePending.systemIdentifier.append(c); } }"
                    ],
                    [
                        0.9622589945793152,
                        "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch(c) { case '\\'': t.transition(AfterDoctypePublicIdentifier); break; case nullChar: t.error(this); t.doctypePending.publicIdentifier.append(replacementChar); break; case '>': t.error(this); t.doctypePending.forceQuirks = true; t.emitDoctypePending(); t.transition(Data); break; case eof: t.eofError(this); t.doctypePending.forceQuirks = true; t.emitDoctypePending(); t.transition(Data); break; default: t.doctypePending.publicIdentifier.append(c); } }"
                    ]
                ],
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            }
        ],
        "trigger_test": {
            "org.jsoup.parser.HtmlParserTest::testTemplateInsideTable": {
                "path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
                "function_name": "testTemplateInsideTable",
                "src": "  @Test public void testTemplateInsideTable() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/table-polymer-template.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n        doc.outputSettings().prettyPrint(true);\n\n        Elements templates = doc.body().getElementsByTag(\"template\");\n        for (Element template : templates) {\n            assertTrue(template.childNodes().size() > 1);\n        }\n  }",
                "error_msg": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.jsoup.parser.HtmlParserTest.testTemplateInsideTable(HtmlParserTest.java:1045)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jsoup.parser.HtmlParserTest.testTemplateInsideTable(HtmlParserTest.java:1045)  assertTrue(template.childNodes().size() > 1);"
            }
        },
        "evaluation_done": true
    }
}