{
    "Jsoup-18": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/jsoup/parser/CharacterReader.java",
                "start_loc": 16,
                "end_loc": 21,
                "buggy_function": "    CharacterReader(String input) {\n        Validate.notNull(input);\n\n        this.input = input;\n        this.length = input.length();\n    }\n",
                "fixed_function": "    CharacterReader(String input) {\n        Validate.notNull(input);\n        input = input.replaceAll(\"\\r\\n?\", \"\\n\"); // normalise carriage returns to newlines\n\n        this.input = input;\n        this.length = input.length();\n    }\n",
                "comment": "",
                "normalized_body": [
                    "    CharacterReader(String input) {\n        Validate.notNull(input);\n\n        this.input = input;\n        this.length = input.length();\n    }\n"
                ],
                "isConstructor": true,
                "top_similar_methods": [
                    [
                        0.9239242076873779,
                        "@Test public void handlesSolidusAtAttributeEnd() { String h = \\\"<a href=/>link</a>\\\"; Document doc = Jsoup.parse(h); assertEquals(\\\"<a href=\\\\\"/\\\\\">link</a>\\\", doc.body().html()); }"
                    ],
                    [
                        0.9238548874855042,
                        "@Test public void dropsUnresolvableRelativeLinks() { String html = \\\"<a href='/foo'>Link</a>\\\"; String clean = Jsoup.clean(html, Whitelist.basic()); assertEquals(\\\"<a rel=\\\\\"nofollow\\\\\">Link</a>\\\", clean); }"
                    ],
                    [
                        0.9224423170089722,
                        "@Test public void testFontFlowContents() { Document doc = Jsoup.parse(\\\"<font>Hello <div>there</div> <span>now</span></font>\\\"); assertEquals(\\\"<font>Hello <div>there</div> <span>now</span></font>\\\", TextUtil.stripNewlines(doc.body().html())); }"
                    ],
                    [
                        0.921856164932251,
                        "@Test public void testRemove() { Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); Element p = doc.select(\\\"p\\\").first(); p.childNode(0).remove(); assertEquals(\\\"two three\\\", p.text()); assertEquals(\\\"<span>two</span> three\\\", TextUtil.stripNewlines(p.html())); }"
                    ],
                    [
                        0.9216840267181396,
                        "@Test public void testRelaxedTags() { Document doc = Jsoup.parse(\\\"<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>\\\"); assertEquals(\\\"<abc_def id=\\\\\"1\\\\\">Hello</abc_def> <abc-def>There</abc-def>\\\", TextUtil.stripNewlines(doc.body().html())); }"
                    ],
                    [
                        0.9206914305686951,
                        "void advance() { pos++; }"
                    ],
                    [
                        0.9193329811096191,
                        "@Test public void testYahooArticle() throws IOException { File in = getFile(\\\"/htmltests/yahoo-article-1.html\\\"); Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china\\\"); Element p = doc.select(\\\"p:contains(Volt will be sold in the United States\\\").first(); assertEquals(\\\"In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.\\\", p.text()); }"
                    ]
                ],
                "directly_related_tests": [
                    "org.jsoup.parser.ParserTest::handlesNewlinesAndWhitespaceInTag"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n\n    CharacterReader(String input) {\n        Validate.notNull(input);\n\n        this.input = input;\n        this.length = input.length();\n    }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    @Test public void handlesNewlinesAndWhitespaceInTag() {\n        Document doc = Jsoup.parse(\"<a \\n href=\\\"one\\\" \\r\\n id=\\\"two\\\" \\f >\");\n        assertEquals(\"<a href=\\\"one\\\" id=\\\"two\\\"></a>\", doc.body().html());\n    }\n```\n#Error message: junit.framework.AssertionFailedError: expected:<<a href=\"one\" []id=\"two\"></a>> but was:<<a href=\"one\" [=\"\" ]id=\"two\"></a>>\n\tat org.jsoup.parser.ParserTest.handlesNewlinesAndWhitespaceInTag(ParserTest.java:619)  assertEquals(\"<a href=\\\"one\\\" id=\\\"two\\\"></a>\", doc.body().html());\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    this.input = input.replaceAll(\"[\\\\n\\\\r\\\\f]+\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    // Normalize line breaks and whitespace in tags\n    this.input = input.replaceAll(\"[\\\\n\\\\r\\\\f]+\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    // Normalize the input string by removing extra whitespace around attributes\n    this.input = input.replaceAll(\"\\\\s*(\\r\\n|\\r|\\n|\\\\f)\\\\s*\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    // Normalize input to handle newlines and whitespace within tags\n    this.input = input.replaceAll(\"[\\\\n\\\\r\\\\f]\", \"\");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    // Remove unwanted characters like newline, carriage return, and form feed from input\n    this.input = input.replaceAll(\"[\\\\n\\\\r\\\\f]\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    this.input = input.replaceAll(\"[\\n\\r\\f]\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n    \n    // Normalize line breaks for consistent parsing\n    input = input.replaceAll(\"[\\\\r\\\\n\\\\f]\", \" \");\n\n    this.input = input;\n    this.length = input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n    \n    // Normalize whitespace characters to a single space\n    this.input = input.replaceAll(\"[\\\\s]+\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    // Normalize whitespace that includes newlines and other control characters\n    this.input = input.replaceAll(\"[\\\\s&&[^ ]]+\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    this.input = input.replaceAll(\"[\\n\\r\\f]\", \"\");\n    this.length = this.input.length();\n}\n"
                        ],
                        "plausible_patches": [
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    this.input = input.replaceAll(\"[\\\\n\\\\r\\\\f]+\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    // Normalize the input string by removing extra whitespace around attributes\n    this.input = input.replaceAll(\"\\\\s*(\\r\\n|\\r|\\n|\\\\f)\\\\s*\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    // Normalize input to handle newlines and whitespace within tags\n    this.input = input.replaceAll(\"[\\\\n\\\\r\\\\f]\", \"\");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    // Remove unwanted characters like newline, carriage return, and form feed from input\n    this.input = input.replaceAll(\"[\\\\n\\\\r\\\\f]\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    this.input = input.replaceAll(\"[\\n\\r\\f]\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n    \n    // Normalize line breaks for consistent parsing\n    input = input.replaceAll(\"[\\\\r\\\\n\\\\f]\", \" \");\n\n    this.input = input;\n    this.length = input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n    \n    // Normalize whitespace characters to a single space\n    this.input = input.replaceAll(\"[\\\\s]+\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    // Normalize whitespace that includes newlines and other control characters\n    this.input = input.replaceAll(\"[\\\\s&&[^ ]]+\", \" \");\n    this.length = this.input.length();\n}\n",
                            "\nCharacterReader(String input) {\n    Validate.notNull(input);\n\n    this.input = input.replaceAll(\"[\\n\\r\\f]\", \"\");\n    this.length = this.input.length();\n}\n"
                        ]
                    }
                }
            },
            {
                "path": "src/main/java/org/jsoup/parser/CharacterReader.java",
                "start_loc": 98,
                "end_loc": 102,
                "buggy_function": "    String consumeToEnd() {\n        String data = input.substring(pos, input.length() - 1);\n        pos = input.length();\n        return data;\n    }\n",
                "fixed_function": "    String consumeToEnd() {\n        String data = input.substring(pos, input.length());\n        pos = input.length();\n        return data;\n    }\n",
                "comment": "",
                "normalized_body": [
                    "String consumeToEnd() { String data = input.substring(pos, input.length() - 1); pos = input.length(); return data; }"
                ],
                "top_similar_methods": [
                    [
                        0.9999998807907104,
                        "String consumeToEnd() { String data = input.substring(pos, input.length() - 1); pos = input.length(); return data; }"
                    ],
                    [
                        0.9526999592781067,
                        "String consumeAsString() { return input.substring(pos, pos++); }"
                    ],
                    [
                        0.9512449502944946,
                        "boolean isAppropriateEndTagToken() { return tagPending.tagName.equals(lastStartTag.tagName); }"
                    ],
                    [
                        0.9455569982528687,
                        "char consume() { char val = isEmpty() ? EOF : input.charAt(pos); pos++; return val; }"
                    ],
                    [
                        0.9443945288658142,
                        "boolean matchesLetter() { if (isEmpty()) return false; char c = input.charAt(pos); return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); }"
                    ],
                    [
                        0.9390901327133179,
                        "String appropriateEndTagName() { return lastStartTag.tagName; }"
                    ],
                    [
                        0.9372277855873108,
                        "void setBaseUri(Element base) { String href = base.absUrl(\\\"href\\\"); if (href.length() != 0) { baseUri = href; doc.setBaseUri(href); } }"
                    ]
                ],
                "directly_related_tests": [
                    "org.jsoup.parser.CharacterReaderTest::consumeToEnd"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n\n    String consumeToEnd() {\n        String data = input.substring(pos, input.length() - 1);\n        pos = input.length();\n        return data;\n    }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    @Test public void consumeToEnd() {\n        String in = \"one two three\";\n        CharacterReader r = new CharacterReader(in);\n        String toEnd = r.consumeToEnd();\n        assertEquals(in, toEnd);\n        assertTrue(r.isEmpty());\n    }\n```\n#Error message: junit.framework.AssertionFailedError: expected:<one two thre[e]> but was:<one two thre[]>\n\tat org.jsoup.parser.CharacterReaderTest.consumeToEnd(CharacterReaderTest.java:77)  assertEquals(in, toEnd);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\nString consumeToEnd() {\n    String data = input.substring(pos, input.length());\n    pos = input.length();\n    return data;\n}\n",
                            "\nString consumeToEnd() {\n    String data = input.substring(pos, input.length());\n    pos = input.length();\n    return data;\n}\n",
                            "\nString consumeToEnd() {\n    String data = input.substring(pos, input.length());\n    pos = input.length();\n    return data;\n}\n",
                            "\nString consumeToEnd() {\n    String data = input.substring(pos);\n    pos = input.length();\n    return data;\n}\n",
                            "\nString consumeToEnd() {\n    String data = input.substring(pos, input.length());\n    pos = input.length();\n    return data;\n}\n",
                            "\n    String consumeToEnd() {\n        String data = input.substring(pos);\n        pos = input.length();\n        return data;\n    }\n",
                            "\nString consumeToEnd() {\n    String data = input.substring(pos);\n    pos = input.length();\n    return data;\n}\n",
                            "\nString consumeToEnd() {\n    String data = input.substring(pos);\n    pos = input.length();\n    return data;\n}\n",
                            "\nString consumeToEnd() {\n    String data = input.substring(pos, input.length());\n    pos = input.length();\n    return data;\n}\n",
                            "\nString consumeToEnd() {\n    String data = input.substring(pos);\n    pos = input.length();\n    return data;\n}\n"
                        ],
                        "plausible_patches": [
                            "\nString consumeToEnd() {\n    String data = input.substring(pos, input.length());\n    pos = input.length();\n    return data;\n}\n",
                            "\nString consumeToEnd() {\n    String data = input.substring(pos);\n    pos = input.length();\n    return data;\n}\n"
                        ]
                    }
                }
            }
        ],
        "trigger_test": {
            "org.jsoup.parser.CharacterReaderTest::handleCarriageReturnAsLineFeed": {
                "path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
                "function_name": "handleCarriageReturnAsLineFeed",
                "src": "    @Test public void handleCarriageReturnAsLineFeed() {\n        String in = \"one \\r two \\r\\n three\";\n        CharacterReader r = new CharacterReader(in);\n\n        String first = r.consumeTo('\\n');\n        assertEquals(\"one \", first);\n        assertEquals(\"\\n two \\n three\", r.consumeToEnd());\n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<one []> but was:<one [\n two \n]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.jsoup.parser.CharacterReaderTest.handleCarriageReturnAsLineFeed(CharacterReaderTest.java:69)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<one []> but was:<one [\n two \n]>\n\tat org.jsoup.parser.CharacterReaderTest.handleCarriageReturnAsLineFeed(CharacterReaderTest.java:69)  assertEquals(\"one \", first);"
            },
            "org.jsoup.parser.CharacterReaderTest::consumeToEnd": {
                "path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
                "function_name": "consumeToEnd",
                "src": "    @Test public void consumeToEnd() {\n        String in = \"one two three\";\n        CharacterReader r = new CharacterReader(in);\n        String toEnd = r.consumeToEnd();\n        assertEquals(in, toEnd);\n        assertTrue(r.isEmpty());\n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<one two thre[e]> but was:<one two thre[]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.jsoup.parser.CharacterReaderTest.consumeToEnd(CharacterReaderTest.java:77)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<one two thre[e]> but was:<one two thre[]>\n\tat org.jsoup.parser.CharacterReaderTest.consumeToEnd(CharacterReaderTest.java:77)  assertEquals(in, toEnd);"
            },
            "org.jsoup.parser.ParserTest::handlesNewlinesAndWhitespaceInTag": {
                "path": "src/test/java/org/jsoup/parser/ParserTest.java",
                "function_name": "handlesNewlinesAndWhitespaceInTag",
                "src": "    @Test public void handlesNewlinesAndWhitespaceInTag() {\n        Document doc = Jsoup.parse(\"<a \\n href=\\\"one\\\" \\r\\n id=\\\"two\\\" \\f >\");\n        assertEquals(\"<a href=\\\"one\\\" id=\\\"two\\\"></a>\", doc.body().html());\n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<<a href=\"one\" []id=\"two\"></a>> but was:<<a href=\"one\" [=\"\" ]id=\"two\"></a>>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.jsoup.parser.ParserTest.handlesNewlinesAndWhitespaceInTag(ParserTest.java:619)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<<a href=\"one\" []id=\"two\"></a>> but was:<<a href=\"one\" [=\"\" ]id=\"two\"></a>>\n\tat org.jsoup.parser.ParserTest.handlesNewlinesAndWhitespaceInTag(ParserTest.java:619)  assertEquals(\"<a href=\\\"one\\\" id=\\\"two\\\"></a>\", doc.body().html());"
            }
        },
        "evaluation_done": true
    }
}