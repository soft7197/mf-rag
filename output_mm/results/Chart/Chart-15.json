{
    "Chart-15": {
        "function_num": 2,
        "functions": [
            {
                "path": "source/org/jfree/chart/plot/PiePlot.java",
                "start_loc": 1377,
                "end_loc": 1388,
                "buggy_function": "    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            Number explode = (Number) this.explodePercentages.get(key);\n            if (explode != null) {\n                result = Math.max(result, explode.doubleValue());   \n            }\n        }\n        return result;\n    }\n",
                "fixed_function": "    public double getMaximumExplodePercent() {\n        if (this.dataset == null) {\n            return 0.0;\n        }\n        double result = 0.0;\n        Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            Number explode = (Number) this.explodePercentages.get(key);\n            if (explode != null) {\n                result = Math.max(result, explode.doubleValue());   \n            }\n        }\n        return result;\n    }\n",
                "comment": "    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n",
                "normalized_body": [
                    "public double getMaximumExplodePercent() { double result = 0.0; Iterator iterator = this.dataset.getKeys().iterator(); while (iterator.hasNext()) { Comparable key = (Comparable) iterator.next(); Number explode = (Number) this.explodePercentages.get(key); if (explode != null) { result = Math.max(result, explode.doubleValue()); } } return result; }"
                ],
                "top_similar_methods": [
                    [
                        0.9999999403953552,
                        "public double getMaximumExplodePercent() { double result = 0.0; Iterator iterator = this.dataset.getKeys().iterator(); while (iterator.hasNext()) { Comparable key = (Comparable) iterator.next(); Number explode = (Number) this.explodePercentages.get(key); if (explode != null) { result = Math.max(result, explode.doubleValue()); } } return result; }"
                    ],
                    [
                        0.9839953184127808,
                        "public String getURL(Comparable key, int mapIndex) { String result = null; if (mapIndex < getListCount()) { Map urlMap = (Map) this.urls.get(mapIndex); if (urlMap != null) { result = (String) urlMap.get(key); } } return result; }"
                    ],
                    [
                        0.9831991195678711,
                        "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.dataset != null) { if (this.renderer != null) { int seriesCount = this.dataset.getSeriesCount(); for (int i = 0; i < seriesCount; i++) { LegendItem item = this.renderer.getLegendItem(i); result.add(item); } } } return result; }"
                    ],
                    [
                        0.9828870296478271,
                        "public List getGroups() { List result = new ArrayList(); result.add(this.defaultGroup); Iterator iterator = this.groups.iterator(); while (iterator.hasNext()) { Comparable group = (Comparable) iterator.next(); if (!result.contains(group)) { result.add(group); } } return result; }"
                    ],
                    [
                        0.9823440313339233,
                        "public Object clone() throws CloneNotSupportedException { XYBarRenderer result = (XYBarRenderer) super.clone(); if (this.gradientPaintTransformer != null) { result.gradientPaintTransformer = (GradientPaintTransformer) ObjectUtilities.clone(this.gradientPaintTransformer); } result.legendBar = ShapeUtilities.clone(this.legendBar); return result; }"
                    ],
                    [
                        0.9819430112838745,
                        "public int getIndex(Comparable key) { if (key == null) { throw new IllegalArgumentException(\\\"Null 'key' argument.\\\"); } int i = 0; Iterator iterator = this.data.iterator(); while (iterator.hasNext()) { KeyedObject ko = (KeyedObject) iterator.next(); if (ko.getKey().equals(key)) { return i; } i++; } return -1; }"
                    ],
                    [
                        0.9809136390686035,
                        "public LegendItemCollection getLegendItems() { LegendItemCollection result = getFixedLegendItems(); if (result == null) { result = new LegendItemCollection(); if (this.subplots != null) { Iterator iterator = this.subplots.iterator(); while (iterator.hasNext()) { CategoryPlot plot = (CategoryPlot) iterator.next(); LegendItemCollection more = plot.getLegendItems(); result.addAll(more); } } } return result; }"
                    ]
                ],
                "non_directly_related_tests": [
                    "org.jfree.chart.plot.junit.PiePlot3DTests::testDrawWithNullDataset"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below are buggy method(s) from a large Java project. These methods cause one or more test failures.\nYour task is to fix the bugs in these methods. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Methods\n\n\n```java\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            Number explode = (Number) this.explodePercentages.get(key);\n            if (explode != null) {\n                result = Math.max(result, explode.doubleValue());   \n            }\n        }\n        return result;\n    }\n\n```\n\n```java\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n\n```\n\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testDrawWithNullDataset() {\n        JFreeChart chart = ChartFactory.createPieChart3D(\"Test\", null, true, \n                false, false);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }\n```\n#Error message from the test method 1: junit.framework.AssertionFailedError\n\n---\n\n## Your Goal\n\nFix the buggy methods. Return only the fixed Java methods. Do not include explanations or other text.\n",
                        "patches": [
                            "\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        if (this.dataset != null) {\n            Iterator iterator = this.dataset.getKeys().iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                Number explode = (Number) this.explodePercentages.get(key);\n                if (explode != null) {\n                    result = Math.max(result, explode.doubleValue());   \n                }\n            }\n        }\n        return result;\n    }\n",
                            "\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        if (this.dataset != null) {\n            Iterator iterator = this.dataset.getKeys().iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                Number explode = (Number) this.explodePercentages.get(key);\n                if (explode != null) {\n                    result = Math.max(result, explode.doubleValue());   \n                }\n            }\n        }\n        return result;\n    }\n\n",
                            "\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            Number explode = (Number) this.explodePercentages.get(key);\n            if (explode != null) {\n                result = Math.max(result, explode.doubleValue());   \n            }\n        }\n        return result;\n    }\n\n",
                            "\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        if (this.dataset != null && this.dataset.getKeys() != null) {\n            Iterator iterator = this.dataset.getKeys().iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                Number explode = (Number) this.explodePercentages.get(key);\n                if (explode != null) {\n                    result = Math.max(result, explode.doubleValue());   \n                }\n            }\n        }\n        return result;\n    }\n\n",
                            "\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        if (this.dataset != null) {\n            Iterator iterator = this.dataset.getKeys().iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                Number explode = (Number) this.explodePercentages.get(key);\n                if (explode != null) {\n                    result = Math.max(result, explode.doubleValue());\n                }\n            }\n        }\n        return result;\n    }\n\n",
                            "\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        if (this.dataset == null) {\n            return result;\n        }\n        Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            Number explode = (Number) this.explodePercentages.get(key);\n            if (explode != null) {\n                result = Math.max(result, explode.doubleValue());   \n            }\n        }\n        return result;\n    }\n\n",
                            "\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        if (this.dataset != null) {\n            Iterator iterator = this.dataset.getKeys().iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                Number explode = (Number) this.explodePercentages.get(key);\n                if (explode != null) {\n                    result = Math.max(result, explode.doubleValue());\n                }\n            }\n        }\n        return result;\n    }\n\n",
                            "\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        if (this.dataset != null) {\n            Iterator iterator = this.dataset.getKeys().iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                Number explode = (Number) this.explodePercentages.get(key);\n                if (explode != null) {\n                    result = Math.max(result, explode.doubleValue());   \n                }\n            }\n        }\n        return result;\n    }\n\n",
                            "\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        if (this.dataset != null) {\n            Iterator iterator = this.dataset.getKeys().iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                Number explode = (Number) this.explodePercentages.get(key);\n                if (explode != null) {\n                    result = Math.max(result, explode.doubleValue());   \n                }\n            }\n        }\n        return result;\n    }\n\n",
                            "\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        if (this.dataset != null) {\n            Iterator iterator = this.dataset.getKeys().iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                Number explode = (Number) this.explodePercentages.get(key);\n                if (explode != null) {\n                    result = Math.max(result, explode.doubleValue());   \n                }\n            }\n        }\n        return result;\n    }\n\n"
                        ],
                        "plausible_patches": [
                            "\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        if (this.dataset != null) {\n            Iterator iterator = this.dataset.getKeys().iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                Number explode = (Number) this.explodePercentages.get(key);\n                if (explode != null) {\n                    result = Math.max(result, explode.doubleValue());   \n                }\n            }\n        }\n        return result;\n    }\n"
                        ]
                    }
                }
            },
            {
                "path": "source/org/jfree/chart/plot/PiePlot.java",
                "start_loc": 2046,
                "end_loc": 2056,
                "buggy_function": "    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n",
                "fixed_function": "    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (this.dataset != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        }\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n",
                "comment": "    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n",
                "normalized_body": [
                    "public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, Integer index, PlotRenderingInfo info) { PiePlotState state = new PiePlotState(info); state.setPassesRequired(2); state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset())); state.setLatestAngle(plot.getStartAngle()); return state; }"
                ],
                "top_similar_methods": [
                    [
                        1.000000238418579,
                        "public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, Integer index, PlotRenderingInfo info) { PiePlotState state = new PiePlotState(info); state.setPassesRequired(2); state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset())); state.setLatestAngle(plot.getStartAngle()); return state; }"
                    ],
                    [
                        0.9798935651779175,
                        "public void testCloning() { CompassPlot p1 = new CompassPlot(new DefaultValueDataset(15.0)); CompassPlot p2 = null; try { p2 = (CompassPlot) p1.clone(); } catch (CloneNotSupportedException e) { e.printStackTrace(); } assertTrue(p1 != p2); assertTrue(p1.getClass() == p2.getClass()); assertTrue(p1.equals(p2)); }"
                    ],
                    [
                        0.979232907295227,
                        "public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { if (useAnchor) { double sourceX = source.getX(); double anchorX = this.rangeAxis.java2DToValue(sourceX, info.getDataArea(), RectangleEdge.LEFT); this.rangeAxis.resizeRange(factor, anchorX); } else { this.rangeAxis.resizeRange(factor); } }"
                    ],
                    [
                        0.9773575067520142,
                        "public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source) { XYPlot subplot = findSubplot(info, source); if (subplot != null) { subplot.zoomRangeAxes(factor, info, source); } else { Iterator iterator = getSubplots().iterator(); while (iterator.hasNext()) { subplot = (XYPlot) iterator.next(); subplot.zoomRangeAxes(factor, info, source); } } }"
                    ],
                    [
                        0.9765978455543518,
                        "public static JFreeChart createPieChart(String title, PieDataset dataset, boolean legend, boolean tooltips, boolean urls) { PiePlot plot = new PiePlot(dataset); plot.setLabelGenerator(new StandardPieSectionLabelGenerator()); plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0)); if (tooltips) { plot.setToolTipGenerator(new StandardPieToolTipGenerator()); } if (urls) { plot.setURLGenerator(new StandardPieURLGenerator()); } return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend); }"
                    ],
                    [
                        0.9760403633117676,
                        "public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { if (useAnchor) { double sourceX = source.getX(); double anchorX = this.domainAxis.java2DToValue(sourceX, info.getDataArea(), RectangleEdge.BOTTOM); this.domainAxis.resizeRange(factor, anchorX); } else { this.domainAxis.resizeRange(factor); } }"
                    ],
                    [
                        0.9754435420036316,
                        "public void update(RegularTimePeriod period, Number value) { TimeSeriesDataItem temp = new TimeSeriesDataItem(period, value); int index = Collections.binarySearch(this.data, temp); if (index >= 0) { TimeSeriesDataItem pair = (TimeSeriesDataItem) this.data.get(index); pair.setValue(value); fireSeriesChanged(); } else { throw new SeriesException(\\\"TimeSeries.update(TimePeriod, Number): period does not exist.\\\"); } }"
                    ]
                ],
                "non_directly_related_tests": [
                    "org.jfree.chart.plot.junit.PiePlot3DTests::testDrawWithNullDataset"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below are buggy method(s) from a large Java project. These methods cause one or more test failures.\nYour task is to fix the bugs in these methods. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Methods\n\n\n```java\n    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n\n    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            Number explode = (Number) this.explodePercentages.get(key);\n            if (explode != null) {\n                result = Math.max(result, explode.doubleValue());   \n            }\n        }\n        return result;\n    }\n\n```\n\n```java\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n\n```\n\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testDrawWithNullDataset() {\n        JFreeChart chart = ChartFactory.createPieChart3D(\"Test\", null, true, \n                false, false);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }\n```\n#Error message from the test method 1: junit.framework.AssertionFailedError\n\n---\n\n## Your Goal\n\nFix the buggy methods. Return only the fixed Java methods. Do not include explanations or other text.\n",
                        "patches": [
                            "\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (plot.getDataset() != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        } else {\n            state.setTotal(0.0);\n        }\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n",
                            "\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n\n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (plot != null && plot.getDataset() != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        } else {\n            state.setTotal(0.0);\n        }\n        state.setLatestAngle(plot != null ? plot.getStartAngle() : 0.0);\n        return state;\n        \n    }\n",
                            "\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (plot.getDataset() != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        } else {\n            state.setTotal(0.0);\n        }\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n\n",
                            "\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (plot.getDataset() != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        } else {\n            state.setTotal(0.0);\n        }\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n\n",
                            "\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (plot.getDataset() != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        } else {\n            state.setTotal(0);\n        }\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n\n",
                            "\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (plot.getDataset() != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        } else {\n            state.setTotal(0.0);\n        }\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n\n",
                            "\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n\n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        \n        if (plot.getDataset() != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        } else {\n            state.setTotal(0.0);\n        }\n\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n\n    }\n\n",
                            "\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (plot.getDataset() != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        } else {\n            state.setTotal(0.0);\n        }\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n\n",
                            "\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (plot != null && plot.getDataset() != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        } else {\n            state.setTotal(0.0);\n        }\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n\n",
                            "\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (plot.getDataset() != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        } else {\n            state.setTotal(0.0);\n        }\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n\n"
                        ],
                        "plausible_patches": [
                            "\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (plot.getDataset() != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        } else {\n            state.setTotal(0.0);\n        }\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n"
                        ]
                    }
                }
            }
        ],
        "trigger_test": {
            "org.jfree.chart.plot.junit.PiePlot3DTests::testDrawWithNullDataset": {
                "path": "tests/org/jfree/chart/plot/junit/PiePlot3DTests.java",
                "function_name": "testDrawWithNullDataset",
                "src": "    public void testDrawWithNullDataset() {\n        JFreeChart chart = ChartFactory.createPieChart3D(\"Test\", null, true, \n                false, false);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
                "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.plot.junit.PiePlot3DTests.testDrawWithNullDataset(PiePlot3DTests.java:151)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.plot.junit.PiePlot3DTests.testDrawWithNullDataset(PiePlot3DTests.java:151)  assertTrue(success);"
            }
        },
        "evaluation_done": true
    }
}