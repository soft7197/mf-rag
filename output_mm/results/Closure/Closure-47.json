{
    "Closure-47": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
                "start_loc": 482,
                "end_loc": 496,
                "buggy_function": "  private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n      return null;\n    } else {\n      // Adjust the line/column here to be start at 1.\n      Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine())\n        .setColumnPosition(entry.getSourceColumn());\n      if (entry.getNameId() != UNMAPPED) {\n        x.setIdentifier(names[entry.getNameId()]);\n      }\n      return x.build();\n    }\n  }\n",
                "fixed_function": "  private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n      return null;\n    } else {\n      // Adjust the line/column here to be start at 1.\n      Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine() + 1)\n        .setColumnPosition(entry.getSourceColumn() + 1);\n      if (entry.getNameId() != UNMAPPED) {\n        x.setIdentifier(names[entry.getNameId()]);\n      }\n      return x.build();\n    }\n  }\n",
                "comment": "  /**\n   * Creates an \"OriginalMapping\" object for the given entry object.\n   */\n",
                "normalized_body": [
                    "private OriginalMapping getOriginalMappingForEntry(Entry entry) { if (entry.getSourceFileId() == UNMAPPED) { return null; } else { Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn()); if (entry.getNameId() != UNMAPPED) { x.setIdentifier(names[entry.getNameId()]); } return x.build(); } }"
                ],
                "top_similar_methods": [
                    [
                        1.0,
                        "private OriginalMapping getOriginalMappingForEntry(Entry entry) { if (entry.getSourceFileId() == UNMAPPED) { return null; } else { Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn()); if (entry.getNameId() != UNMAPPED) { x.setIdentifier(names[entry.getNameId()]); } return x.build(); } }"
                    ],
                    [
                        0.9742880463600159,
                        "private void addInvalidatingType(JSType type) { type = type.restrictByNotNullOrUndefined(); if (type.isUnionType()) { for (JSType alt : type.toMaybeUnionType().getAlternates()) { addInvalidatingType(alt); } } invalidatingTypes.add(type); ObjectType objType = ObjectType.cast(type); if (objType != null && objType.isInstanceType()) { invalidatingTypes.add(objType.getImplicitPrototype()); } }"
                    ],
                    [
                        0.9689111709594727,
                        "private ConcreteType createType(Node name, ConcreteScope scope) { Preconditions.checkNotNull(name); Preconditions.checkArgument(name.isName()); if (name.getJSType() == null) { return ConcreteType.ALL; } if ((name.getFirstChild() != null) && (name.getFirstChild().isFunction())) { return createConcreteFunction(name.getFirstChild(), scope); } return createType(name.getJSType()); }"
                    ],
                    [
                        0.9679521918296814,
                        "private void checkAssignment(NodeTraversal t, Node n) { if (n.getFirstChild().isName()) { if (\\\"arguments\\\".equals(n.getFirstChild().getString())) { t.report(n, ARGUMENTS_ASSIGNMENT); } else if (\\\"eval\\\".equals(n.getFirstChild().getString())) { if (noCajaChecks) { t.report(n, EVAL_ASSIGNMENT); } } } }"
                    ],
                    [
                        0.9660676121711731,
                        "@Override protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) { List<Callback> callbacks = Lists.newArrayList(); if (options.checkUnreachableCode.isOn()) { callbacks.add(new CheckUnreachableCode(compiler, options.checkUnreachableCode)); } if (options.checkMissingReturn.isOn() && options.checkTypes) { callbacks.add(new CheckMissingReturn(compiler, options.checkMissingReturn)); } return combineChecks(compiler, callbacks); }"
                    ],
                    [
                        0.965785801410675,
                        "private void maybeInitMetaDataFromJsDocOrHelpVar(Builder builder, Node varNode, @Nullable Node parentOfVarNode) throws MalformedException { if (maybeInitMetaDataFromJsDoc(builder, varNode)) { return; } if ((parentOfVarNode != null) && maybeInitMetaDataFromHelpVar(builder, parentOfVarNode.getChildBefore(varNode))) { return; } maybeInitMetaDataFromHelpVar(builder, varNode.getNext()); }"
                    ],
                    [
                        0.9652678370475769,
                        "private Name recordStaticNameDefinition(NodeTraversal t, String name, JSType type, Node n, Node parent, Node gParent, Node rValue) { if (getNamedContainingFunction() != graph.MAIN) { } if (type.isConstructor()) { return recordClassConstructorOrInterface(name, type.toMaybeFunctionType(), n, parent, parent.getParent(), rValue); } else { Name symbol = graph.defineNameIfNotExists(name, isExtern); symbol.setType(type); if (n.isAssign()) { symbol.addAssignmentDeclaration(n); } else { symbol.addFunctionDeclaration(n); } return symbol; } }"
                    ]
                ],
                "non_directly_related_tests": [],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below are buggy method(s) from a large Java project. These methods cause one or more test failures.\nYour task is to fix the bugs in these methods. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Methods\n\n\n```java\n  /**\n   * Creates an \"OriginalMapping\" object for the given entry object.\n   */\n\n  private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n      return null;\n    } else {\n      // Adjust the line/column here to be start at 1.\n      Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine())\n        .setColumnPosition(entry.getSourceColumn());\n      if (entry.getNameId() != UNMAPPED) {\n        x.setIdentifier(names[entry.getNameId()]);\n      }\n      return x.build();\n    }\n  }\n\n```\n\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n  public void testParseSourceMetaMap() throws Exception {\n    final String INPUT1 = \"file1\";\n    final String INPUT2 = \"file2\";\n    LinkedHashMap<String, String> inputs = Maps.newLinkedHashMap();\n    inputs.put(INPUT1, \"var __FOO__ = 1;\");\n    inputs.put(INPUT2, \"var __BAR__ = 2;\");\n    RunResult result1 = compile(inputs.get(INPUT1), INPUT1);\n    RunResult result2 = compile(inputs.get(INPUT2), INPUT2);\n\n    final String MAP1 = \"map1\";\n    final String MAP2 = \"map2\";\n    final LinkedHashMap<String, String> maps = Maps.newLinkedHashMap();\n    maps.put(MAP1, result1.sourceMapFileContent);\n    maps.put(MAP2, result2.sourceMapFileContent);\n\n    List<SourceMapSection> sections = Lists.newArrayList();\n\n    StringBuilder output = new StringBuilder();\n    FilePosition offset = appendAndCount(output, result1.generatedSource);\n    sections.add(SourceMapSection.forURL(MAP1, 0, 0));\n    output.append(result2.generatedSource);\n    sections.add(\n        SourceMapSection.forURL(MAP2, offset.getLine(), offset.getColumn()));\n\n    SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();\n    StringBuilder mapContents = new StringBuilder();\n    generator.appendIndexMapTo(mapContents, \"out.js\", sections);\n\n    check(inputs, output.toString(), mapContents.toString(),\n      new SourceMapSupplier() {\n        @Override\n        public String getSourceMap(String url){\n          return maps.get(url);\n      }});\n  }\n```\n#Error message from the test method 1: junit.framework.AssertionFailedError: expected:<5> but was:<4>\n \n#Test method 2:\n```java\n  public void testGoldenOutput0a() throws Exception {\n    // Empty source map test\n    checkSourceMap(\"a;\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"a\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message from the test method 2: junit.framework.ComparisonFailure: expected:<...t\":1,\n \n#Test method 3:\n```java\n  public void testMultilineMapping() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +\n                    \"var __VAR__ = '__STR__';\\n\" +\n                    \"var __ANO__ = \\\"__STR2__\\\";\\n\" +\n                    \"}\");\n  }\n```\n#Error message from the test method 3: junit.framework.AssertionFailedError: expected:<10> but was:<9>\n \n#Test method 4:\n```java\n  public void testMultiFunctionMapping() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +\n                    \"var __VAR__ = '__STR__';\\n\" +\n                    \"var __ANO__ = \\\"__STR2__\\\";\\n\" +\n                    \"}\\n\" +\n\n                    \"function __BASIC2__(__PARAM3__, __PARAM4__) {\\n\" +\n                    \"var __VAR2__ = '__STR2__';\\n\" +\n                    \"var __ANO2__ = \\\"__STR3__\\\";\\n\" +\n                    \"}\\n\");\n  }\n```\n#Error message from the test method 4: junit.framework.AssertionFailedError: expected:<10> but was:<9>\n \n#Test method 5:\n```java\n  public void testLiteralMappingsGoldenOutput() throws Exception {\n    // Empty source map test\n    checkSourceMap(\"function __BASIC__(__PARAM1__, __PARAM2__) { \" +\n                   \"var __VAR__ = '__STR__'; }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,CAACC,UAAD,CAAaC,UAAb,\" +\n                       \"CAAyB,CAAE,IAAIC,QAAU,SAAhB;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"__BASIC__\\\",\\\"__PARAM1__\\\",\\\"__PARAM2__\\\",\" +\n                       \"\\\"__VAR__\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message from the test method 5: junit.framework.ComparisonFailure: expected:<...t\":1,\n \n#Test method 6:\n```java\n  public void testMultilineMapping2() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +\n                    \"var __VAR__ = 1;\\n\" +\n                    \"var __ANO__ = 2;\\n\" +\n                    \"}\");\n  }\n```\n#Error message from the test method 6: junit.framework.AssertionFailedError: expected:<10> but was:<9>\n \n#Test method 7:\n```java\n  public void testBasicMappingGoldenOutput() throws Exception {\n    // Empty source map test\n    checkSourceMap(\"function __BASIC__() { }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,EAAG;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"__BASIC__\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message from the test method 7: junit.framework.ComparisonFailure: expected:<...t\":1,\n \n#Test method 8:\n```java\n  public void testSourceMapMerging() throws Exception {\n    final String INPUT1 = \"file1\";\n    final String INPUT2 = \"file2\";\n    LinkedHashMap<String, String> inputs = Maps.newLinkedHashMap();\n    inputs.put(INPUT1, \"var __FOO__ = 1;\");\n    inputs.put(INPUT2, \"var __BAR__ = 2;\");\n    RunResult result1 = compile(inputs.get(INPUT1), INPUT1);\n    RunResult result2 = compile(inputs.get(INPUT2), INPUT2);\n\n    StringBuilder output = new StringBuilder();\n    FilePosition offset = appendAndCount(output, result1.generatedSource);\n    output.append(result2.generatedSource);\n\n    SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();\n\n    generator.mergeMapSection(0, 0, result1.sourceMapFileContent);\n    generator.mergeMapSection(offset.getLine(), offset.getColumn(),\n        result2.sourceMapFileContent);\n\n    StringBuilder mapContents = new StringBuilder();\n    generator.appendTo(mapContents, \"out.js\");\n\n    check(inputs, output.toString(), mapContents.toString());\n  }\n```\n#Error message from the test method 8: junit.framework.AssertionFailedError: expected:<5> but was:<4>\n \n#Test method 9:\n```java\n  public void testLiteralMappings() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) { \" +\n                    \"var __VAR__ = '__STR__'; }\");\n  }\n```\n#Error message from the test method 9: junit.framework.AssertionFailedError: expected:<10> but was:<9>\n \n#Test method 10:\n```java\n  public void testBasicMapping1() throws Exception {\n    compileAndCheck(\"function __BASIC__() { }\");\n  }\n```\n#Error message from the test method 10: junit.framework.AssertionFailedError: expected:<10> but was:<9>\n \n#Test method 11:\n```java\n  public void testBasicMapping2() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__) {}\");\n  }\n```\n#Error message from the test method 11: junit.framework.AssertionFailedError: expected:<10> but was:<9>\n \n#Test method 12:\n```java\n  public void testGoldenOutput1() throws Exception {\n    detailLevel = SourceMap.DetailLevel.ALL;\n\n    checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +\n                       \"CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG,\" +\n                       \"OAAOD,IAA9B;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +\n                   \"}\\n\");\n\n    detailLevel = SourceMap.DetailLevel.SYMBOLS;\n\n    checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAATA,CAAWC,GAAXD,CAAgBE,\" +\n                       \"GAAhBF,EAAuBC,GAAvBD,CAA6BC,GAA7BD,CAAmCE,GAAnCF,\" +\n                       \"SAAmDC,IAAnDD;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message from the test method 12: junit.framework.ComparisonFailure: expected:<...t\":1,\n \n#Test method 13:\n```java\n  public void testGoldenOutput2() throws Exception {\n    checkSourceMap(\"function f(foo, bar) {\\r\\n\\n\\n\\nfoo = foo + bar + foo;\" +\n                   \"\\nreturn foo;\\n}\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +\n                       \"CAAW,CAIrBD,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkBD,\" +\n                       \"GAClB,OAAOA,IALc;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message from the test method 13: junit.framework.ComparisonFailure: expected:<...t\":1,\n \n#Test method 14:\n```java\n  public void testGoldenOutput3() throws Exception {\n    checkSourceMap(\"c:\\\\myfile.js\",\n                   \"foo;\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"foo\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message from the test method 14: junit.framework.ComparisonFailure: expected:<...t\":1,\n \n#Test method 15:\n```java\n  public void testGoldenOutput4() throws Exception {\n    checkSourceMap(\"c:\\\\myfile.js\",\n                   \"foo;   boo;   goo;\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,GAAOC,IAAOC;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"foo\\\",\\\"boo\\\",\\\"goo\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message from the test method 15: junit.framework.ComparisonFailure: expected:<...t\":1,\n \n#Test method 16:\n```java\n  public void testGoldenOutput5() throws Exception {\n    detailLevel = SourceMap.DetailLevel.ALL;\n\n    checkSourceMap(\n        \"c:\\\\myfile.js\",\n        \"/** @preserve\\n\" +\n        \" * this is a test.\\n\" +\n        \" */\\n\" +\n        \"var foo=a + 'this is a really long line that will force the\"\n        + \" mapping to span multiple lines 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \"' + c + d + e;\",\n\n        \"{\\n\" +\n        \"\\\"version\\\":3,\\n\" +\n        \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n        \"\\\"lineCount\\\":6,\\n\" +\n        \"\\\"mappings\\\":\\\"A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE,\" +\n            \"CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\\\",\\n\" +\n        \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n        \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +\n        \"}\\n\");\n\n    detailLevel = SourceMap.DetailLevel.SYMBOLS;\n\n    checkSourceMap(\"c:\\\\myfile.js\",\n        \"/** @preserve\\n\" +\n        \" * this is a test.\\n\" +\n        \" */\\n\" +\n        \"var foo=a + 'this is a really long line that will force the\"\n        + \" mapping to span multiple lines 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \"' + c + d + e;\",\n\n        \"{\\n\" +\n        \"\\\"version\\\":3,\\n\" +\n        \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n        \"\\\"lineCount\\\":6,\\n\" +\n        \"\\\"mappings\\\":\\\"A;;;;IAGIA,IAAIC,CAAJD;AAA8xCE,CAA9xCF,CAAkyCG,\" +\n            \"CAAlyCH,CAAsyCI;\\\",\\n\" +\n        \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n        \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +\n        \"}\\n\");\n  }\n```\n#Error message from the test method 16: junit.framework.ComparisonFailure: expected:<...\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\nprivate OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n        return null;\n    } else {\n        // Adjust the line/column here to be start at 1.\n        Builder x = OriginalMapping.newBuilder()\n            .setOriginalFile(sources[entry.getSourceFileId()])\n            .setLineNumber(entry.getSourceLine() + 1) // Resolve incorrect line number adjustment\n            .setColumnPosition(entry.getSourceColumn() + 1); // Adjust for 1-based column indexing\n        if (entry.getNameId() != UNMAPPED) {\n            x.setIdentifier(names[entry.getNameId()]);\n        }\n        return x.build();\n    }\n}\n",
                            "\n/**\n * Creates an \"OriginalMapping\" object for the given entry object.\n */\nprivate OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n        return null;\n    } else {\n        // Adjust the line/column here to be start at 1.\n        Builder x = OriginalMapping.newBuilder()\n                .setOriginalFile(sources[entry.getSourceFileId()])\n                .setLineNumber(entry.getSourceLine() + 1) // Increment line number by 1\n                .setColumnPosition(entry.getSourceColumn() + 1); // Increment column position by 1\n        if (entry.getNameId() != UNMAPPED) {\n            x.setIdentifier(names[entry.getNameId()]);\n        }\n        return x.build();\n    }\n}\n",
                            "\nprivate OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n      return null;\n    } else {\n      // Adjust the line/column here to be start at 1.\n      Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine() + 1)  // Incremented by 1\n        .setColumnPosition(entry.getSourceColumn() + 1); // Incremented by 1\n      if (entry.getNameId() != UNMAPPED) {\n        x.setIdentifier(names[entry.getNameId()]);\n      }\n      return x.build();\n    }\n  }\n",
                            "\n  /**\n   * Creates an \"OriginalMapping\" object for the given entry object.\n   */\n  private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n      return null;\n    } else {\n      // Adjust the line/column here to be start at 1.\n      Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine() + 1)\n        .setColumnPosition(entry.getSourceColumn() + 1);\n      if (entry.getNameId() != UNMAPPED) {\n        x.setIdentifier(names[entry.getNameId()]);\n      }\n      return x.build();\n    }\n  }\n",
                            "\n  /**\n   * Creates an \"OriginalMapping\" object for the given entry object.\n   */\n\n  private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n      return null;\n    } else {\n      // Adjust the line/column here to be start at 1.\n      Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine() + 1) // Adjustment made here\n        .setColumnPosition(entry.getSourceColumn() + 1); // Adjustment made here\n      if (entry.getNameId() != UNMAPPED) {\n        x.setIdentifier(names[entry.getNameId()]);\n      }\n      return x.build();\n    }\n  }\n",
                            "\n  /**\n   * Creates an \"OriginalMapping\" object for the given entry object.\n   */\n\n  private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n      return null;\n    } else {\n      // Adjust the line/column here to be start at 1.\n      Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine() + 1)\n        .setColumnPosition(entry.getSourceColumn() + 1);\n      if (entry.getNameId() != UNMAPPED) {\n        x.setIdentifier(names[entry.getNameId()]);\n      }\n      return x.build();\n    }\n  }\n",
                            "\n  /**\n   * Creates an \"OriginalMapping\" object for the given entry object.\n   */\n\n  private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n      return null;\n    } else {\n      // Adjust the line/column here to be start at 1.\n      Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine() + 1)  // Increment line number by 1\n        .setColumnPosition(entry.getSourceColumn() + 1); // Increment column position by 1\n      if (entry.getNameId() != UNMAPPED) {\n        x.setIdentifier(names[entry.getNameId()]);\n      }\n      return x.build();\n    }\n  }\n",
                            "\nprivate OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n        return null;\n    } else {\n        // Adjust the line/column here to be start at 1.\n        Builder x = OriginalMapping.newBuilder()\n            .setOriginalFile(sources[entry.getSourceFileId()])\n            .setLineNumber(entry.getSourceLine() + 1)  // Fixed to start at 1\n            .setColumnPosition(entry.getSourceColumn() + 1);  // Fixed to start at 1\n        if (entry.getNameId() != UNMAPPED) {\n            x.setIdentifier(names[entry.getNameId()]);\n        }\n        return x.build();\n    }\n}\n",
                            "\n  /**\n   * Creates an \"OriginalMapping\" object for the given entry object.\n   */\n\n  private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n      return null;\n    } else {\n      // Adjust the line/column here to be start at 1.\n      Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine() + 1) // Incrementing lineNumber by 1\n        .setColumnPosition(entry.getSourceColumn() + 1); // Incrementing columnPosition by 1\n      if (entry.getNameId() != UNMAPPED) {\n        x.setIdentifier(names[entry.getNameId()]);\n      }\n      return x.build();\n    }\n  }\n",
                            "\n  /**\n   * Creates an \"OriginalMapping\" object for the given entry object.\n   */\n\n  private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n      return null;\n    } else {\n      // Adjust the line/column here to be start at 1.\n      Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine() + 1)\n        .setColumnPosition(entry.getSourceColumn() + 1);\n      if (entry.getNameId() != UNMAPPED) {\n        x.setIdentifier(names[entry.getNameId()]);\n      }\n      return x.build();\n    }\n  }\n"
                        ],
                        "evaluation_done": true
                    }
                }
            },
            {
                "path": "src/com/google/javascript/jscomp/SourceMap.java",
                "start_loc": 117,
                "end_loc": 143,
                "buggy_function": "  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(node.getLineno(), node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n",
                "fixed_function": "  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n    int lineBaseOffset = 1;\n    if (generator instanceof SourceMapGeneratorV1\n        || generator instanceof SourceMapGeneratorV2) {\n      lineBaseOffset = 0;\n    }\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n",
                "comment": "",
                "normalized_body": [
                    "public void addMapping(Node node, FilePosition outputStartPosition, FilePosition outputEndPosition) { String sourceFile = node.getSourceFileName(); if (sourceFile == null || node.getLineno() < 0) { return; } sourceFile = fixupSourceLocation(sourceFile); String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP); generator.addMapping(sourceFile, originalName, new FilePosition(node.getLineno(), node.getCharno()), outputStartPosition, outputEndPosition); }"
                ],
                "top_similar_methods": [
                    [
                        1.0,
                        "public void addMapping(Node node, FilePosition outputStartPosition, FilePosition outputEndPosition) { String sourceFile = node.getSourceFileName(); if (sourceFile == null || node.getLineno() < 0) { return; } sourceFile = fixupSourceLocation(sourceFile); String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP); generator.addMapping(sourceFile, originalName, new FilePosition(node.getLineno(), node.getCharno()), outputStartPosition, outputEndPosition); }"
                    ],
                    [
                        0.9838168025016785,
                        "public void testRecordAndObjectChain2() throws Exception { RecordTypeBuilder builder = new RecordTypeBuilder(registry); builder.addProperty(\\\"date\\\", DATE_TYPE, null); JSType hasDateProperty = builder.build(); List<JSType> typeChain = Lists.newArrayList(registry.getNativeType(JSTypeNative.OBJECT_TYPE), hasDateProperty, googBar.getInstanceType(), registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE), registry.getNativeType(JSTypeNative.NO_TYPE)); verifySubtypeChain(typeChain); }"
                    ],
                    [
                        0.9834553599357605,
                        "public void testRecordAndObjectChain3() throws Exception { RecordTypeBuilder builder = new RecordTypeBuilder(registry); builder.addProperty(\\\"date\\\", UNKNOWN_TYPE, null); JSType hasUnknownDateProperty = builder.build(); List<JSType> typeChain = Lists.newArrayList(registry.getNativeType(JSTypeNative.OBJECT_TYPE), hasUnknownDateProperty, googBar.getInstanceType(), registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE), registry.getNativeType(JSTypeNative.NO_TYPE)); verifySubtypeChain(typeChain); }"
                    ],
                    [
                        0.9798790216445923,
                        "public static Config createConfig(boolean isIdeMode, LanguageMode languageMode, boolean acceptConstKeyword, Set<String> extraAnnotationNames) { initResourceConfig(); Set<String> effectiveAnnotationNames; if (extraAnnotationNames == null) { effectiveAnnotationNames = annotationNames; } else { effectiveAnnotationNames = new HashSet<String>(annotationNames); effectiveAnnotationNames.addAll(extraAnnotationNames); } return new Config(effectiveAnnotationNames, suppressionNames, isIdeMode, languageMode, acceptConstKeyword); }"
                    ],
                    [
                        0.9795805811882019,
                        "@Override public Collection<OriginalMapping> getReverseMapping(String originalFile, int line, int column) { if (reverseSourceMapping == null) { createReverseMapping(); } Map<Integer, Collection<OriginalMapping>> sourceLineToCollectionMap = reverseSourceMapping.get(originalFile); if (sourceLineToCollectionMap == null) { return Collections.emptyList(); } else { Collection<OriginalMapping> mappings = sourceLineToCollectionMap.get(line); if (mappings == null) { return Collections.emptyList(); } else { return mappings; } } }"
                    ],
                    [
                        0.9789870977401733,
                        "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.isGetProp()) { String field = n.getLastChild().getString(); T type = typeSystem.getType(getScope(), n.getFirstChild(), field); Property prop = getProperty(field); if (typeSystem.isInvalidatingType(type)) { prop.invalidate(); } else { prop.addTypeToSkip(type); if ((type = typeSystem.getInstanceFromPrototype(type)) != null) { prop.getTypes().add(type); prop.typesToSkip.add(type); } } } }"
                    ],
                    [
                        0.9786779284477234,
                        "private Name recordStaticNameDefinition(NodeTraversal t, String name, JSType type, Node n, Node parent, Node gParent, Node rValue) { if (getNamedContainingFunction() != graph.MAIN) { } if (type.isConstructor()) { return recordClassConstructorOrInterface(name, type.toMaybeFunctionType(), n, parent, parent.getParent(), rValue); } else { Name symbol = graph.defineNameIfNotExists(name, isExtern); symbol.setType(type); if (n.isAssign()) { symbol.addAssignmentDeclaration(n); } else { symbol.addFunctionDeclaration(n); } return symbol; } }"
                    ]
                ],
                "directly_related_tests": [
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput0a",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappingsGoldenOutput",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMappingGoldenOutput",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput2",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput3",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput4",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n\n  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(node.getLineno(), node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n  public void testGoldenOutput0a() throws Exception {\n    // Empty source map test\n    checkSourceMap(\"a;\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"a\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message: junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA;\",\n\"sources\":[\"te...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA;\",\n\"sources\":[\"te...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput0a(SourceMapGeneratorV3Test.java:134)  checkSourceMap(\"a;\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"a\\\"]\\n\" +                   \"}\\n\");\n \n#Test method 2:\n```java\n  public void testLiteralMappingsGoldenOutput() throws Exception {\n    // Empty source map test\n    checkSourceMap(\"function __BASIC__(__PARAM1__, __PARAM2__) { \" +\n                   \"var __VAR__ = '__STR__'; }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,CAACC,UAAD,CAAaC,UAAb,\" +\n                       \"CAAyB,CAAE,IAAIC,QAAU,SAAhB;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"__BASIC__\\\",\\\"__PARAM1__\\\",\\\"__PARAM2__\\\",\" +\n                       \"\\\"__VAR__\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message: junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,UAAS,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,UAAS,CAACC,...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testLiteralMappingsGoldenOutput(SourceMapGeneratorV3Test.java:77)  checkSourceMap(\"function __BASIC__(__PARAM1__, __PARAM2__) { \" +                   \"var __VAR__ = '__STR__'; }\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,CAACC,UAAD,CAAaC,UAAb,\" +                       \"CAAyB,CAAE,IAAIC,QAAU,SAAhB;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"__BASIC__\\\",\\\"__PARAM1__\\\",\\\"__PARAM2__\\\",\" +                       \"\\\"__VAR__\\\"]\\n\" +                   \"}\\n\");\n \n#Test method 3:\n```java\n  public void testBasicMappingGoldenOutput() throws Exception {\n    // Empty source map test\n    checkSourceMap(\"function __BASIC__() { }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,EAAG;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"__BASIC__\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message: junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,UAAS,EAAG;\"...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,UAAS,EAAG;\"...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMappingGoldenOutput(SourceMapGeneratorV3Test.java:54)  checkSourceMap(\"function __BASIC__() { }\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,EAAG;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"__BASIC__\\\"]\\n\" +                   \"}\\n\");\n \n#Test method 4:\n```java\n  public void testGoldenOutput1() throws Exception {\n    detailLevel = SourceMap.DetailLevel.ALL;\n\n    checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +\n                       \"CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG,\" +\n                       \"OAAOD,IAA9B;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +\n                   \"}\\n\");\n\n    detailLevel = SourceMap.DetailLevel.SYMBOLS;\n\n    checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAATA,CAAWC,GAAXD,CAAgBE,\" +\n                       \"GAAhBF,EAAuBC,GAAvBD,CAA6BC,GAA7BD,CAAmCE,GAAnCF,\" +\n                       \"SAAmDC,IAAnDD;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message: junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,EAAC,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,EAAC,CAACC,...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput1(SourceMapGeneratorV3Test.java:149)  checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +                       \"CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG,\" +                       \"OAAOD,IAA9B;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +                   \"}\\n\");\n \n#Test method 5:\n```java\n  public void testGoldenOutput2() throws Exception {\n    checkSourceMap(\"function f(foo, bar) {\\r\\n\\n\\n\\nfoo = foo + bar + foo;\" +\n                   \"\\nreturn foo;\\n}\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +\n                       \"CAAW,CAIrBD,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkBD,\" +\n                       \"GAClB,OAAOA,IALc;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message: junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,EAAC,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,EAAC,CAACC,...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput2(SourceMapGeneratorV3Test.java:179)  checkSourceMap(\"function f(foo, bar) {\\r\\n\\n\\n\\nfoo = foo + bar + foo;\" +                   \"\\nreturn foo;\\n}\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +                       \"CAAW,CAIrBD,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkBD,\" +                       \"GAClB,OAAOA,IALc;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +                   \"}\\n\");\n \n#Test method 6:\n```java\n  public void testGoldenOutput3() throws Exception {\n    checkSourceMap(\"c:\\\\myfile.js\",\n                   \"foo;\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"foo\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message: junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA;\",\n\"sources\":[\"c:...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA;\",\n\"sources\":[\"c:...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput3(SourceMapGeneratorV3Test.java:195)  checkSourceMap(\"c:\\\\myfile.js\",                   \"foo;\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +                   \"\\\"names\\\":[\\\"foo\\\"]\\n\" +                   \"}\\n\");\n \n#Test method 7:\n```java\n  public void testGoldenOutput4() throws Exception {\n    checkSourceMap(\"c:\\\\myfile.js\",\n                   \"foo;   boo;   goo;\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,GAAOC,IAAOC;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"foo\\\",\\\"boo\\\",\\\"goo\\\"]\\n\" +\n                   \"}\\n\");\n  }\n```\n#Error message: junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,GAAOC,IAAOC;\",\n\"s...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,GAAOC,IAAOC;\",\n\"s...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput4(SourceMapGeneratorV3Test.java:209)  checkSourceMap(\"c:\\\\myfile.js\",                   \"foo;   boo;   goo;\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,GAAOC,IAAOC;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +                   \"\\\"names\\\":[\\\"foo\\\",\\\"boo\\\",\\\"goo\\\"]\\n\" +                   \"}\\n\");\n \n#Test method 8:\n```java\n  public void testGoldenOutput5() throws Exception {\n    detailLevel = SourceMap.DetailLevel.ALL;\n\n    checkSourceMap(\n        \"c:\\\\myfile.js\",\n        \"/** @preserve\\n\" +\n        \" * this is a test.\\n\" +\n        \" */\\n\" +\n        \"var foo=a + 'this is a really long line that will force the\"\n        + \" mapping to span multiple lines 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \"' + c + d + e;\",\n\n        \"{\\n\" +\n        \"\\\"version\\\":3,\\n\" +\n        \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n        \"\\\"lineCount\\\":6,\\n\" +\n        \"\\\"mappings\\\":\\\"A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE,\" +\n            \"CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\\\",\\n\" +\n        \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n        \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +\n        \"}\\n\");\n\n    detailLevel = SourceMap.DetailLevel.SYMBOLS;\n\n    checkSourceMap(\"c:\\\\myfile.js\",\n        \"/** @preserve\\n\" +\n        \" * this is a test.\\n\" +\n        \" */\\n\" +\n        \"var foo=a + 'this is a really long line that will force the\"\n        + \" mapping to span multiple lines 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \"' + c + d + e;\",\n\n        \"{\\n\" +\n        \"\\\"version\\\":3,\\n\" +\n        \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n        \"\\\"lineCount\\\":6,\\n\" +\n        \"\\\"mappings\\\":\\\"A;;;;IAGIA,IAAIC,CAAJD;AAA8xCE,CAA9xCF,CAAkyCG,\" +\n            \"CAAlyCH,CAAsyCI;\\\",\\n\" +\n        \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n        \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +\n        \"}\\n\");\n  }\n```\n#Error message: junit.framework.ComparisonFailure: expected:<...\n\"mappings\":\"A;;;;AA[G]A,IAAIA,IAAIC,CAAJD,...> but was:<...\n\"mappings\":\"A;;;;AA[I]A,IAAIA,IAAIC,CAAJD,...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput5(SourceMapGeneratorV3Test.java:225)  checkSourceMap(        \"c:\\\\myfile.js\",        \"/** @preserve\\n\" +        \" * this is a test.\\n\" +        \" */\\n\" +        \"var foo=a + 'this is a really long line that will force the\"        + \" mapping to span multiple lines 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \"' + c + d + e;\",        \"{\\n\" +        \"\\\"version\\\":3,\\n\" +        \"\\\"file\\\":\\\"testcode\\\",\\n\" +        \"\\\"lineCount\\\":6,\\n\" +        \"\\\"mappings\\\":\\\"A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE,\" +            \"CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\\\",\\n\" +        \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +        \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +        \"}\\n\");\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\npublic void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    int lineNumberZeroBased = node.getLineno() - 1; // Convert to 0-based index\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(lineNumberZeroBased, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n",
                            "\npublic void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Adjust the line number to be zero-based\n    int lineBaseZero = node.getLineno() - 1;\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(lineBaseZero, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n",
                            "\npublic void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    // Adjust the line number to be 0-based for v3.\n    int adjustedLineNo = node.getLineno() - 1;\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(adjustedLineNo, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n}\n",
                            "\n  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Correcting the line number to be 0-based.\n    int lineNo = node.getLineno() - 1;\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(lineNo, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n",
                            "\n  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    // Adjust line number and column to be 0-based for v3 source maps\n    int lineNumber = node.getLineno() - 1;\n    int columnNumber = node.getCharno();\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(lineNumber, columnNumber),\n        outputStartPosition, outputEndPosition);\n  }\n",
                            "\npublic void addMapping(\n    Node node,\n    FilePosition outputStartPosition,\n    FilePosition outputEndPosition) {\n  String sourceFile = node.getSourceFileName();\n\n  // If the node does not have an associated source file or\n  // its line number is -1, then the node does not have sufficient\n  // information for a mapping to be useful.\n  if (sourceFile == null || node.getLineno() < 0) {\n    return;\n  }\n\n  sourceFile = fixupSourceLocation(sourceFile);\n\n  String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n  // Rhino source lines are one-based but columns are zero-based.\n  // We make them both 0-based for v3 source maps.\n  int lineOffset = -1; // Adjust line number to be 0-based\n  int columnOffset = 0; // Already 0-based\n\n  generator.addMapping(\n      sourceFile, originalName,\n      new FilePosition(node.getLineno() + lineOffset, node.getCharno() + columnOffset),\n      outputStartPosition, outputEndPosition);\n}\n",
                            "\npublic void addMapping(\n    Node node,\n    FilePosition outputStartPosition,\n    FilePosition outputEndPosition) {\n  String sourceFile = node.getSourceFileName();\n\n  // If the node does not have an associated source file or\n  // its line number is -1, then the node does not have sufficient\n  // information for a mapping to be useful.\n  if (sourceFile == null || node.getLineno() < 0) {\n    return;\n  }\n\n  sourceFile = fixupSourceLocation(sourceFile);\n\n  String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n  // Rhino source lines are one-based but columns are zero-based.\n  // For v3, make both 0 based.\n  int line = node.getLineno() - 1;\n  int charno = node.getCharno();\n\n  generator.addMapping(\n      sourceFile, originalName,\n      new FilePosition(line, charno),\n      outputStartPosition, outputEndPosition);\n}\n",
                            "\n  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    // Adjust line number to be 0-based for source maps\n    int adjustedLine = node.getLineno() - 1;\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(adjustedLine, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n",
                            "\n  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Adjust line and column numbers to be 0-based for version 3 source maps.\n\n    int adjustedLine = node.getLineno();\n    int adjustedColumn = node.getCharno();\n\n    // Ensure line is converted to 0-based index\n    if (adjustedLine > 0) {\n      adjustedLine -= 1;\n    }\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(adjustedLine, adjustedColumn),\n        outputStartPosition, outputEndPosition);\n  }\n",
                            "\n  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // The line numbers for the mappings should be zero-based for v3\n    int zeroBasedLine = node.getLineno() - 1;\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(zeroBasedLine, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n"
                        ],
                        "plausible_patches": [
                            "\npublic void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    int lineNumberZeroBased = node.getLineno() - 1; // Convert to 0-based index\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(lineNumberZeroBased, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n",
                            "\npublic void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Adjust the line number to be zero-based\n    int lineBaseZero = node.getLineno() - 1;\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(lineBaseZero, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n",
                            "\npublic void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    // Adjust the line number to be 0-based for v3.\n    int adjustedLineNo = node.getLineno() - 1;\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(adjustedLineNo, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n}\n",
                            "\n  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Correcting the line number to be 0-based.\n    int lineNo = node.getLineno() - 1;\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(lineNo, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n",
                            "\n  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    // Adjust line number and column to be 0-based for v3 source maps\n    int lineNumber = node.getLineno() - 1;\n    int columnNumber = node.getCharno();\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(lineNumber, columnNumber),\n        outputStartPosition, outputEndPosition);\n  }\n",
                            "\npublic void addMapping(\n    Node node,\n    FilePosition outputStartPosition,\n    FilePosition outputEndPosition) {\n  String sourceFile = node.getSourceFileName();\n\n  // If the node does not have an associated source file or\n  // its line number is -1, then the node does not have sufficient\n  // information for a mapping to be useful.\n  if (sourceFile == null || node.getLineno() < 0) {\n    return;\n  }\n\n  sourceFile = fixupSourceLocation(sourceFile);\n\n  String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n  // Rhino source lines are one-based but columns are zero-based.\n  // We make them both 0-based for v3 source maps.\n  int lineOffset = -1; // Adjust line number to be 0-based\n  int columnOffset = 0; // Already 0-based\n\n  generator.addMapping(\n      sourceFile, originalName,\n      new FilePosition(node.getLineno() + lineOffset, node.getCharno() + columnOffset),\n      outputStartPosition, outputEndPosition);\n}\n",
                            "\npublic void addMapping(\n    Node node,\n    FilePosition outputStartPosition,\n    FilePosition outputEndPosition) {\n  String sourceFile = node.getSourceFileName();\n\n  // If the node does not have an associated source file or\n  // its line number is -1, then the node does not have sufficient\n  // information for a mapping to be useful.\n  if (sourceFile == null || node.getLineno() < 0) {\n    return;\n  }\n\n  sourceFile = fixupSourceLocation(sourceFile);\n\n  String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n  // Rhino source lines are one-based but columns are zero-based.\n  // For v3, make both 0 based.\n  int line = node.getLineno() - 1;\n  int charno = node.getCharno();\n\n  generator.addMapping(\n      sourceFile, originalName,\n      new FilePosition(line, charno),\n      outputStartPosition, outputEndPosition);\n}\n",
                            "\n  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    // Adjust line number to be 0-based for source maps\n    int adjustedLine = node.getLineno() - 1;\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(adjustedLine, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n",
                            "\n  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Adjust line and column numbers to be 0-based for version 3 source maps.\n\n    int adjustedLine = node.getLineno();\n    int adjustedColumn = node.getCharno();\n\n    // Ensure line is converted to 0-based index\n    if (adjustedLine > 0) {\n      adjustedLine -= 1;\n    }\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(adjustedLine, adjustedColumn),\n        outputStartPosition, outputEndPosition);\n  }\n",
                            "\n  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // The line numbers for the mappings should be zero-based for v3\n    int zeroBasedLine = node.getLineno() - 1;\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(zeroBasedLine, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n"
                        ],
                        "evaluation_done": true
                    }
                }
            }
        ],
        "trigger_test": {
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testParseSourceMetaMap": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testParseSourceMetaMap",
                "src": "  public void testParseSourceMetaMap() throws Exception {\n    final String INPUT1 = \"file1\";\n    final String INPUT2 = \"file2\";\n    LinkedHashMap<String, String> inputs = Maps.newLinkedHashMap();\n    inputs.put(INPUT1, \"var __FOO__ = 1;\");\n    inputs.put(INPUT2, \"var __BAR__ = 2;\");\n    RunResult result1 = compile(inputs.get(INPUT1), INPUT1);\n    RunResult result2 = compile(inputs.get(INPUT2), INPUT2);\n\n    final String MAP1 = \"map1\";\n    final String MAP2 = \"map2\";\n    final LinkedHashMap<String, String> maps = Maps.newLinkedHashMap();\n    maps.put(MAP1, result1.sourceMapFileContent);\n    maps.put(MAP2, result2.sourceMapFileContent);\n\n    List<SourceMapSection> sections = Lists.newArrayList();\n\n    StringBuilder output = new StringBuilder();\n    FilePosition offset = appendAndCount(output, result1.generatedSource);\n    sections.add(SourceMapSection.forURL(MAP1, 0, 0));\n    output.append(result2.generatedSource);\n    sections.add(\n        SourceMapSection.forURL(MAP2, offset.getLine(), offset.getColumn()));\n\n    SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();\n    StringBuilder mapContents = new StringBuilder();\n    generator.appendIndexMapTo(mapContents, \"out.js\", sections);\n\n    check(inputs, output.toString(), mapContents.toString(),\n      new SourceMapSupplier() {\n        @Override\n        public String getSourceMap(String url){\n          return maps.get(url);\n      }});\n  }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<5> but was:<4>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testParseSourceMetaMap(SourceMapGeneratorV3Test.java:450)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<5> but was:<4>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testParseSourceMetaMap(SourceMapGeneratorV3Test.java:450)  check(inputs, output.toString(), mapContents.toString(),      new SourceMapSupplier() {        @Override        public String getSourceMap(String url){          return maps.get(url);      }});"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput0a": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testGoldenOutput0a",
                "src": "  public void testGoldenOutput0a() throws Exception {\n    // Empty source map test\n    checkSourceMap(\"a;\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"a\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA;\",\n\"sources\":[\"te...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA;\",\n\"sources\":[\"te...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput0a(SourceMapGeneratorV3Test.java:134)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA;\",\n\"sources\":[\"te...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA;\",\n\"sources\":[\"te...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput0a(SourceMapGeneratorV3Test.java:134)  checkSourceMap(\"a;\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"a\\\"]\\n\" +                   \"}\\n\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testMultilineMapping",
                "src": "  public void testMultilineMapping() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +\n                    \"var __VAR__ = '__STR__';\\n\" +\n                    \"var __ANO__ = \\\"__STR2__\\\";\\n\" +\n                    \"}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testMultilineMapping(SourceMapGeneratorV3Test.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)  check(inputMap, output, sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)  check(inputName, js, result.generatedSource, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testMultilineMapping(SourceMapGeneratorV3Test.java:93)  compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +                    \"var __VAR__ = '__STR__';\\n\" +                    \"var __ANO__ = \\\"__STR2__\\\";\\n\" +                    \"}\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultiFunctionMapping": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testMultiFunctionMapping",
                "src": "  public void testMultiFunctionMapping() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +\n                    \"var __VAR__ = '__STR__';\\n\" +\n                    \"var __ANO__ = \\\"__STR2__\\\";\\n\" +\n                    \"}\\n\" +\n\n                    \"function __BASIC2__(__PARAM3__, __PARAM4__) {\\n\" +\n                    \"var __VAR2__ = '__STR2__';\\n\" +\n                    \"var __ANO2__ = \\\"__STR3__\\\";\\n\" +\n                    \"}\\n\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testMultiFunctionMapping(SourceMapGeneratorV3Test.java:107)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)  check(inputMap, output, sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)  check(inputName, js, result.generatedSource, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testMultiFunctionMapping(SourceMapGeneratorV3Test.java:107)  compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +                    \"var __VAR__ = '__STR__';\\n\" +                    \"var __ANO__ = \\\"__STR2__\\\";\\n\" +                    \"}\\n\" +                    \"function __BASIC2__(__PARAM3__, __PARAM4__) {\\n\" +                    \"var __VAR2__ = '__STR2__';\\n\" +                    \"var __ANO2__ = \\\"__STR3__\\\";\\n\" +                    \"}\\n\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappingsGoldenOutput": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testLiteralMappingsGoldenOutput",
                "src": "  public void testLiteralMappingsGoldenOutput() throws Exception {\n    // Empty source map test\n    checkSourceMap(\"function __BASIC__(__PARAM1__, __PARAM2__) { \" +\n                   \"var __VAR__ = '__STR__'; }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,CAACC,UAAD,CAAaC,UAAb,\" +\n                       \"CAAyB,CAAE,IAAIC,QAAU,SAAhB;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"__BASIC__\\\",\\\"__PARAM1__\\\",\\\"__PARAM2__\\\",\" +\n                       \"\\\"__VAR__\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,UAAS,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,UAAS,CAACC,...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testLiteralMappingsGoldenOutput(SourceMapGeneratorV3Test.java:77)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,UAAS,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,UAAS,CAACC,...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testLiteralMappingsGoldenOutput(SourceMapGeneratorV3Test.java:77)  checkSourceMap(\"function __BASIC__(__PARAM1__, __PARAM2__) { \" +                   \"var __VAR__ = '__STR__'; }\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,CAACC,UAAD,CAAaC,UAAb,\" +                       \"CAAyB,CAAE,IAAIC,QAAU,SAAhB;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"__BASIC__\\\",\\\"__PARAM1__\\\",\\\"__PARAM2__\\\",\" +                       \"\\\"__VAR__\\\"]\\n\" +                   \"}\\n\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping2": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testMultilineMapping2",
                "src": "  public void testMultilineMapping2() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +\n                    \"var __VAR__ = 1;\\n\" +\n                    \"var __ANO__ = 2;\\n\" +\n                    \"}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testMultilineMapping2(SourceMapGeneratorV3Test.java:100)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)  check(inputMap, output, sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)  check(inputName, js, result.generatedSource, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testMultilineMapping2(SourceMapGeneratorV3Test.java:100)  compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +                    \"var __VAR__ = 1;\\n\" +                    \"var __ANO__ = 2;\\n\" +                    \"}\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMappingGoldenOutput": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testBasicMappingGoldenOutput",
                "src": "  public void testBasicMappingGoldenOutput() throws Exception {\n    // Empty source map test\n    checkSourceMap(\"function __BASIC__() { }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,EAAG;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"__BASIC__\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,UAAS,EAAG;\"...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,UAAS,EAAG;\"...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMappingGoldenOutput(SourceMapGeneratorV3Test.java:54)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,UAAS,EAAG;\"...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,UAAS,EAAG;\"...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMappingGoldenOutput(SourceMapGeneratorV3Test.java:54)  checkSourceMap(\"function __BASIC__() { }\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,EAAG;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"__BASIC__\\\"]\\n\" +                   \"}\\n\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testSourceMapMerging": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testSourceMapMerging",
                "src": "  public void testSourceMapMerging() throws Exception {\n    final String INPUT1 = \"file1\";\n    final String INPUT2 = \"file2\";\n    LinkedHashMap<String, String> inputs = Maps.newLinkedHashMap();\n    inputs.put(INPUT1, \"var __FOO__ = 1;\");\n    inputs.put(INPUT2, \"var __BAR__ = 2;\");\n    RunResult result1 = compile(inputs.get(INPUT1), INPUT1);\n    RunResult result2 = compile(inputs.get(INPUT2), INPUT2);\n\n    StringBuilder output = new StringBuilder();\n    FilePosition offset = appendAndCount(output, result1.generatedSource);\n    output.append(result2.generatedSource);\n\n    SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();\n\n    generator.mergeMapSection(0, 0, result1.sourceMapFileContent);\n    generator.mergeMapSection(offset.getLine(), offset.getColumn(),\n        result2.sourceMapFileContent);\n\n    StringBuilder mapContents = new StringBuilder();\n    generator.appendTo(mapContents, \"out.js\");\n\n    check(inputs, output.toString(), mapContents.toString());\n  }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<5> but was:<4>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testSourceMapMerging(SourceMapGeneratorV3Test.java:480)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<5> but was:<4>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testSourceMapMerging(SourceMapGeneratorV3Test.java:480)  check(inputs, output.toString(), mapContents.toString());"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappings": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testLiteralMappings",
                "src": "  public void testLiteralMappings() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) { \" +\n                    \"var __VAR__ = '__STR__'; }\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testLiteralMappings(SourceMapGeneratorV3Test.java:71)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)  check(inputMap, output, sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)  check(inputName, js, result.generatedSource, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testLiteralMappings(SourceMapGeneratorV3Test.java:71)  compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) { \" +                    \"var __VAR__ = '__STR__'; }\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping1": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testBasicMapping1",
                "src": "  public void testBasicMapping1() throws Exception {\n    compileAndCheck(\"function __BASIC__() { }\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMapping1(SourceMapGeneratorV3Test.java:49)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)  check(inputMap, output, sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)  check(inputName, js, result.generatedSource, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMapping1(SourceMapGeneratorV3Test.java:49)  compileAndCheck(\"function __BASIC__() { }\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping2": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testBasicMapping2",
                "src": "  public void testBasicMapping2() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__) {}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMapping2(SourceMapGeneratorV3Test.java:67)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)  check(inputMap, output, sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)  check(inputName, js, result.generatedSource, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMapping2(SourceMapGeneratorV3Test.java:67)  compileAndCheck(\"function __BASIC__(__PARAM1__) {}\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testGoldenOutput1",
                "src": "  public void testGoldenOutput1() throws Exception {\n    detailLevel = SourceMap.DetailLevel.ALL;\n\n    checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +\n                       \"CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG,\" +\n                       \"OAAOD,IAA9B;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +\n                   \"}\\n\");\n\n    detailLevel = SourceMap.DetailLevel.SYMBOLS;\n\n    checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAATA,CAAWC,GAAXD,CAAgBE,\" +\n                       \"GAAhBF,EAAuBC,GAAvBD,CAA6BC,GAA7BD,CAAmCE,GAAnCF,\" +\n                       \"SAAmDC,IAAnDD;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,EAAC,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,EAAC,CAACC,...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput1(SourceMapGeneratorV3Test.java:149)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,EAAC,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,EAAC,CAACC,...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput1(SourceMapGeneratorV3Test.java:149)  checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +                       \"CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG,\" +                       \"OAAOD,IAA9B;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +                   \"}\\n\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput2": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testGoldenOutput2",
                "src": "  public void testGoldenOutput2() throws Exception {\n    checkSourceMap(\"function f(foo, bar) {\\r\\n\\n\\n\\nfoo = foo + bar + foo;\" +\n                   \"\\nreturn foo;\\n}\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +\n                       \"CAAW,CAIrBD,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkBD,\" +\n                       \"GAClB,OAAOA,IALc;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,EAAC,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,EAAC,CAACC,...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput2(SourceMapGeneratorV3Test.java:179)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,EAAC,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,EAAC,CAACC,...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput2(SourceMapGeneratorV3Test.java:179)  checkSourceMap(\"function f(foo, bar) {\\r\\n\\n\\n\\nfoo = foo + bar + foo;\" +                   \"\\nreturn foo;\\n}\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +                       \"CAAW,CAIrBD,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkBD,\" +                       \"GAClB,OAAOA,IALc;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +                   \"}\\n\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput3": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testGoldenOutput3",
                "src": "  public void testGoldenOutput3() throws Exception {\n    checkSourceMap(\"c:\\\\myfile.js\",\n                   \"foo;\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"foo\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA;\",\n\"sources\":[\"c:...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA;\",\n\"sources\":[\"c:...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput3(SourceMapGeneratorV3Test.java:195)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA;\",\n\"sources\":[\"c:...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA;\",\n\"sources\":[\"c:...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput3(SourceMapGeneratorV3Test.java:195)  checkSourceMap(\"c:\\\\myfile.js\",                   \"foo;\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +                   \"\\\"names\\\":[\\\"foo\\\"]\\n\" +                   \"}\\n\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput4": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testGoldenOutput4",
                "src": "  public void testGoldenOutput4() throws Exception {\n    checkSourceMap(\"c:\\\\myfile.js\",\n                   \"foo;   boo;   goo;\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,GAAOC,IAAOC;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"foo\\\",\\\"boo\\\",\\\"goo\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,GAAOC,IAAOC;\",\n\"s...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,GAAOC,IAAOC;\",\n\"s...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput4(SourceMapGeneratorV3Test.java:209)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,GAAOC,IAAOC;\",\n\"s...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,GAAOC,IAAOC;\",\n\"s...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput4(SourceMapGeneratorV3Test.java:209)  checkSourceMap(\"c:\\\\myfile.js\",                   \"foo;   boo;   goo;\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,GAAOC,IAAOC;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +                   \"\\\"names\\\":[\\\"foo\\\",\\\"boo\\\",\\\"goo\\\"]\\n\" +                   \"}\\n\");"
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testGoldenOutput5",
                "src": "  public void testGoldenOutput5() throws Exception {\n    detailLevel = SourceMap.DetailLevel.ALL;\n\n    checkSourceMap(\n        \"c:\\\\myfile.js\",\n        \"/** @preserve\\n\" +\n        \" * this is a test.\\n\" +\n        \" */\\n\" +\n        \"var foo=a + 'this is a really long line that will force the\"\n        + \" mapping to span multiple lines 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \"' + c + d + e;\",\n\n        \"{\\n\" +\n        \"\\\"version\\\":3,\\n\" +\n        \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n        \"\\\"lineCount\\\":6,\\n\" +\n        \"\\\"mappings\\\":\\\"A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE,\" +\n            \"CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\\\",\\n\" +\n        \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n        \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +\n        \"}\\n\");\n\n    detailLevel = SourceMap.DetailLevel.SYMBOLS;\n\n    checkSourceMap(\"c:\\\\myfile.js\",\n        \"/** @preserve\\n\" +\n        \" * this is a test.\\n\" +\n        \" */\\n\" +\n        \"var foo=a + 'this is a really long line that will force the\"\n        + \" mapping to span multiple lines 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \"' + c + d + e;\",\n\n        \"{\\n\" +\n        \"\\\"version\\\":3,\\n\" +\n        \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n        \"\\\"lineCount\\\":6,\\n\" +\n        \"\\\"mappings\\\":\\\"A;;;;IAGIA,IAAIC,CAAJD;AAA8xCE,CAA9xCF,CAAkyCG,\" +\n            \"CAAlyCH,CAAsyCI;\\\",\\n\" +\n        \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n        \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +\n        \"}\\n\");\n  }",
                "error_msg": "junit.framework.ComparisonFailure: expected:<...\n\"mappings\":\"A;;;;AA[G]A,IAAIA,IAAIC,CAAJD,...> but was:<...\n\"mappings\":\"A;;;;AA[I]A,IAAIA,IAAIC,CAAJD,...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput5(SourceMapGeneratorV3Test.java:225)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.ComparisonFailure: expected:<...\n\"mappings\":\"A;;;;AA[G]A,IAAIA,IAAIC,CAAJD,...> but was:<...\n\"mappings\":\"A;;;;AA[I]A,IAAIA,IAAIC,CAAJD,...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput5(SourceMapGeneratorV3Test.java:225)  checkSourceMap(        \"c:\\\\myfile.js\",        \"/** @preserve\\n\" +        \" * this is a test.\\n\" +        \" */\\n\" +        \"var foo=a + 'this is a really long line that will force the\"        + \" mapping to span multiple lines 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \"' + c + d + e;\",        \"{\\n\" +        \"\\\"version\\\":3,\\n\" +        \"\\\"file\\\":\\\"testcode\\\",\\n\" +        \"\\\"lineCount\\\":6,\\n\" +        \"\\\"mappings\\\":\\\"A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE,\" +            \"CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\\\",\\n\" +        \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +        \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +        \"}\\n\");"
            }
        },
        "evaluation_done": true,
        "evaluation_done2": true
    }
}