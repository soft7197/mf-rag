{
    "Closure-49": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
                "start_loc": 75,
                "end_loc": 104,
                "buggy_function": "  @Override\n  public void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n      // If the contextual renamer is being used the starting context can not\n      // be a function.\n      Preconditions.checkState(\n          declarationRoot.getType() != Token.FUNCTION ||\n          !(rootRenamer instanceof ContextualRenamer));\n      Preconditions.checkState(t.inGlobalScope());\n      renamer = rootRenamer;\n    } else {\n      renamer = nameStack.peek().forChildScope();\n    }\n\n    if (declarationRoot.getType() == Token.FUNCTION) {\n      for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n        String name = c.getString();\n        renamer.addDeclaredName(name);\n      }\n      Node functionBody = declarationRoot.getLastChild();\n      findDeclaredNames(functionBody, null, renamer);\n    }  else \n    if (declarationRoot.getType() != Token.FUNCTION) {\n      // Add the block declarations\n      findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n  }\n",
                "fixed_function": "  @Override\n  public void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n      // If the contextual renamer is being used the starting context can not\n      // be a function.\n      Preconditions.checkState(\n          declarationRoot.getType() != Token.FUNCTION ||\n          !(rootRenamer instanceof ContextualRenamer));\n      Preconditions.checkState(t.inGlobalScope());\n      renamer = rootRenamer;\n    } else {\n      renamer = nameStack.peek().forChildScope();\n    }\n\n    if (declarationRoot.getType() != Token.FUNCTION) {\n      // Add the block declarations\n      findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n  }\n",
                "comment": "",
                "normalized_body": [
                    "@Override public void enterScope(NodeTraversal t) { Node declarationRoot = t.getScopeRoot(); Renamer renamer; if (nameStack.isEmpty()) { Preconditions.checkState(declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); } else if (declarationRoot.getType() != Token.FUNCTION) { findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); }",
                    "@Override public void enterScope(NodeTraversal t) { if (t.inGlobalScope()) { return; } referenceStack.push(referencedNames); referencedNames = Sets.newHashSet(); }"
                ],
                "top_similar_methods": [
                    [
                        0.9999998807907104,
                        "@Override public void enterScope(NodeTraversal t) { Node declarationRoot = t.getScopeRoot(); Renamer renamer; if (nameStack.isEmpty()) { Preconditions.checkState(declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); } else if (declarationRoot.getType() != Token.FUNCTION) { findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); }"
                    ],
                    [
                        0.9728062152862549,
                        "private void handleFor(Node forNode) { if (forNode.getChildCount() == 4) { Node init = forNode.getFirstChild(); Node cond = init.getNext(); Node iter = cond.getNext(); Node body = iter.getNext(); createEdge(init, Branch.UNCOND, forNode); createEdge(forNode, Branch.ON_TRUE, computeFallThrough(body)); createEdge(forNode, Branch.ON_FALSE, computeFollowNode(forNode, this)); createEdge(iter, Branch.UNCOND, forNode); connectToPossibleExceptionHandler(init, init); connectToPossibleExceptionHandler(forNode, cond); connectToPossibleExceptionHandler(iter, iter); } else { Node item = forNode.getFirstChild(); Node collection = item.getNext(); Node body = collection.getNext(); createEdge(forNode, Branch.ON_TRUE, computeFallThrough(body)); createEdge(forNode, Branch.ON_FALSE, computeFollowNode(forNode, this)); connectToPossibleExceptionHandler(forNode, collection); } }"
                    ],
                    [
                        0.9664157629013062,
                        "private void propagateSideEffects() { DiGraph<FunctionInformation, Node> sideEffectGraph = LinkedDirectedGraph.createWithoutAnnotations(); for (FunctionInformation functionInfo : functionSideEffectMap.values()) { sideEffectGraph.createNode(functionInfo); } for (FunctionInformation functionInfo : functionSideEffectMap.values()) { if (!functionInfo.mayHaveSideEffects()) { continue; } for (Node callSite : functionInfo.getCallsInFunctionBody()) { Node callee = callSite.getFirstChild(); Collection<Definition> defs = getCallableDefinitions(definitionProvider, callee); if (defs == null) { functionInfo.setTaintsUnknown(); break; } for (Definition def : defs) { Node defValue = def.getRValue(); FunctionInformation dep = functionSideEffectMap.get(defValue); Preconditions.checkNotNull(dep); sideEffectGraph.connect(dep, callSite, functionInfo); } } } FixedPointGraphTraversal.newTraversal(new SideEffectPropagationCallback()).computeFixedPoint(sideEffectGraph); for (FunctionInformation functionInfo : functionSideEffectMap.values()) { if (functionInfo.mayBePure()) { functionInfo.setIsPure(); } } }"
                    ],
                    [
                        0.9623421430587769,
                        "@SuppressWarnings(\\\"unchecked\\\") private void checkConstructor(Node func, ObjectType objType, String sourceName, String funcName) { Preconditions.checkArgument(NodeUtil.isFunction(func)); ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); cfa.process(null, func.getFirstChild().getNext().getNext()); ControlFlowGraph<Node> cfg = cfa.getCfg(); new PropertyOrdersFlowAnalysis(cfa.getCfg()).analyze(); Annotation ann = cfa.getCfg().getImplicitReturn().getAnnotation(); List<String>[] orders = ((FlowState<PropertyOrders>) ann).getIn().getOrders(); if (orders.length == 0) { throw new AssertionError(\\\"no paths through constructor \\\" + funcName + \\\"?\\\"); } if (orders.length > 1) { report(sourceName, func, UNEQUAL_PROPERTIES, reverse(orders[0]).toString(), reverse(orders[1]).toString()); } if (objType != null) { for (String propName : objType.getOwnPropertyNames()) { if (!orders[0].contains(propName)) { report(sourceName, func, UNASSIGNED_PROPERTY, funcName, propName); } } } }"
                    ],
                    [
                        0.9621149301528931,
                        "public void testDeclarationDisagreement() { SymbolTable table = createSymbolTable(\\\"/** @const */ var goog = goog || {};\\n\\\" + \\\"/** @param {!Function} x */\\n\\\" + \\\"goog.addSingletonGetter2 = function(x) {};\\n\\\" + \\\"/** Wakka wakka wakka */\\n\\\" + \\\"goog.addSingletonGetter = goog.addSingletonGetter2;\\n\\\" + \\\"/** @param {!Function} x */\\n\\\" + \\\"goog.addSingletonGetter = function(x) {};\\n\\\"); Symbol method = getGlobalVar(table, \\\"goog.addSingletonGetter\\\"); List<Reference> refs = table.getReferenceList(method); assertEquals(2, refs.size()); assertEquals(7, method.getDeclaration().getNode().getLineno()); assertEquals(5, refs.get(1).getNode().getLineno()); }"
                    ],
                    [
                        0.9620568156242371,
                        "@Override public void process(Node externs, Node root) { this.root = root; astPositionCounter = 0; astPosition = Maps.newHashMap(); nodePriorities = Maps.newHashMap(); cfg = new AstControlFlowGraph(computeFallThrough(root), nodePriorities, edgeAnnotations); NodeTraversal.traverse(compiler, root, this); astPosition.put(null, ++astPositionCounter); priorityCounter = 0; DiGraphNode<Node, Branch> entry = cfg.getEntry(); prioritizeFromEntryNode(entry); if (shouldTraverseFunctions) { for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) { Node value = candidate.getValue(); if (value != null && value.getType() == Token.FUNCTION) { Preconditions.checkState(!nodePriorities.containsKey(candidate) || candidate == entry); prioritizeFromEntryNode(candidate); } } } for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) { if (!nodePriorities.containsKey(candidate)) { nodePriorities.put(candidate, ++priorityCounter); } } nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter); }"
                    ],
                    [
                        0.9619999527931213,
                        "private Collection<Action> getImplicitActionsFromProp(JSType jsType, String prop, Node fnNode) { List<Action> actions = Lists.newArrayList(); if (jsType.isUnionType()) { boolean found = false; for (JSType alt : jsType.toMaybeUnionType().getAlternates()) { ObjectType altObj = ObjectType.cast(alt); if (altObj != null) { actions.addAll(getImplicitActionsFromPropNonUnion(altObj, prop, fnNode)); if (altObj.hasProperty(prop)) { found = true; } } } if (found) { return actions; } } else { ObjectType objType = ObjectType.cast(jsType); if (objType != null && !objType.isUnknownType() && objType.hasProperty(prop)) { return getImplicitActionsFromPropNonUnion(objType, prop, fnNode); } } for (ObjectType type : getTypeRegistry().getEachReferenceTypeWithProperty(prop)) { actions.addAll(getImplicitActionsFromPropNonUnion(type, prop, fnNode)); } return actions; }"
                    ],
                    [
                        0.9619483947753906,
                        "private void visitFunction(NodeTraversal t, Node n) { FunctionType functionType = JSType.toMaybeFunctionType(n.getJSType()); String functionPrivateName = n.getFirstChild().getString(); if (functionType.isConstructor()) { FunctionType baseConstructor = functionType.getSuperClassConstructor(); if (baseConstructor != null && baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) && (baseConstructor.isInterface() && functionType.isConstructor())) { compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName)); } else { for (JSType baseInterface : functionType.getImplementedInterfaces()) { boolean badImplementedType = false; ObjectType baseInterfaceObj = ObjectType.cast(baseInterface); if (baseInterfaceObj != null) { FunctionType interfaceConstructor = baseInterfaceObj.getConstructor(); if (interfaceConstructor != null && !interfaceConstructor.isInterface()) { badImplementedType = true; } } else { badImplementedType = true; } if (badImplementedType) { report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName); } } validator.expectAllInterfaceProperties(t, n, functionType); } } else if (functionType.isInterface()) { for (ObjectType extInterface : functionType.getExtendedInterfaces()) { if (extInterface.getConstructor() != null && !extInterface.getConstructor().isInterface()) { compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName)); } } if (functionType.hasImplementedInterfaces()) { compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName)); } if (functionType.getExtendedInterfacesCount() > 1) { HashMap<String, ObjectType> properties = new HashMap<String, ObjectType>(); HashMap<String, ObjectType> currentProperties = new HashMap<String, ObjectType>(); for (ObjectType interfaceType : functionType.getExtendedInterfaces()) { currentProperties.clear(); checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType); properties.putAll(currentProperties); } } } }"
                    ]
                ],
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline19b",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInlineIntoLoop",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline13",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline14",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline15",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline16",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline17",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline18",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline19",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testBug1897706",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInlineFunctionWithInnerFunction5",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateWithParameters3",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateCallInLoopVars1",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars1",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars2",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateFunctionDefinition",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutate8",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testLoopWithFunctionWithFunction",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables16",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables18",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining11",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverMutateConstants",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineWithThis7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables6",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionCallInlining11b",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineNoResultNoParamCall3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining9",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testMethodWithFunctionWithFunction",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionYCombinator",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineVars7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2a",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInline7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionOmega",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15b",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15d",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions16a",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexSample",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified4",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified5",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified6",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testIssue423",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeFunctionExpressionInCall",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverOverrideNewValues",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs4",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions10",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions13",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions22",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions23",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions9",
                    "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testMakeLocalNamesUniqueWithContext5"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below are buggy method(s) from a large Java project. These methods cause one or more test failures.\nYour task is to fix the bugs in these methods. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Methods\n\n\n```java\n\n  @Override\n  public void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n      // If the contextual renamer is being used the starting context can not\n      // be a function.\n      Preconditions.checkState(\n          declarationRoot.getType() != Token.FUNCTION ||\n          !(rootRenamer instanceof ContextualRenamer));\n      Preconditions.checkState(t.inGlobalScope());\n      renamer = rootRenamer;\n    } else {\n      renamer = nameStack.peek().forChildScope();\n    }\n\n    if (declarationRoot.getType() == Token.FUNCTION) {\n      for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n        String name = c.getString();\n        renamer.addDeclaredName(name);\n      }\n      Node functionBody = declarationRoot.getLastChild();\n      findDeclaredNames(functionBody, null, renamer);\n    }  else \n    if (declarationRoot.getType() != Token.FUNCTION) {\n      // Add the block declarations\n      findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n  }\n\n```\n\n```java\n\n  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n\n\n          // Add the function parameters\n\n          // Add the function body declarations\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n  }\n\n```\n\n```java\n\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }\n  }\n\n```\n\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n  public void testInline19b() {\n    helperInlineReferenceToFunction(\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){y = a; x = b;}; \" +\n        \"function bar() { foo(x,y); }\",\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){y = a; x = b;}; \" +\n        \"function bar() {\" +\n           \"{var b$$inline_1=y;\" +\n            \"y = x;\" +\n            \"x = b$$inline_1;}\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 1: junit.framework.AssertionFailedError:\n \n#Test method 2:\n```java\n  public void testInlineIntoLoop() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n        \"for(;1;){ foo(1); }\",\n        \"function foo(a){var b;return a;}; \" +\n        \"for(;1;){ {\" +\n            \"var b$$inline_1=void 0;1}}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n        \"do{ foo(1); } while(1)\",\n        \"function foo(a){var b;return a;}; \" +\n        \"do{ {\" +\n            \"var b$$inline_1=void 0;1}}while(1)\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){for(var b in c)return a;}; \" +\n        \"for(;1;){ foo(1); }\",\n        \"function foo(a){var b;for(b in c)return a;}; \" +\n        \"for(;1;){ {JSCompiler_inline_label_foo_2:{\" +\n            \"var b$$inline_1=void 0;for(b$$inline_1 in c){\" +\n              \"1;break JSCompiler_inline_label_foo_2\" +\n            \"}}}}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 2: junit.framework.AssertionFailedError:\n \n#Test method 3:\n```java\n  public void testInline13() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"function foo(a){return a;}; \" +\n        \"function x() {{var a$$inline_0=x++;\" +\n            \"a$$inline_0}}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 3: junit.framework.AssertionFailedError:\n \n#Test method 4:\n```java\n  public void testInline14() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(x++);\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=x++;\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 4: junit.framework.AssertionFailedError:\n \n#Test method 5:\n```java\n  public void testInline15() {\n    // Parameter has mutable, references more than once.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(new Date());\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=new Date();\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 5: junit.framework.AssertionFailedError:\n \n#Test method 6:\n```java\n  public void testInline16() {\n    // Parameter is large, references more than once.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(function(){});\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=function(){};\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 6: junit.framework.AssertionFailedError:\n \n#Test method 7:\n```java\n  public void testInline17() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; foo(goo());\",\n        \"function foo(a){return true;};\" +\n            \"{var a$$inline_0=goo();true}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 7: junit.framework.AssertionFailedError:\n \n#Test method 8:\n```java\n  public void testInline18() {\n    // This doesn't bring names into the global name space.\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n            \"function x() { foo(goo()); }\",\n            \"function foo(a){var b;return a;}; \" +\n            \"function x() {{var a$$inline_0=goo();\" +\n                \"var b$$inline_1;a$$inline_0}}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 8: junit.framework.AssertionFailedError:\n \n#Test method 9:\n```java\n  public void testInline19() {\n    // Properly alias.\n    helperInlineReferenceToFunction(\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){x = b; y = a;}; \" +\n        \"function bar() { foo(x,y); }\",\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){x = b; y = a;}; \" +\n        \"function bar() {\" +\n           \"{var a$$inline_0=x;\" +\n            \"x = y;\" +\n            \"y = a$$inline_0;}\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 9: junit.framework.AssertionFailedError:\n \n#Test method 10:\n```java\n  public void testBug1897706() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){}; foo(x())\",\n        \"function foo(a){}; {var a$$inline_0=x()}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){bar()}; foo(x())\",\n        \"function foo(a){bar()}; {var a$$inline_0=x();bar()}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a,b){bar()}; foo(x(),y())\",\n        \"function foo(a,b){bar()};\" +\n        \"{var a$$inline_0=x();var b$$inline_1=y();bar()}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 10: junit.framework.AssertionFailedError:\n \n#Test method 11:\n```java\n  public void testInlineFunctionWithInnerFunction5() {\n    // Call with inner function statement.\n    helperInlineReferenceToFunction(\n        \"function foo(){function x() {var a; return true;} return x}; foo();\",\n        \"function foo(){function x(){var a;return true}return x};\" +\n            \"{var x$$inline_0 = function(){\" +\n            \"var a$$inline_1;return true};x$$inline_0}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 11: junit.framework.AssertionFailedError:\n \n#Test method 12:\n```java\n  public void testMutateWithParameters3() {\n    // Parameter has side-effects.\n    helperMutate(\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"{var a$$inline_0 = x++; a$$inline_0}\",\n        \"foo\", null);\n  }\n```\n#Error message from the test method 12: junit.framework.AssertionFailedError:\n \n#Test method 13:\n```java\n  public void testMutateCallInLoopVars1() {\n    // baseline: outside a loop, the constant remains constant.\n    boolean callInLoop = false;\n    helperMutate(\n        \"function foo(a){var B = bar(); a;}; foo(1);\",\n        \"{var B$$inline_1=bar(); 1;}\",\n        \"foo\", null, false, callInLoop);\n    // ... in a loop, the constant-ness is removed.\n    // TODO(johnlenz): update this test to look for the const annotation.\n    callInLoop = true;\n    helperMutate(\n        \"function foo(a){var B = bar(); a;}; foo(1);\",\n        \"{var B$$inline_1 = bar(); 1;}\",\n        \"foo\", null, false, callInLoop);\n  }\n```\n#Error message from the test method 13: junit.framework.AssertionFailedError:\n \n#Test method 14:\n```java\n  public void testMutateInitializeUninitializedVars1() {\n    helperMutate(\n        \"function foo(a){var b;return a;}; foo(1);\",\n        \"{var b$$inline_1=void 0;1}\",\n        \"foo\", null, false, true);\n  }\n```\n#Error message from the test method 14: junit.framework.AssertionFailedError:\n \n#Test method 15:\n```java\n  public void testMutateInitializeUninitializedVars2() {\n    helperMutate(\n        \"function foo(a){for(var b in c)return a;}; foo(1);\",\n        \"{JSCompiler_inline_label_foo_2:\" +\n          \"{\" +\n            \"for(var b$$inline_1 in c){\" +\n                \"1;break JSCompiler_inline_label_foo_2\" +\n             \"}\" +\n          \"}\" +\n        \"}\",\n        \"foo\", null);\n  }\n```\n#Error message from the test method 15: junit.framework.AssertionFailedError:\n \n#Test method 16:\n```java\n  public void testMutateFunctionDefinition() {\n     // function declarations are rewritten as function\n     // expressions\n     helperMutate(\n        \"function foo(a){function g(){}}; foo(1);\",\n        \"{var g$$inline_1=function(){};}\",\n        \"foo\", null);\n  }\n```\n#Error message from the test method 16: junit.framework.AssertionFailedError:\n \n#Test method 17:\n```java\n  public void testMutate8() {\n    // Parameter has side-effects.\n    helperMutate(\n        \"function foo(a){return a+a;}; foo(x++);\",\n        \"{var a$$inline_0 = x++;\" +\n            \"a$$inline_0 + a$$inline_0;}\",\n        \"foo\", null);\n  }\n```\n#Error message from the test method 17: junit.framework.AssertionFailedError:\n \n#Test method 18:\n```java\n  public void testLoopWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariableInLoop_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"    var arr = [1, 2, 3, 4, 5];\\n\" +\n        \"    for (var i = 0, l = arr.length; i < l; i++) {\\n\" +\n        \"      var j = arr[i];\\n\" +\n        // don't inline this function, because the correct behavior depends\n        // captured values.\n        \"      (function() {\\n\" +\n        \"        var k = j;\\n\" +\n        \"        setTimeout(function() { result += k; }, 5 * i);\\n\" +\n        \"      })();\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariableInLoop_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\" +\n        \"  var arr$$inline_0=[1,2,3,4,5];\\n\" +\n        \"  var i$$inline_1=0;\\n\" +\n        \"  var l$$inline_2=arr$$inline_0.length;\\n\" +\n        \"  for(;i$$inline_1<l$$inline_2;i$$inline_1++){\\n\" +\n        \"    var j$$inline_3=arr$$inline_0[i$$inline_1];\\n\" +\n        \"    (function(){\\n\" +\n        \"       var k$$inline_4=j$$inline_3;\\n\" +\n        \"       setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)\\n\" +\n        \"     })()\\n\" +\n        \"  }\\n\" +\n        \"  }\\n\" +\n        \"}\");\n  }\n```\n#Error message from the test method 18: junit.framework.AssertionFailedError:\n \n#Test method 19:\n```java\n  public void testShadowVariables16() {\n    assumeMinimumCapture = false;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n\n  }\n```\n#Error message from the test method 19: junit.framework.AssertionFailedError:\n \n#Test method 20:\n```java\n  public void testShadowVariables18() {\n    test(\"var a=0;\" +\n        \"function bar(){return a+a}\" +\n        \"function foo(){var a=3;return bar()}\" +\n        \"function _goo(){var a=2;var x=foo();}\",\n\n        \"var a=0;\" +\n        \"function _goo(){var a$$2=2;var x;\" +\n        \"{var a$$inline_0=3;x=a+a}}\");\n  }\n```\n#Error message from the test method 20: junit.framework.AssertionFailedError:\n \n#Test method 21:\n```java\n  public void testCostBasedInlining11() {\n    // With block inlining\n    test(\"function f(a){return a + a;}\" +\n         \"var a = f(f(1))\",\n         \"var a;\" +\n         \"{var a$$inline_0=1+1;\" +\n         \"a=a$$inline_0+a$$inline_0}\");\n  }\n```\n#Error message from the test method 21: junit.framework.AssertionFailedError:\n \n#Test method 22:\n```java\n  public void testMixedModeInliningCosting3() {\n    // Do inline here because the function definition can be eliminated.\n    test(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+10}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3,x())\",\n\n        \"1+2+1+2+4+5+6+7+8+9+1+2+3+10;\" +\n        \"{var JSCompiler_inline_anon_param_2=x();\" +\n        \"2+3+2+3+4+5+6+7+8+9+1+2+3+10}\");\n  }\n```\n#Error message from the test method 22: junit.framework.AssertionFailedError:\n \n#Test method 23:\n```java\n  public void testInlineNeverMutateConstants() {\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }\n```\n#Error message from the test method 23: junit.framework.AssertionFailedError:\n \n#Test method 24:\n```java\n  public void testInlineWithThis7() {\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(a){a=1;this} f.call();\",\n         \"{var a$$inline_0=void 0; a$$inline_0=1; void 0;}\");\n    test(\"function f(a){a=1;this} f.call(x, x);\",\n         \"{var a$$inline_0=x; a$$inline_0=1; x;}\");\n  }\n```\n#Error message from the test method 24: junit.framework.AssertionFailedError:\n \n#Test method 25:\n```java\n  public void testAnonymous1() {\n    assumeMinimumCapture = false;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n         \"{var a$$inline_0=10;\" +\n         \"{var b$$inline_1=a$$inline_0;\" +\n         \"a$$inline_0++;alert(b$$inline_1)}}\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n        \"{var a$$inline_2=10;\" +\n        \"{var b$$inline_0=a$$inline_2;\" +\n        \"a$$inline_2++;alert(b$$inline_0)}}\");\n  }\n```\n#Error message from the test method 25: junit.framework.AssertionFailedError:\n \n#Test method 26:\n```java\n  public void testAnonymous3() {\n    // Introducing a new value into is tricky\n    assumeMinimumCapture = false;\n    testSame(\"(function(){var a=10;(function(){arguments;})()})();\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){arguments;})()})();\",\n         \"{var a$$inline_0=10;(function(){arguments;})();}\");\n\n    test(\"(function(){(function(){arguments;})()})();\",\n        \"{(function(){arguments;})()}\");\n  }\n```\n#Error message from the test method 26: junit.framework.AssertionFailedError:\n \n#Test method 27:\n```java\n  public void testShadowVariables1() {\n    // The Normalize pass now guarantees that that globals are never shadowed\n    // by locals.\n\n    // \"foo\" is inlined here as its parameter \"a\" doesn't conflict.\n    // \"bar\" is assigned a new name.\n    test(\"var a=0;\" +\n         \"function foo(a){return 3+a}\" +\n         \"function bar(){var a=foo(4)}\" +\n         \"bar();\",\n\n         \"var a=0;\" +\n         \"{var a$$inline_0=3+4}\");\n  }\n```\n#Error message from the test method 27: junit.framework.AssertionFailedError:\n \n#Test method 28:\n```java\n  public void testShadowVariables3() {\n    // \"foo\" is inlined into exported \"_bar\", aliasing foo's \"a\".\n    test(\"var a=0;\" +\n        \"function foo(){var a=2;return 3+a}\" +\n        \"function _bar(){a=foo()}\",\n\n        \"var a=0;\" +\n        \"function _bar(){{var a$$inline_0=2;\" +\n        \"a=3+a$$inline_0}}\");\n  }\n```\n#Error message from the test method 28: junit.framework.AssertionFailedError:\n \n#Test method 29:\n```java\n  public void testShadowVariables6() {\n    test(\"var a=0;\" +\n        \"function foo(){var a=4;return 3+a}\" +\n        \"function _bar(a){a=foo(4)}\",\n\n        \"var a=0;function _bar(a$$2){{\" +\n        \"var a$$inline_0=4;\" +\n        \"a$$2=3+a$$inline_0}}\");\n  }\n```\n#Error message from the test method 29: junit.framework.AssertionFailedError:\n \n#Test method 30:\n```java\n  public void testShadowVariables7() {\n    assumeMinimumCapture = false;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n  }\n```\n#Error message from the test method 30: junit.framework.AssertionFailedError:\n \n#Test method 31:\n```java\n  public void testFunctionExpressionCallInlining11b() {\n    assumeMinimumCapture = false;\n    // Can't inline functions that return inner functions and have local names.\n    testSame(\"((function(){var a; return function(){foo()}})())();\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"((function(){var a; return function(){foo()}})())();\",\n\n        \"{var JSCompiler_inline_result$$0;\" +\n        \"var a$$inline_1;\" +\n        \"JSCompiler_inline_result$$0=function(){foo()};}\" +\n        \"JSCompiler_inline_result$$0()\");\n\n  }\n```\n#Error message from the test method 31: junit.framework.AssertionFailedError:\n \n#Test method 32:\n```java\n  public void testComplexInlineNoResultNoParamCall3() {\n    // We now allow vars in the global space.\n    //   Don't inline into vars into global scope.\n    //   testSame(\"function f(){a();b();var z=1+1}f()\");\n\n    // But do inline into functions\n    test(\"function f(){a();b();var z=1+1}function _foo(){f()}\",\n         \"function _foo(){{a();b();var z$$inline_0=1+1}}\");\n\n  }\n```\n#Error message from the test method 32: junit.framework.AssertionFailedError:\n \n#Test method 33:\n```java\n  public void testCostBasedInlining9() {\n    // Here both direct and block inlining is used.  The call to f as a\n    // parameter is inlined directly, which the call to f with f as a parameter\n    // is inlined using block inlining.\n    test(\"function f(a){return 1 + a + a;}\" +\n         \"var a = f(f(1));\",\n         \"var a;\" +\n         \"{var a$$inline_0=1+1+1;\" +\n         \"a=1+a$$inline_0+a$$inline_0}\");\n  }\n```\n#Error message from the test method 33: junit.framework.AssertionFailedError:\n \n#Test method 34:\n```java\n  public void testMethodWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariable_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"      var j = [i];\\n\" +\n        \"      (function(j) {\\n\" +\n        \"        setTimeout(function() { result += j; }, 5 * i);\\n\" +\n        \"      })(j);\\n\" +\n        \"      j = null;\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariable_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_2=[i];\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_0=j$$inline_2;\\n\" +  // this temp is needed.\n        \"  setTimeout(function(){result+=j$$inline_0},5*i);\\n\" +\n        \"  }\\n\" +\n        \"  j$$inline_2=null\\n\" + // because this value can be modified later.\n        \"  }\\n\" +\n        \"}\");\n  }\n```\n#Error message from the test method 34: junit.framework.AssertionFailedError:\n \n#Test method 35:\n```java\n  public void testFunctionExpressionYCombinator() {\n    assumeMinimumCapture = false;\n    testSame(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\",\n        \"var factorial;\\n\" +\n        \"{\\n\" +\n        \"var M$$inline_4 = function(f$$2) {\\n\" +\n        \"  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\\n\" +\n        \"};\\n\" +\n        \"{\\n\" +\n        \"var f$$inline_0=function(f$$inline_7){\\n\" +\n        \"  return M$$inline_4(\\n\" +\n        \"    function(arg$$inline_8){\\n\" +\n        \"      return f$$inline_7(f$$inline_7)(arg$$inline_8)\\n\" +\n        \"     })\\n\" +\n        \"};\\n\" +\n        \"factorial=M$$inline_4(\\n\" +\n        \"  function(arg$$inline_1){\\n\" +\n        \"    return f$$inline_0(f$$inline_0)(arg$$inline_1)\\n\" +\n        \"});\\n\" +\n        \"}\\n\" +\n        \"}\" +\n        \"factorial(5)\");\n  }\n```\n#Error message from the test method 35: junit.framework.AssertionFailedError:\n \n#Test method 36:\n```java\n  public void testComplexInlineVars7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;var z=f(1,b)\",\n         \"var b=1;var z;\" +\n         \"{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2\" +\n         \"}else{\" +\n         \"z=true;break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }\n```\n#Error message from the test method 36: junit.framework.AssertionFailedError:\n \n#Test method 37:\n```java\n  public void testComplexFunctionWithFunctionDefinition2a() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"(function(){\" +\n        \"var f = function(a){call(function(){return a})};f()})()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }\n```\n#Error message from the test method 37: junit.framework.AssertionFailedError:\n \n#Test method 38:\n```java\n  public void testComplexInline7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;z=f(1,b)\",\n         \"var b=1;{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2}else{z=true;\" +\n         \"break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }\n```\n#Error message from the test method 38: junit.framework.AssertionFailedError:\n \n#Test method 39:\n```java\n  public void testFunctionExpressionOmega() {\n    // ... with unused recursive name.\n    test(\"(function (f){f(f)})(function(f){f(f)})\",\n         \"{var f$$inline_0=function(f$$1){f$$1(f$$1)};\" +\n          \"{{f$$inline_0(f$$inline_0)}}}\");\n  }\n```\n#Error message from the test method 39: junit.framework.AssertionFailedError:\n \n#Test method 40:\n```java\n  public void testInlineFunctions15b() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline closure with locals into global scope.\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"function foo(){var x;return function(a){return a+1}}\" +\n         \"var d=c+foo()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"var JSCompiler_temp_const$$0 = c;\\n\" +\n         \"{\\n\" +\n         \"var JSCompiler_inline_result$$1;\\n\" +\n         \"var x$$inline_2;\\n\" +\n         \"JSCompiler_inline_result$$1 = \" +\n         \"    function(a$$inline_3){ return a$$inline_3+1 };\\n\" +\n         \"}\" +\n         \"var d=JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1\");\n  }\n```\n#Error message from the test method 40: junit.framework.AssertionFailedError:\n \n#Test method 41:\n```java\n  public void testInlineFunctions15d() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function foo(){var x; return function(a){return a+1}}\" +\n         \"function _x(){ var d=c+foo() }\");\n\n    assumeMinimumCapture = true;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function _x() { \\n\" +\n         \"  var JSCompiler_temp_const$$0 = c;\\n\" +\n         \"  {\\n\" +\n         \"  var JSCompiler_inline_result$$1;\\n\" +\n         \"  var x$$inline_2;\\n\" +\n         \"  JSCompiler_inline_result$$1 = \" +\n         \"      function(a$$inline_3) {return a$$inline_3+1};\\n\" +\n         \"  }\\n\" +\n         \"  var d = JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\\n\" +\n         \"}\");\n  }\n```\n#Error message from the test method 41: junit.framework.AssertionFailedError:\n \n#Test method 42:\n```java\n  public void testInlineFunctions16a() {\n    assumeMinimumCapture = false;\n\n    testSame(\"function foo(b){return window.bar(function(){c(b)})}\" +\n         \"var d=foo(e)\");\n\n    assumeMinimumCapture = true;\n\n    test(\n        \"function foo(b){return window.bar(function(){c(b)})}\" +\n        \"var d=foo(e)\",\n        \"var d;{var b$$inline_0=e;\" +\n        \"d=window.bar(function(){c(b$$inline_0)})}\");\n  }\n```\n#Error message from the test method 42: junit.framework.AssertionFailedError:\n \n#Test method 43:\n```java\n  public void testBug4944818() {\n    test(\n        \"var getDomServices_ = function(self) {\\n\" +\n        \"  if (!self.domServices_) {\\n\" +\n        \"    self.domServices_ = goog$component$DomServices.get(\" +\n        \"        self.appContext_);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  return self.domServices_;\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"var getOwnerWin_ = function(self) {\\n\" +\n        \"  return getDomServices_(self).getDomHelper().getWindow();\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"HangoutStarter.prototype.launchHangout = function() {\\n\" +\n        \"  var self = a.b;\\n\" +\n        \"  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\\n\" +\n        \"};\",\n        \"HangoutStarter.prototype.launchHangout = function() { \" +\n        \"  var self$$2 = a.b;\" +\n        \"  var JSCompiler_temp_const$$0 = goog.Uri;\" +\n        \"  {\" +\n        \"  var JSCompiler_inline_result$$1;\" +\n        \"  var self$$inline_2 = self$$2;\" +\n        \"  if (!self$$inline_2.domServices_) {\" +\n        \"    self$$inline_2.domServices_ = goog$component$DomServices.get(\" +\n        \"        self$$inline_2.appContext_);\" +\n        \"  }\" +\n        \"  JSCompiler_inline_result$$1=self$$inline_2.domServices_;\" +\n        \"  }\" +\n        \"  var myUrl = new JSCompiler_temp_const$$0(\" +\n        \"      JSCompiler_inline_result$$1.getDomHelper().\" +\n        \"          getWindow().location.href)\" +\n        \"}\");\n  }\n```\n#Error message from the test method 43: junit.framework.AssertionFailedError:\n \n#Test method 44:\n```java\n  public void testComplexSample() {\n    String result = \"\" +\n      \"{{\" +\n      \"var styleSheet$$inline_2=null;\" +\n      \"if(goog$userAgent$IE)\" +\n        \"styleSheet$$inline_2=0;\" +\n      \"else \" +\n        \"var head$$inline_3=0;\" +\n      \"{\" +\n        \"var element$$inline_4=\" +\n            \"styleSheet$$inline_2;\" +\n        \"var stylesString$$inline_5=a;\" +\n        \"if(goog$userAgent$IE)\" +\n          \"element$$inline_4.cssText=\" +\n              \"stylesString$$inline_5;\" +\n        \"else \" +\n        \"{\" +\n          \"var propToSet$$inline_6=\" +\n              \"\\\"innerText\\\";\" +\n          \"element$$inline_4[\" +\n              \"propToSet$$inline_6]=\" +\n                  \"stylesString$$inline_5\" +\n        \"}\" +\n      \"}\" +\n      \"styleSheet$$inline_2\" +\n      \"}}\";\n\n    test(\"var foo = function(stylesString, opt_element) { \" +\n        \"var styleSheet = null;\" +\n        \"if (goog$userAgent$IE)\" +\n          \"styleSheet = 0;\" +\n        \"else \" +\n          \"var head = 0;\" +\n        \"\" +\n        \"goo$zoo(styleSheet, stylesString);\" +\n        \"return styleSheet;\" +\n     \" };\\n \" +\n\n     \"var goo$zoo = function(element, stylesString) {\" +\n        \"if (goog$userAgent$IE)\" +\n          \"element.cssText = stylesString;\" +\n        \"else {\" +\n          \"var propToSet = 'innerText';\" +\n          \"element[propToSet] = stylesString;\" +\n        \"}\" +\n      \"};\" +\n      \"(function(){foo(a,b);})();\",\n     result);\n  }\n```\n#Error message from the test method 44: junit.framework.AssertionFailedError:\n \n#Test method 45:\n```java\n  public void testNoInlineIfParametersModified1() {\n    // Assignment\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }\n```\n#Error message from the test method 45: junit.framework.AssertionFailedError:\n \n#Test method 46:\n```java\n  public void testNoInlineIfParametersModified2() {\n    test(\"function f(x){return (x)=1;}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0=1}\");\n  }\n```\n#Error message from the test method 46: junit.framework.AssertionFailedError:\n \n#Test method 47:\n```java\n  public void testNoInlineIfParametersModified3() {\n    // Assignment variant.\n    test(\"function f(x){return x*=2}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0*=2}\");\n  }\n```\n#Error message from the test method 47: junit.framework.AssertionFailedError:\n \n#Test method 48:\n```java\n  public void testNoInlineIfParametersModified4() {\n    // Assignment in if.\n    test(\"function f(x){return x?(x=2):0}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0?(\" +\n         \"x$$inline_0=2):0}\");\n  }\n```\n#Error message from the test method 48: junit.framework.AssertionFailedError:\n \n#Test method 49:\n```java\n  public void testNoInlineIfParametersModified5() {\n    // Assignment in if, multiple params\n    test(\"function f(x,y){return x?(y=2):0}f(2,undefined)\",\n         \"{var y$$inline_1=undefined;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }\n```\n#Error message from the test method 49: junit.framework.AssertionFailedError:\n \n#Test method 50:\n```java\n  public void testNoInlineIfParametersModified6() {\n    test(\"function f(x,y){return x?(y=2):0}f(2)\",\n         \"{var y$$inline_1=void 0;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }\n```\n#Error message from the test method 50: junit.framework.AssertionFailedError:\n \n#Test method 51:\n```java\n  public void testNoInlineIfParametersModified7() {\n    // Increment\n    test(\"function f(a){return++a<++a}f(1)\",\n         \"{var a$$inline_0=1;\" +\n         \"++a$$inline_0<\" +\n         \"++a$$inline_0}\");\n  }\n```\n#Error message from the test method 51: junit.framework.AssertionFailedError:\n \n#Test method 52:\n```java\n  public void testIssue423() {\n    assumeMinimumCapture = false;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"(function($){\" +\n        \"  $.fn.multicheck=function(options$$1){\" +\n        \"    {\" +\n        \"     options$$1.checkboxes=$(this).siblings(\\\":checkbox\\\");\" +\n        \"     {\" +\n        \"       $(this).data(\\\"checkboxes\\\")\" +\n        \"     }\" +\n        \"    }\" +\n        \"  }\" +\n        \"})(jQuery)\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"{var $$$inline_0=jQuery;\\n\" +\n        \"$$$inline_0.fn.multicheck=function(options$$inline_4){\\n\" +\n        \"  {options$$inline_4.checkboxes=\" +\n            \"$$$inline_0(this).siblings(\\\":checkbox\\\");\\n\" +\n        \"  {$$$inline_0(this).data(\\\"checkboxes\\\")}\" +\n        \"  }\\n\" +\n        \"}\\n\" +\n        \"}\");\n  }\n```\n#Error message from the test method 52: junit.framework.AssertionFailedError:\n \n#Test method 53:\n```java\n  public void testComplexFunctionWithFunctionDefinition2() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"function f(a){call(function(){return})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }\n```\n#Error message from the test method 53: junit.framework.AssertionFailedError:\n \n#Test method 54:\n```java\n  public void testComplexFunctionWithFunctionDefinition3() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might need to be captured.\n    testSame(\"function f(){var a; call(function(){return a})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function f(){var a; call(function(){return a})}f()\",\n         \"{var a$$inline_0;call(function(){return a$$inline_0})}\");\n\n  }\n```\n#Error message from the test method 54: junit.framework.AssertionFailedError:\n \n#Test method 55:\n```java\n  public void testDecomposeFunctionExpressionInCall() {\n    test(\n        \"(function(map){descriptions_=map})(\\n\" +\n           \"function(){\\n\" +\n              \"var ret={};\\n\" +\n              \"ret[ONE]='a';\\n\" +\n              \"ret[TWO]='b';\\n\" +\n              \"return ret\\n\" +\n           \"}()\\n\" +\n        \");\",\n        \"{\" +\n        \"var JSCompiler_inline_result$$0;\" +\n        \"var ret$$inline_1={};\\n\" +\n        \"ret$$inline_1[ONE]='a';\\n\" +\n        \"ret$$inline_1[TWO]='b';\\n\" +\n        \"JSCompiler_inline_result$$0 = ret$$inline_1;\\n\" +\n        \"}\" +\n        \"{\" +\n        \"descriptions_=JSCompiler_inline_result$$0;\" +\n        \"}\"\n        );\n  }\n```\n#Error message from the test method 55: junit.framework.AssertionFailedError:\n \n#Test method 56:\n```java\n  public void testInlineNeverOverrideNewValues() {\n    test(\"function f(a){return++a<++a}f(1)\",\n        \"{var a$$inline_0=1;\" +\n        \"++a$$inline_0<++a$$inline_0}\");\n  }\n```\n#Error message from the test method 56: junit.framework.AssertionFailedError:\n \n#Test method 57:\n```java\n  public void testInlineBlockMutableArgs1() {\n    test(\"function foo(x){x+x}foo([])\",\n         \"{var x$$inline_0=[];\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n```\n#Error message from the test method 57: junit.framework.AssertionFailedError:\n \n#Test method 58:\n```java\n  public void testInlineBlockMutableArgs2() {\n    test(\"function foo(x){x+x}foo(new Date)\",\n         \"{var x$$inline_0=new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n```\n#Error message from the test method 58: junit.framework.AssertionFailedError:\n \n#Test method 59:\n```java\n  public void testInlineBlockMutableArgs3() {\n    test(\"function foo(x){x+x}foo(true&&new Date)\",\n         \"{var x$$inline_0=true&&new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n```\n#Error message from the test method 59: junit.framework.AssertionFailedError:\n \n#Test method 60:\n```java\n  public void testInlineBlockMutableArgs4() {\n    test(\"function foo(x){x+x}foo({})\",\n         \"{var x$$inline_0={};\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n```\n#Error message from the test method 60: junit.framework.AssertionFailedError:\n \n#Test method 61:\n```java\n  public void testInlineFunctions10() {\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i);y=INC(i)\",\n         \"var y;\" +\n         \"{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\" +\n         \"{var x$$inline_2=i;\" +\n         \"y=x$$inline_2++}\");\n  }\n```\n#Error message from the test method 61: junit.framework.AssertionFailedError:\n \n#Test method 62:\n```java\n  public void testInlineFunctions13() {\n    // inline as block if the input parameter has side-effects.\n    test(\"function f(x){return x}\" +\n         \"var y=f(i++)\",\n         \"var y;{var x$$inline_0=i++;y=x$$inline_0}\");\n  }\n```\n#Error message from the test method 62: junit.framework.AssertionFailedError:\n \n#Test method 63:\n```java\n  public void testInlineFunctions22() {\n    // Another tricky case ... test nested compiler inlines\n    test(\"function plex(a){if(a) return 0;else return 1;}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"function bar(d){return plex(d)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_plex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_plex_1}\" +\n         \"else{\" +\n         \"d=1;break JSCompiler_inline_label_plex_1}d=void 0}}\");\n  }\n```\n#Error message from the test method 63: junit.framework.AssertionFailedError:\n \n#Test method 64:\n```java\n  public void testInlineFunctions23() {\n    // Test both orderings again\n    test(\"function complex(a){if(a) return 0;else return 1;}\" +\n         \"function bar(d){return complex(d)}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_complex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_complex_1\" +\n         \"}else{\" +\n         \"d=1;break JSCompiler_inline_label_complex_1\" +\n         \"}d=void 0}}\");\n  }\n```\n#Error message from the test method 64: junit.framework.AssertionFailedError:\n \n#Test method 65:\n```java\n  public void testInlineFunctions9() {\n    // don't inline if the input parameter is modified.\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i)\",\n         \"var y;{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\");\n  }\n```\n#Error message from the test method 65: junit.framework.AssertionFailedError:\n \n#Test method 66:\n```java\n  public void testMakeLocalNamesUniqueWithContext5() {\n    // Set the test type\n    this.useDefaultRenamer = true;\n\n    testWithInversion(\n        \"function f(){var f; f = 1}\",\n        \"function f(){var f$$1; f$$1 = 1}\");\n    testWithInversion(\n        \"function f(f){f = 1}\",\n        \"function f(f$$1){f$$1 = 1}\");\n    testWithInversion(\n        \"function f(f){var f; f = 1}\",\n        \"function f(f$$1){var f$$1; f$$1 = 1}\");\n\n    test(\n        \"var fn = function f(){var f; f = 1}\",\n        \"var fn = function f(){var f$$1; f$$1 = 1}\");\n    test(\n        \"var fn = function f(f){f = 1}\",\n        \"var fn = function f(f$$1){f$$1 = 1}\");\n    test(\n        \"var fn = function f(f){var f; f = 1}\",\n        \"var fn = function f(f$$1){var f$$1; f$$1 = 1}\");\n  }\n```\n#Error message from the test method 66: junit.framework.AssertionFailedError:\n\n---\n\n## Your Goal\n\nFix the buggy methods. Return only the fixed Java methods. Do not include explanations or other text.\n",
                        "patches": [
                            "\n@Override\npublic void enterScope(NodeTraversal t) {\n  Node declarationRoot = t.getScopeRoot();\n  Renamer renamer;\n  if (nameStack.isEmpty()) {\n    // If the contextual renamer is being used the starting context can not\n    // be a function.\n    Preconditions.checkState(\n        declarationRoot.getType() != Token.FUNCTION ||\n        !(rootRenamer instanceof ContextualRenamer));\n    Preconditions.checkState(t.inGlobalScope());\n    renamer = rootRenamer;\n  } else {\n    renamer = nameStack.peek().forChildScope();\n  }\n\n  if (declarationRoot.getType() == Token.FUNCTION) {\n    Node functionParameters = declarationRoot.getSecondChild();\n    Node c = functionParameters.getFirstChild();\n    while (c != null) {\n      String name = c.getString();\n      renamer.addDeclaredName(name);\n      c = c.getNext();\n    }\n    Node functionBody = declarationRoot.getLastChild();\n    findDeclaredNames(functionBody, null, renamer);\n  } else {\n    // Add the block declarations\n    findDeclaredNames(declarationRoot, null, renamer);\n  }\n  nameStack.push(renamer);\n}\n\n@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      {\n        // Add recursive function name, if needed.\n        // NOTE: \"enterScope\" is called after we need to pick up this name.\n        Renamer renamer = nameStack.peek().forChildScope();\n\n        // If needed, add the function recursive name.\n        String name = n.getFirstChild().getString();\n        if (name != null && !name.isEmpty() && parent != null\n            && !NodeUtil.isFunctionDeclaration(parent)) {\n          renamer.addDeclaredName(name);\n        }\n\n        // Add the function parameters\n\n        // Add the function body declarations\n\n        nameStack.push(renamer);\n      }\n      break;\n\n    case Token.CATCH:\n      {\n        Renamer renamer = nameStack.peek().forChildScope();\n\n        String name = n.getFirstChild().getString();\n        renamer.addDeclaredName(name);\n\n        nameStack.push(renamer);\n      }\n      break;\n  }\n\n  return true;\n}\n\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  switch (n.getType()) {\n    case Token.NAME:\n      String newName = getReplacementName(n.getString());\n      if (newName != null) {\n        Renamer renamer = nameStack.peek();\n        if (renamer.stripConstIfReplaced()) {\n          // TODO: Do we need to do anything about the javadoc?\n          n.removeProp(Node.IS_CONSTANT_NAME);\n        }\n        n.setString(newName);\n        t.getCompiler().reportCodeChange();\n      }\n      break;\n\n    case Token.FUNCTION:\n      // Remove the function body scope\n      // Remove function recursive name (if any).\n      nameStack.pop();\n      break;\n\n    case Token.CATCH:\n      // Remove catch except name from the stack of names.\n      nameStack.pop();\n      break;\n  }\n}\n\n",
                            "\n@Override\npublic void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n        // If the contextual renamer is being used the starting context can not\n        // be a function.\n        Preconditions.checkState(\n            declarationRoot.getToken() != Token.FUNCTION ||\n            !(rootRenamer instanceof ContextualRenamer));\n        Preconditions.checkState(t.inGlobalScope());\n        renamer = rootRenamer;\n    } else {\n        renamer = nameStack.peek().forChildScope();\n    }\n\n    if (declarationRoot.getToken() == Token.FUNCTION) {\n        for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n            String name = c.getString();\n            renamer.addDeclaredName(name);\n        }\n        Node functionBody = declarationRoot.getLastChild();\n        findDeclaredNames(functionBody, null, renamer);\n    } else {\n        // Add the block declarations\n        findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n}\n",
                            "\n@Override\npublic void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n        Preconditions.checkState(\n                declarationRoot.getType() != Token.FUNCTION\n                || !(rootRenamer instanceof ContextualRenamer));\n        Preconditions.checkState(t.inGlobalScope());\n        renamer = rootRenamer;\n    } else {\n        renamer = nameStack.peek().forChildScope();\n    }\n\n    if (declarationRoot.getType() == Token.FUNCTION) {\n        Node params = declarationRoot.getSecondChild();\n        for (Node c = params.getFirstChild(); c != null; c = c.getNext()) {\n            String name = c.getString();\n            renamer.addDeclaredName(name);\n        }\n        Node functionBody = declarationRoot.getLastChild();\n        findDeclaredNames(functionBody, null, renamer);\n    } else {\n        findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n}\n\n@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n        case Token.FUNCTION: {\n            // \"enterScope\" needs to be called before picking up recursive function name\n            Renamer renamer = nameStack.peek().forChildScope();\n            String name = n.getFirstChild().getString();\n            if (name != null && !name.isEmpty() && parent != null\n                    && !NodeUtil.isFunctionDeclaration(n)) {\n                renamer.addDeclaredName(name);\n            }\n            nameStack.push(renamer);\n        }\n        break;\n\n        case Token.CATCH: {\n            Renamer renamer = nameStack.peek().forChildScope();\n            String name = n.getFirstChild().getString();\n            renamer.addDeclaredName(name);\n            nameStack.push(renamer);\n        }\n        break;\n    }\n    return true;\n}\n\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n        case Token.NAME:\n            String replacementName = getReplacementName(n.getString());\n            if (replacementName != null) {\n                Renamer renamer = nameStack.peek();\n                if (renamer.stripConstIfReplaced()) {\n                    n.removeProp(Node.IS_CONSTANT_NAME);\n                }\n                n.setString(replacementName);\n                t.getCompiler().reportCodeChange();\n            }\n            break;\n\n        case Token.FUNCTION:\n        case Token.CATCH:\n            nameStack.pop();\n            break;\n    }\n}\n",
                            "\n@Override\npublic void enterScope(NodeTraversal t) {\n  Node declarationRoot = t.getScopeRoot();\n  Renamer renamer;\n  if (nameStack.isEmpty()) {\n    // If the contextual renamer is being used the starting context can not\n    // be a function.\n    Preconditions.checkState(\n        declarationRoot.getType() != Token.FUNCTION ||\n        !(rootRenamer instanceof ContextualRenamer));\n    Preconditions.checkState(t.inGlobalScope());\n    renamer = rootRenamer;\n  } else {\n    renamer = nameStack.peek().forChildScope();\n  }\n\n  if (declarationRoot.getType() == Token.FUNCTION) {\n    Node paramList = NodeUtil.getFunctionParameters(declarationRoot);\n    for (Node c = paramList.getFirstChild(); c != null; c = c.getNext()) {\n      String name = c.getString();\n      renamer.addDeclaredName(name);\n    }\n    Node functionBody = declarationRoot.getLastChild();\n    findDeclaredNames(functionBody, null, renamer);\n  } else {\n    // Add the block declarations\n    findDeclaredNames(declarationRoot, null, renamer);\n  }\n  nameStack.push(renamer);\n}\n\n@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      {\n        // Add recursive function name, if needed.\n        // NOTE: \"enterScope\" is called after we need to pick up this name.\n        Renamer renamer = nameStack.peek().forChildScope();\n\n        // If needed, add the function recursive name.\n        String name = n.getFirstChild().getString();\n        if (name != null && !name.isEmpty() && parent != null\n            && !NodeUtil.isFunctionDeclaration(n)) {\n          renamer.addDeclaredName(name);\n        }\n\n        // Add the function parameters\n        Node paramList = NodeUtil.getFunctionParameters(n);\n        for (Node c = paramList.getFirstChild(); c != null; c = c.getNext()) {\n          String paramName = c.getString();\n          renamer.addDeclaredName(paramName);\n        }\n\n        nameStack.push(renamer);\n      }\n      break;\n\n    case Token.CATCH:\n      {\n        Renamer renamer = nameStack.peek().forChildScope();\n\n        String name = n.getFirstChild().getString();\n        renamer.addDeclaredName(name);\n\n        nameStack.push(renamer);\n      }\n      break;\n  }\n\n  return true;\n}\n\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  switch (n.getType()) {\n    case Token.NAME:\n      String newName = getReplacementName(n.getString());\n      if (newName != null) {\n        Renamer renamer = nameStack.peek();\n        if (renamer.stripConstIfReplaced()) {\n          // TODO: Check for the javadoc that mentions the constant.\n          n.removeProp(Node.IS_CONSTANT_NAME);\n        }\n        n.setString(newName);\n        t.getCompiler().reportCodeChange();\n      }\n      break;\n\n    case Token.FUNCTION:\n      // Remove the function body scope\n      // Remove function recursive name (if any).\n      nameStack.pop();\n      break;\n\n    case Token.CATCH:\n      // Remove catch except name from the stack of names.\n      nameStack.pop();\n      break;\n  }\n}\n",
                            "\n@Override\npublic void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n        Preconditions.checkState(\n                declarationRoot.getType() != Token.FUNCTION ||\n                !(rootRenamer instanceof ContextualRenamer));\n        Preconditions.checkState(t.inGlobalScope());\n        renamer = rootRenamer;\n    } else {\n        renamer = nameStack.peek().forChildScope();\n    }\n\n    if (declarationRoot.getType() == Token.FUNCTION) {\n        for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n            String name = c.getString();\n            renamer.addDeclaredName(name);\n        }\n    }\n\n    Node bodyNode = NodeUtil.getFunctionBody(declarationRoot);\n    findDeclaredNames(bodyNode, null, renamer);\n\n    nameStack.push(renamer);\n}\n",
                            "\n@Override\npublic void enterScope(NodeTraversal t) {\n  Node declarationRoot = t.getScopeRoot();\n  Renamer renamer;\n  if (nameStack.isEmpty()) {\n    // If the contextual renamer is being used the starting context cannot\n    // be a function.\n    Preconditions.checkState(\n        declarationRoot.getType() != Token.FUNCTION ||\n        !(rootRenamer instanceof ContextualRenamer));\n    Preconditions.checkState(t.inGlobalScope());\n    renamer = rootRenamer;\n  } else {\n    renamer = nameStack.peek().forChildScope();\n  }\n\n  if (declarationRoot.getType() == Token.FUNCTION) {\n    // Add the function parameters to the declared names\n    Node functionParams = declarationRoot.getSecondChild();\n    for (Node c = functionParams.getFirstChild(); c != null; c = c.getNext()) {\n      String name = c.getString();\n      if (name != null && !name.isEmpty()) {\n        renamer.addDeclaredName(name);\n      }\n    }\n    Node functionBody = declarationRoot.getLastChild();\n    findDeclaredNames(functionBody, null, renamer);\n  } else {\n    // Add the block declarations\n    findDeclaredNames(declarationRoot, null, renamer);\n  }\n  nameStack.push(renamer);\n}\n",
                            "\n@Override\npublic void enterScope(NodeTraversal t) {\n  Node declarationRoot = t.getScopeRoot();\n  Renamer renamer;\n  if (nameStack.isEmpty()) {\n    Preconditions.checkState(\n        declarationRoot.getType() != Token.FUNCTION ||\n        !(rootRenamer instanceof ContextualRenamer));\n    Preconditions.checkState(t.inGlobalScope());\n    renamer = rootRenamer;\n  } else {\n    renamer = nameStack.peek().forChildScope();\n  }\n\n  if (declarationRoot.getType() == Token.FUNCTION) {\n    for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n      String name = c.getString();\n      renamer.addDeclaredName(name);\n    }\n    Node functionBody = declarationRoot.getLastChild();\n    findDeclaredNames(functionBody, null, renamer);\n  } else {\n    findDeclaredNames(declarationRoot, null, renamer);\n  }\n  nameStack.push(renamer);\n}\n\n@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  switch (n.getType()) {\n    case Token.FUNCTION: {\n      Renamer renamer = nameStack.isEmpty() ? rootRenamer : nameStack.peek().forChildScope();\n\n      String name = n.getFirstChild().getString();\n      if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) {\n        renamer.addDeclaredName(name);\n      }\n\n      nameStack.push(renamer);\n    }\n    break;\n\n    case Token.CATCH: {\n      Renamer renamer = nameStack.isEmpty() ? rootRenamer : nameStack.peek().forChildScope();\n\n      String name = n.getFirstChild().getString();\n      renamer.addDeclaredName(name);\n\n      nameStack.push(renamer);\n    }\n    break;\n  }\n\n  return true;\n}\n\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  switch (n.getType()) {\n    case Token.NAME:\n      String newName = getReplacementName(n.getString());\n      if (newName != null) {\n        Renamer renamer = nameStack.peek();\n        if (renamer.stripConstIfReplaced()) {\n          n.removeProp(Node.IS_CONSTANT_NAME);\n        }\n        n.setString(newName);\n        t.getCompiler().reportCodeChange();\n      }\n      break;\n\n    case Token.FUNCTION:\n      nameStack.pop();\n      break;\n\n    case Token.CATCH:\n      nameStack.pop();\n      break;\n  }\n}\n",
                            "\n@Override\npublic void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n        // If the contextual renamer is being used the starting context cannot\n        // be a function.\n        Preconditions.checkState(\n            declarationRoot.getType() != Token.FUNCTION ||\n            !(rootRenamer instanceof ContextualRenamer));\n        Preconditions.checkState(t.inGlobalScope());\n        renamer = rootRenamer;\n    } else {\n        renamer = nameStack.peek().forChildScope();\n    }\n\n    if (declarationRoot.getType() == Token.FUNCTION) {\n        for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n            String name = c.getString();\n            renamer.addDeclaredName(name);\n        }\n        Node functionBody = declarationRoot.getLastChild();\n        findDeclaredNames(functionBody, null, renamer);\n    } else {\n        // Add the block declarations\n        findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n}\n",
                            "\n@Override\npublic void enterScope(NodeTraversal t) {\n  Node declarationRoot = t.getScopeRoot();\n  Renamer renamer;\n  if (nameStack.isEmpty()) {\n    // If the contextual renamer is being used the starting context can not\n    // be a function.\n    Preconditions.checkState(\n        declarationRoot.getType() != Token.FUNCTION ||\n        !(rootRenamer instanceof ContextualRenamer));\n    Preconditions.checkState(t.inGlobalScope());\n    renamer = rootRenamer;\n  } else {\n    renamer = nameStack.peek().forChildScope();\n  }\n\n  if (declarationRoot.getType() == Token.FUNCTION) {\n    Node params = declarationRoot.getSecondChild();\n    for (Node c = params.getFirstChild(); c != null; c = c.getNext()) {\n      String name = c.getString();\n      renamer.addDeclaredName(name);\n    }\n    Node functionBody = declarationRoot.getLastChild();\n    findDeclaredNames(functionBody, null, renamer);\n  } else {\n    // Add the block declarations\n    findDeclaredNames(declarationRoot, null, renamer);\n  }\n  nameStack.push(renamer);\n}\n",
                            "\n@Override\npublic void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    \n    if (nameStack.isEmpty()) {\n        Preconditions.checkState(\n            declarationRoot.getType() != Token.FUNCTION ||\n            !(rootRenamer instanceof ContextualRenamer));\n        Preconditions.checkState(t.inGlobalScope());\n        renamer = rootRenamer;\n    } else {\n        renamer = nameStack.peek().forChildScope();\n    }\n    \n    if (declarationRoot.isFunction()) {\n        for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n            String name = c.getString();\n            renamer.addDeclaredName(name);\n        }\n        Node functionBody = declarationRoot.getLastChild();\n        findDeclaredNames(functionBody, null, renamer);\n    } else {\n        findDeclaredNames(declarationRoot, null, renamer);\n    }\n    \n    nameStack.push(renamer);\n}\n\n@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n        case Token.FUNCTION: {\n            Renamer renamer = nameStack.peek().forChildScope();\n            \n            String name = n.getFirstChild().getString();\n            if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) {\n                renamer.addDeclaredName(name);\n            }\n            \n            nameStack.push(renamer);\n        }\n        break;\n\n        case Token.CATCH: {\n            Renamer renamer = nameStack.peek().forChildScope();\n            \n            String name = n.getFirstChild().getString();\n            renamer.addDeclaredName(name);\n            \n            nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n}\n\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n        case Token.NAME: {\n            String newName = getReplacementName(n.getString());\n            if (newName != null) {\n                Renamer renamer = nameStack.peek();\n                if (renamer.stripConstIfReplaced()) {\n                    n.removeProp(Node.IS_CONSTANT_NAME);\n                }\n                n.setString(newName);\n                t.getCompiler().reportCodeChange();\n            }\n            break;\n        }\n\n        case Token.FUNCTION:\n        case Token.CATCH:\n            nameStack.pop();\n            break;\n    }\n}\n"
                        ]
                    }
                }
            },
            {
                "path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
                "start_loc": 113,
                "end_loc": 153,
                "buggy_function": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n\n\n          // Add the function parameters\n\n          // Add the function body declarations\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n  }\n",
                "fixed_function": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.LP: {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // Add the function parameters\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            String name = c.getString();\n            renamer.addDeclaredName(name);\n          }\n\n          // Add the function body declarations\n          Node functionBody = n.getNext();\n          findDeclaredNames(functionBody, null, renamer);\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n  }\n",
                "comment": "",
                "normalized_body": [
                    "@Override public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { switch(n.getType()) { case Token.FUNCTION: { Renamer renamer = nameStack.peek().forChildScope(); String name = n.getFirstChild().getString(); if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) { renamer.addDeclaredName(name); } nameStack.push(renamer); } break; case Token.CATCH: { Renamer renamer = nameStack.peek().forChildScope(); String name = n.getFirstChild().getString(); renamer.addDeclaredName(name); nameStack.push(renamer); } break; } return true; }",
                    "@Override public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { return true; }"
                ],
                "top_similar_methods": [
                    [
                        1.0000001192092896,
                        "@Override public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { switch(n.getType()) { case Token.FUNCTION: { Renamer renamer = nameStack.peek().forChildScope(); String name = n.getFirstChild().getString(); if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) { renamer.addDeclaredName(name); } nameStack.push(renamer); } break; case Token.CATCH: { Renamer renamer = nameStack.peek().forChildScope(); String name = n.getFirstChild().getString(); renamer.addDeclaredName(name); nameStack.push(renamer); } break; } return true; }"
                    ],
                    [
                        0.9855446815490723,
                        "@Override public void visit(NodeTraversal t, Node n, Node parent) { int nodeType = n.getType(); if (nodeType == Token.CALL || nodeType == Token.NEW) { Callsite callsite = createCallsite(n); Node containingFunctionNode = t.getScopeRoot(); Function containingFunction = functionsByNode.get(containingFunctionNode); if (containingFunction == null) { containingFunction = createFunction(containingFunctionNode); } callsite.containingFunction = containingFunction; containingFunction.addCallsiteInFunction(callsite); connectCallsiteToTargets(callsite, provider); } else if (NodeUtil.isFunction(n)) { if (!functionsByNode.containsKey(n)) { createFunction(n); } } }"
                    ],
                    [
                        0.984060525894165,
                        "private static Method findSetterMethod(Method[] methods, String name, String prefix) { String newStyleName = \\\"set\\\" + Character.toUpperCase(name.charAt(0)) + name.substring(1); for (Method method : methods) { JSSetter annotation = method.getAnnotation(JSSetter.class); if (annotation != null) { if (name.equals(annotation.value()) || (\\\"\\\".equals(annotation.value()) && newStyleName.equals(method.getName()))) { return method; } } } String oldStyleName = prefix + name; for (Method method : methods) { if (oldStyleName.equals(method.getName())) { return method; } } return null; }"
                    ],
                    [
                        0.9835906028747559,
                        "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.getType() != Token.NAME) { return; } String name = n.getString(); if (name.isEmpty() || compiler.getCodingConvention().isExported(name)) { return; } Var v = t.getScope().getVar(name); if (v == null || !v.isGlobal()) { return; } NamedInfo info = getNamedInfo(v); if (info.allowMove) { if (maybeProcessDeclaration(t, n, parent, info)) { if (hasConditionalAncestor(parent.getParent())) { info.allowMove = false; } } else { processReference(t, info, name); } } }"
                    ],
                    [
                        0.9831261038780212,
                        "Node decompileFunctionHeader(FunctionNode fn) { Node mexpr = null; if (fn.getFunctionName() != null) { decompiler.addName(fn.getName()); } else if (fn.getMemberExprNode() != null) { mexpr = transform(fn.getMemberExprNode()); } decompiler.addToken(Token.LP); List<AstNode> params = fn.getParams(); for (int i = 0; i < params.size(); i++) { decompile(params.get(i)); if (i < params.size() - 1) { decompiler.addToken(Token.COMMA); } } decompiler.addToken(Token.RP); if (!fn.isExpressionClosure()) { decompiler.addEOL(Token.LC); } return mexpr; }"
                    ],
                    [
                        0.9828211665153503,
                        "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (parent == null) { return; } if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) { return; } DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) { return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) { removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); }"
                    ],
                    [
                        0.982090413570404,
                        "@Override public ConcreteType getTypeWithProperty(String field, ConcreteType type) { if (type.isInstance()) { ConcreteInstanceType instanceType = (ConcreteInstanceType) type; return instanceType.getInstanceTypeWithProperty(field); } else if (type.isFunction()) { if (\\\"prototype\\\".equals(field) || codingConvention.isSuperClassReference(field)) { return type; } } else if (type.isNone()) { return new ConcreteUniqueType(++nextUniqueId); } else if (type.isUnion()) { for (ConcreteType t : ((ConcreteUnionType) type).getAlternatives()) { ConcreteType ret = getTypeWithProperty(field, t); if (ret != null) { return ret; } } } return null; }"
                    ],
                    [
                        0.9818448424339294,
                        "@Override public void visit(Node n) { if (NodeUtil.isLoopStructure(n)) { loopsEntered--; if (!inLoop() && !sideEffectSeen) { parametersReferenced.clear(); } } if (!sideEffectSeen) { if (hasNonLocalSideEffect(n)) { sideEffectSeen = true; } } if (inLoop() || sideEffectSeen) { if (n.getType() == Token.NAME) { String name = n.getString(); if (parameters.contains(name)) { parametersReferenced.add(name); } } else if (n.getType() == Token.THIS) { parametersReferenced.add(THIS_MARKER); } } }"
                    ]
                ],
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline19b",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInlineIntoLoop",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline13",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline14",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline15",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline16",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline17",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline18",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline19",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testBug1897706",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInlineFunctionWithInnerFunction5",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateWithParameters3",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateCallInLoopVars1",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars1",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars2",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateFunctionDefinition",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutate8",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testLoopWithFunctionWithFunction",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables16",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables18",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining11",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverMutateConstants",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineWithThis7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables6",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionCallInlining11b",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineNoResultNoParamCall3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining9",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testMethodWithFunctionWithFunction",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionYCombinator",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineVars7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2a",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInline7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionOmega",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15b",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15d",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions16a",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexSample",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified4",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified5",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified6",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testIssue423",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeFunctionExpressionInCall",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverOverrideNewValues",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs4",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions10",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions13",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions22",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions23",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions9",
                    "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testMakeLocalNamesUniqueWithContext5"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below are buggy method(s) from a large Java project. These methods cause one or more test failures.\nYour task is to fix the bugs in these methods. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Methods\n\n\n```java\n\n  @Override\n  public void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n      // If the contextual renamer is being used the starting context can not\n      // be a function.\n      Preconditions.checkState(\n          declarationRoot.getType() != Token.FUNCTION ||\n          !(rootRenamer instanceof ContextualRenamer));\n      Preconditions.checkState(t.inGlobalScope());\n      renamer = rootRenamer;\n    } else {\n      renamer = nameStack.peek().forChildScope();\n    }\n\n    if (declarationRoot.getType() == Token.FUNCTION) {\n      for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n        String name = c.getString();\n        renamer.addDeclaredName(name);\n      }\n      Node functionBody = declarationRoot.getLastChild();\n      findDeclaredNames(functionBody, null, renamer);\n    }  else \n    if (declarationRoot.getType() != Token.FUNCTION) {\n      // Add the block declarations\n      findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n  }\n\n```\n\n```java\n\n  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n\n\n          // Add the function parameters\n\n          // Add the function body declarations\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n  }\n\n```\n\n```java\n\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }\n  }\n\n```\n\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n  public void testInline19b() {\n    helperInlineReferenceToFunction(\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){y = a; x = b;}; \" +\n        \"function bar() { foo(x,y); }\",\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){y = a; x = b;}; \" +\n        \"function bar() {\" +\n           \"{var b$$inline_1=y;\" +\n            \"y = x;\" +\n            \"x = b$$inline_1;}\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 1: junit.framework.AssertionFailedError:\n \n#Test method 2:\n```java\n  public void testInlineIntoLoop() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n        \"for(;1;){ foo(1); }\",\n        \"function foo(a){var b;return a;}; \" +\n        \"for(;1;){ {\" +\n            \"var b$$inline_1=void 0;1}}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n        \"do{ foo(1); } while(1)\",\n        \"function foo(a){var b;return a;}; \" +\n        \"do{ {\" +\n            \"var b$$inline_1=void 0;1}}while(1)\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){for(var b in c)return a;}; \" +\n        \"for(;1;){ foo(1); }\",\n        \"function foo(a){var b;for(b in c)return a;}; \" +\n        \"for(;1;){ {JSCompiler_inline_label_foo_2:{\" +\n            \"var b$$inline_1=void 0;for(b$$inline_1 in c){\" +\n              \"1;break JSCompiler_inline_label_foo_2\" +\n            \"}}}}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 2: junit.framework.AssertionFailedError:\n \n#Test method 3:\n```java\n  public void testInline13() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"function foo(a){return a;}; \" +\n        \"function x() {{var a$$inline_0=x++;\" +\n            \"a$$inline_0}}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 3: junit.framework.AssertionFailedError:\n \n#Test method 4:\n```java\n  public void testInline14() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(x++);\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=x++;\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 4: junit.framework.AssertionFailedError:\n \n#Test method 5:\n```java\n  public void testInline15() {\n    // Parameter has mutable, references more than once.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(new Date());\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=new Date();\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 5: junit.framework.AssertionFailedError:\n \n#Test method 6:\n```java\n  public void testInline16() {\n    // Parameter is large, references more than once.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(function(){});\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=function(){};\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 6: junit.framework.AssertionFailedError:\n \n#Test method 7:\n```java\n  public void testInline17() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; foo(goo());\",\n        \"function foo(a){return true;};\" +\n            \"{var a$$inline_0=goo();true}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 7: junit.framework.AssertionFailedError:\n \n#Test method 8:\n```java\n  public void testInline18() {\n    // This doesn't bring names into the global name space.\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n            \"function x() { foo(goo()); }\",\n            \"function foo(a){var b;return a;}; \" +\n            \"function x() {{var a$$inline_0=goo();\" +\n                \"var b$$inline_1;a$$inline_0}}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 8: junit.framework.AssertionFailedError:\n \n#Test method 9:\n```java\n  public void testInline19() {\n    // Properly alias.\n    helperInlineReferenceToFunction(\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){x = b; y = a;}; \" +\n        \"function bar() { foo(x,y); }\",\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){x = b; y = a;}; \" +\n        \"function bar() {\" +\n           \"{var a$$inline_0=x;\" +\n            \"x = y;\" +\n            \"y = a$$inline_0;}\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 9: junit.framework.AssertionFailedError:\n \n#Test method 10:\n```java\n  public void testBug1897706() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){}; foo(x())\",\n        \"function foo(a){}; {var a$$inline_0=x()}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){bar()}; foo(x())\",\n        \"function foo(a){bar()}; {var a$$inline_0=x();bar()}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a,b){bar()}; foo(x(),y())\",\n        \"function foo(a,b){bar()};\" +\n        \"{var a$$inline_0=x();var b$$inline_1=y();bar()}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 10: junit.framework.AssertionFailedError:\n \n#Test method 11:\n```java\n  public void testInlineFunctionWithInnerFunction5() {\n    // Call with inner function statement.\n    helperInlineReferenceToFunction(\n        \"function foo(){function x() {var a; return true;} return x}; foo();\",\n        \"function foo(){function x(){var a;return true}return x};\" +\n            \"{var x$$inline_0 = function(){\" +\n            \"var a$$inline_1;return true};x$$inline_0}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 11: junit.framework.AssertionFailedError:\n \n#Test method 12:\n```java\n  public void testMutateWithParameters3() {\n    // Parameter has side-effects.\n    helperMutate(\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"{var a$$inline_0 = x++; a$$inline_0}\",\n        \"foo\", null);\n  }\n```\n#Error message from the test method 12: junit.framework.AssertionFailedError:\n \n#Test method 13:\n```java\n  public void testMutateCallInLoopVars1() {\n    // baseline: outside a loop, the constant remains constant.\n    boolean callInLoop = false;\n    helperMutate(\n        \"function foo(a){var B = bar(); a;}; foo(1);\",\n        \"{var B$$inline_1=bar(); 1;}\",\n        \"foo\", null, false, callInLoop);\n    // ... in a loop, the constant-ness is removed.\n    // TODO(johnlenz): update this test to look for the const annotation.\n    callInLoop = true;\n    helperMutate(\n        \"function foo(a){var B = bar(); a;}; foo(1);\",\n        \"{var B$$inline_1 = bar(); 1;}\",\n        \"foo\", null, false, callInLoop);\n  }\n```\n#Error message from the test method 13: junit.framework.AssertionFailedError:\n \n#Test method 14:\n```java\n  public void testMutateInitializeUninitializedVars1() {\n    helperMutate(\n        \"function foo(a){var b;return a;}; foo(1);\",\n        \"{var b$$inline_1=void 0;1}\",\n        \"foo\", null, false, true);\n  }\n```\n#Error message from the test method 14: junit.framework.AssertionFailedError:\n \n#Test method 15:\n```java\n  public void testMutateInitializeUninitializedVars2() {\n    helperMutate(\n        \"function foo(a){for(var b in c)return a;}; foo(1);\",\n        \"{JSCompiler_inline_label_foo_2:\" +\n          \"{\" +\n            \"for(var b$$inline_1 in c){\" +\n                \"1;break JSCompiler_inline_label_foo_2\" +\n             \"}\" +\n          \"}\" +\n        \"}\",\n        \"foo\", null);\n  }\n```\n#Error message from the test method 15: junit.framework.AssertionFailedError:\n \n#Test method 16:\n```java\n  public void testMutateFunctionDefinition() {\n     // function declarations are rewritten as function\n     // expressions\n     helperMutate(\n        \"function foo(a){function g(){}}; foo(1);\",\n        \"{var g$$inline_1=function(){};}\",\n        \"foo\", null);\n  }\n```\n#Error message from the test method 16: junit.framework.AssertionFailedError:\n \n#Test method 17:\n```java\n  public void testMutate8() {\n    // Parameter has side-effects.\n    helperMutate(\n        \"function foo(a){return a+a;}; foo(x++);\",\n        \"{var a$$inline_0 = x++;\" +\n            \"a$$inline_0 + a$$inline_0;}\",\n        \"foo\", null);\n  }\n```\n#Error message from the test method 17: junit.framework.AssertionFailedError:\n \n#Test method 18:\n```java\n  public void testLoopWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariableInLoop_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"    var arr = [1, 2, 3, 4, 5];\\n\" +\n        \"    for (var i = 0, l = arr.length; i < l; i++) {\\n\" +\n        \"      var j = arr[i];\\n\" +\n        // don't inline this function, because the correct behavior depends\n        // captured values.\n        \"      (function() {\\n\" +\n        \"        var k = j;\\n\" +\n        \"        setTimeout(function() { result += k; }, 5 * i);\\n\" +\n        \"      })();\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariableInLoop_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\" +\n        \"  var arr$$inline_0=[1,2,3,4,5];\\n\" +\n        \"  var i$$inline_1=0;\\n\" +\n        \"  var l$$inline_2=arr$$inline_0.length;\\n\" +\n        \"  for(;i$$inline_1<l$$inline_2;i$$inline_1++){\\n\" +\n        \"    var j$$inline_3=arr$$inline_0[i$$inline_1];\\n\" +\n        \"    (function(){\\n\" +\n        \"       var k$$inline_4=j$$inline_3;\\n\" +\n        \"       setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)\\n\" +\n        \"     })()\\n\" +\n        \"  }\\n\" +\n        \"  }\\n\" +\n        \"}\");\n  }\n```\n#Error message from the test method 18: junit.framework.AssertionFailedError:\n \n#Test method 19:\n```java\n  public void testShadowVariables16() {\n    assumeMinimumCapture = false;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n\n  }\n```\n#Error message from the test method 19: junit.framework.AssertionFailedError:\n \n#Test method 20:\n```java\n  public void testShadowVariables18() {\n    test(\"var a=0;\" +\n        \"function bar(){return a+a}\" +\n        \"function foo(){var a=3;return bar()}\" +\n        \"function _goo(){var a=2;var x=foo();}\",\n\n        \"var a=0;\" +\n        \"function _goo(){var a$$2=2;var x;\" +\n        \"{var a$$inline_0=3;x=a+a}}\");\n  }\n```\n#Error message from the test method 20: junit.framework.AssertionFailedError:\n \n#Test method 21:\n```java\n  public void testCostBasedInlining11() {\n    // With block inlining\n    test(\"function f(a){return a + a;}\" +\n         \"var a = f(f(1))\",\n         \"var a;\" +\n         \"{var a$$inline_0=1+1;\" +\n         \"a=a$$inline_0+a$$inline_0}\");\n  }\n```\n#Error message from the test method 21: junit.framework.AssertionFailedError:\n \n#Test method 22:\n```java\n  public void testMixedModeInliningCosting3() {\n    // Do inline here because the function definition can be eliminated.\n    test(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+10}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3,x())\",\n\n        \"1+2+1+2+4+5+6+7+8+9+1+2+3+10;\" +\n        \"{var JSCompiler_inline_anon_param_2=x();\" +\n        \"2+3+2+3+4+5+6+7+8+9+1+2+3+10}\");\n  }\n```\n#Error message from the test method 22: junit.framework.AssertionFailedError:\n \n#Test method 23:\n```java\n  public void testInlineNeverMutateConstants() {\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }\n```\n#Error message from the test method 23: junit.framework.AssertionFailedError:\n \n#Test method 24:\n```java\n  public void testInlineWithThis7() {\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(a){a=1;this} f.call();\",\n         \"{var a$$inline_0=void 0; a$$inline_0=1; void 0;}\");\n    test(\"function f(a){a=1;this} f.call(x, x);\",\n         \"{var a$$inline_0=x; a$$inline_0=1; x;}\");\n  }\n```\n#Error message from the test method 24: junit.framework.AssertionFailedError:\n \n#Test method 25:\n```java\n  public void testAnonymous1() {\n    assumeMinimumCapture = false;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n         \"{var a$$inline_0=10;\" +\n         \"{var b$$inline_1=a$$inline_0;\" +\n         \"a$$inline_0++;alert(b$$inline_1)}}\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n        \"{var a$$inline_2=10;\" +\n        \"{var b$$inline_0=a$$inline_2;\" +\n        \"a$$inline_2++;alert(b$$inline_0)}}\");\n  }\n```\n#Error message from the test method 25: junit.framework.AssertionFailedError:\n \n#Test method 26:\n```java\n  public void testAnonymous3() {\n    // Introducing a new value into is tricky\n    assumeMinimumCapture = false;\n    testSame(\"(function(){var a=10;(function(){arguments;})()})();\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){arguments;})()})();\",\n         \"{var a$$inline_0=10;(function(){arguments;})();}\");\n\n    test(\"(function(){(function(){arguments;})()})();\",\n        \"{(function(){arguments;})()}\");\n  }\n```\n#Error message from the test method 26: junit.framework.AssertionFailedError:\n \n#Test method 27:\n```java\n  public void testShadowVariables1() {\n    // The Normalize pass now guarantees that that globals are never shadowed\n    // by locals.\n\n    // \"foo\" is inlined here as its parameter \"a\" doesn't conflict.\n    // \"bar\" is assigned a new name.\n    test(\"var a=0;\" +\n         \"function foo(a){return 3+a}\" +\n         \"function bar(){var a=foo(4)}\" +\n         \"bar();\",\n\n         \"var a=0;\" +\n         \"{var a$$inline_0=3+4}\");\n  }\n```\n#Error message from the test method 27: junit.framework.AssertionFailedError:\n \n#Test method 28:\n```java\n  public void testShadowVariables3() {\n    // \"foo\" is inlined into exported \"_bar\", aliasing foo's \"a\".\n    test(\"var a=0;\" +\n        \"function foo(){var a=2;return 3+a}\" +\n        \"function _bar(){a=foo()}\",\n\n        \"var a=0;\" +\n        \"function _bar(){{var a$$inline_0=2;\" +\n        \"a=3+a$$inline_0}}\");\n  }\n```\n#Error message from the test method 28: junit.framework.AssertionFailedError:\n \n#Test method 29:\n```java\n  public void testShadowVariables6() {\n    test(\"var a=0;\" +\n        \"function foo(){var a=4;return 3+a}\" +\n        \"function _bar(a){a=foo(4)}\",\n\n        \"var a=0;function _bar(a$$2){{\" +\n        \"var a$$inline_0=4;\" +\n        \"a$$2=3+a$$inline_0}}\");\n  }\n```\n#Error message from the test method 29: junit.framework.AssertionFailedError:\n \n#Test method 30:\n```java\n  public void testShadowVariables7() {\n    assumeMinimumCapture = false;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n  }\n```\n#Error message from the test method 30: junit.framework.AssertionFailedError:\n \n#Test method 31:\n```java\n  public void testFunctionExpressionCallInlining11b() {\n    assumeMinimumCapture = false;\n    // Can't inline functions that return inner functions and have local names.\n    testSame(\"((function(){var a; return function(){foo()}})())();\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"((function(){var a; return function(){foo()}})())();\",\n\n        \"{var JSCompiler_inline_result$$0;\" +\n        \"var a$$inline_1;\" +\n        \"JSCompiler_inline_result$$0=function(){foo()};}\" +\n        \"JSCompiler_inline_result$$0()\");\n\n  }\n```\n#Error message from the test method 31: junit.framework.AssertionFailedError:\n \n#Test method 32:\n```java\n  public void testComplexInlineNoResultNoParamCall3() {\n    // We now allow vars in the global space.\n    //   Don't inline into vars into global scope.\n    //   testSame(\"function f(){a();b();var z=1+1}f()\");\n\n    // But do inline into functions\n    test(\"function f(){a();b();var z=1+1}function _foo(){f()}\",\n         \"function _foo(){{a();b();var z$$inline_0=1+1}}\");\n\n  }\n```\n#Error message from the test method 32: junit.framework.AssertionFailedError:\n \n#Test method 33:\n```java\n  public void testCostBasedInlining9() {\n    // Here both direct and block inlining is used.  The call to f as a\n    // parameter is inlined directly, which the call to f with f as a parameter\n    // is inlined using block inlining.\n    test(\"function f(a){return 1 + a + a;}\" +\n         \"var a = f(f(1));\",\n         \"var a;\" +\n         \"{var a$$inline_0=1+1+1;\" +\n         \"a=1+a$$inline_0+a$$inline_0}\");\n  }\n```\n#Error message from the test method 33: junit.framework.AssertionFailedError:\n \n#Test method 34:\n```java\n  public void testMethodWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariable_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"      var j = [i];\\n\" +\n        \"      (function(j) {\\n\" +\n        \"        setTimeout(function() { result += j; }, 5 * i);\\n\" +\n        \"      })(j);\\n\" +\n        \"      j = null;\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariable_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_2=[i];\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_0=j$$inline_2;\\n\" +  // this temp is needed.\n        \"  setTimeout(function(){result+=j$$inline_0},5*i);\\n\" +\n        \"  }\\n\" +\n        \"  j$$inline_2=null\\n\" + // because this value can be modified later.\n        \"  }\\n\" +\n        \"}\");\n  }\n```\n#Error message from the test method 34: junit.framework.AssertionFailedError:\n \n#Test method 35:\n```java\n  public void testFunctionExpressionYCombinator() {\n    assumeMinimumCapture = false;\n    testSame(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\",\n        \"var factorial;\\n\" +\n        \"{\\n\" +\n        \"var M$$inline_4 = function(f$$2) {\\n\" +\n        \"  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\\n\" +\n        \"};\\n\" +\n        \"{\\n\" +\n        \"var f$$inline_0=function(f$$inline_7){\\n\" +\n        \"  return M$$inline_4(\\n\" +\n        \"    function(arg$$inline_8){\\n\" +\n        \"      return f$$inline_7(f$$inline_7)(arg$$inline_8)\\n\" +\n        \"     })\\n\" +\n        \"};\\n\" +\n        \"factorial=M$$inline_4(\\n\" +\n        \"  function(arg$$inline_1){\\n\" +\n        \"    return f$$inline_0(f$$inline_0)(arg$$inline_1)\\n\" +\n        \"});\\n\" +\n        \"}\\n\" +\n        \"}\" +\n        \"factorial(5)\");\n  }\n```\n#Error message from the test method 35: junit.framework.AssertionFailedError:\n \n#Test method 36:\n```java\n  public void testComplexInlineVars7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;var z=f(1,b)\",\n         \"var b=1;var z;\" +\n         \"{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2\" +\n         \"}else{\" +\n         \"z=true;break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }\n```\n#Error message from the test method 36: junit.framework.AssertionFailedError:\n \n#Test method 37:\n```java\n  public void testComplexFunctionWithFunctionDefinition2a() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"(function(){\" +\n        \"var f = function(a){call(function(){return a})};f()})()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }\n```\n#Error message from the test method 37: junit.framework.AssertionFailedError:\n \n#Test method 38:\n```java\n  public void testComplexInline7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;z=f(1,b)\",\n         \"var b=1;{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2}else{z=true;\" +\n         \"break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }\n```\n#Error message from the test method 38: junit.framework.AssertionFailedError:\n \n#Test method 39:\n```java\n  public void testFunctionExpressionOmega() {\n    // ... with unused recursive name.\n    test(\"(function (f){f(f)})(function(f){f(f)})\",\n         \"{var f$$inline_0=function(f$$1){f$$1(f$$1)};\" +\n          \"{{f$$inline_0(f$$inline_0)}}}\");\n  }\n```\n#Error message from the test method 39: junit.framework.AssertionFailedError:\n \n#Test method 40:\n```java\n  public void testInlineFunctions15b() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline closure with locals into global scope.\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"function foo(){var x;return function(a){return a+1}}\" +\n         \"var d=c+foo()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"var JSCompiler_temp_const$$0 = c;\\n\" +\n         \"{\\n\" +\n         \"var JSCompiler_inline_result$$1;\\n\" +\n         \"var x$$inline_2;\\n\" +\n         \"JSCompiler_inline_result$$1 = \" +\n         \"    function(a$$inline_3){ return a$$inline_3+1 };\\n\" +\n         \"}\" +\n         \"var d=JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1\");\n  }\n```\n#Error message from the test method 40: junit.framework.AssertionFailedError:\n \n#Test method 41:\n```java\n  public void testInlineFunctions15d() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function foo(){var x; return function(a){return a+1}}\" +\n         \"function _x(){ var d=c+foo() }\");\n\n    assumeMinimumCapture = true;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function _x() { \\n\" +\n         \"  var JSCompiler_temp_const$$0 = c;\\n\" +\n         \"  {\\n\" +\n         \"  var JSCompiler_inline_result$$1;\\n\" +\n         \"  var x$$inline_2;\\n\" +\n         \"  JSCompiler_inline_result$$1 = \" +\n         \"      function(a$$inline_3) {return a$$inline_3+1};\\n\" +\n         \"  }\\n\" +\n         \"  var d = JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\\n\" +\n         \"}\");\n  }\n```\n#Error message from the test method 41: junit.framework.AssertionFailedError:\n \n#Test method 42:\n```java\n  public void testInlineFunctions16a() {\n    assumeMinimumCapture = false;\n\n    testSame(\"function foo(b){return window.bar(function(){c(b)})}\" +\n         \"var d=foo(e)\");\n\n    assumeMinimumCapture = true;\n\n    test(\n        \"function foo(b){return window.bar(function(){c(b)})}\" +\n        \"var d=foo(e)\",\n        \"var d;{var b$$inline_0=e;\" +\n        \"d=window.bar(function(){c(b$$inline_0)})}\");\n  }\n```\n#Error message from the test method 42: junit.framework.AssertionFailedError:\n \n#Test method 43:\n```java\n  public void testBug4944818() {\n    test(\n        \"var getDomServices_ = function(self) {\\n\" +\n        \"  if (!self.domServices_) {\\n\" +\n        \"    self.domServices_ = goog$component$DomServices.get(\" +\n        \"        self.appContext_);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  return self.domServices_;\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"var getOwnerWin_ = function(self) {\\n\" +\n        \"  return getDomServices_(self).getDomHelper().getWindow();\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"HangoutStarter.prototype.launchHangout = function() {\\n\" +\n        \"  var self = a.b;\\n\" +\n        \"  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\\n\" +\n        \"};\",\n        \"HangoutStarter.prototype.launchHangout = function() { \" +\n        \"  var self$$2 = a.b;\" +\n        \"  var JSCompiler_temp_const$$0 = goog.Uri;\" +\n        \"  {\" +\n        \"  var JSCompiler_inline_result$$1;\" +\n        \"  var self$$inline_2 = self$$2;\" +\n        \"  if (!self$$inline_2.domServices_) {\" +\n        \"    self$$inline_2.domServices_ = goog$component$DomServices.get(\" +\n        \"        self$$inline_2.appContext_);\" +\n        \"  }\" +\n        \"  JSCompiler_inline_result$$1=self$$inline_2.domServices_;\" +\n        \"  }\" +\n        \"  var myUrl = new JSCompiler_temp_const$$0(\" +\n        \"      JSCompiler_inline_result$$1.getDomHelper().\" +\n        \"          getWindow().location.href)\" +\n        \"}\");\n  }\n```\n#Error message from the test method 43: junit.framework.AssertionFailedError:\n \n#Test method 44:\n```java\n  public void testComplexSample() {\n    String result = \"\" +\n      \"{{\" +\n      \"var styleSheet$$inline_2=null;\" +\n      \"if(goog$userAgent$IE)\" +\n        \"styleSheet$$inline_2=0;\" +\n      \"else \" +\n        \"var head$$inline_3=0;\" +\n      \"{\" +\n        \"var element$$inline_4=\" +\n            \"styleSheet$$inline_2;\" +\n        \"var stylesString$$inline_5=a;\" +\n        \"if(goog$userAgent$IE)\" +\n          \"element$$inline_4.cssText=\" +\n              \"stylesString$$inline_5;\" +\n        \"else \" +\n        \"{\" +\n          \"var propToSet$$inline_6=\" +\n              \"\\\"innerText\\\";\" +\n          \"element$$inline_4[\" +\n              \"propToSet$$inline_6]=\" +\n                  \"stylesString$$inline_5\" +\n        \"}\" +\n      \"}\" +\n      \"styleSheet$$inline_2\" +\n      \"}}\";\n\n    test(\"var foo = function(stylesString, opt_element) { \" +\n        \"var styleSheet = null;\" +\n        \"if (goog$userAgent$IE)\" +\n          \"styleSheet = 0;\" +\n        \"else \" +\n          \"var head = 0;\" +\n        \"\" +\n        \"goo$zoo(styleSheet, stylesString);\" +\n        \"return styleSheet;\" +\n     \" };\\n \" +\n\n     \"var goo$zoo = function(element, stylesString) {\" +\n        \"if (goog$userAgent$IE)\" +\n          \"element.cssText = stylesString;\" +\n        \"else {\" +\n          \"var propToSet = 'innerText';\" +\n          \"element[propToSet] = stylesString;\" +\n        \"}\" +\n      \"};\" +\n      \"(function(){foo(a,b);})();\",\n     result);\n  }\n```\n#Error message from the test method 44: junit.framework.AssertionFailedError:\n \n#Test method 45:\n```java\n  public void testNoInlineIfParametersModified1() {\n    // Assignment\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }\n```\n#Error message from the test method 45: junit.framework.AssertionFailedError:\n \n#Test method 46:\n```java\n  public void testNoInlineIfParametersModified2() {\n    test(\"function f(x){return (x)=1;}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0=1}\");\n  }\n```\n#Error message from the test method 46: junit.framework.AssertionFailedError:\n \n#Test method 47:\n```java\n  public void testNoInlineIfParametersModified3() {\n    // Assignment variant.\n    test(\"function f(x){return x*=2}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0*=2}\");\n  }\n```\n#Error message from the test method 47: junit.framework.AssertionFailedError:\n \n#Test method 48:\n```java\n  public void testNoInlineIfParametersModified4() {\n    // Assignment in if.\n    test(\"function f(x){return x?(x=2):0}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0?(\" +\n         \"x$$inline_0=2):0}\");\n  }\n```\n#Error message from the test method 48: junit.framework.AssertionFailedError:\n \n#Test method 49:\n```java\n  public void testNoInlineIfParametersModified5() {\n    // Assignment in if, multiple params\n    test(\"function f(x,y){return x?(y=2):0}f(2,undefined)\",\n         \"{var y$$inline_1=undefined;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }\n```\n#Error message from the test method 49: junit.framework.AssertionFailedError:\n \n#Test method 50:\n```java\n  public void testNoInlineIfParametersModified6() {\n    test(\"function f(x,y){return x?(y=2):0}f(2)\",\n         \"{var y$$inline_1=void 0;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }\n```\n#Error message from the test method 50: junit.framework.AssertionFailedError:\n \n#Test method 51:\n```java\n  public void testNoInlineIfParametersModified7() {\n    // Increment\n    test(\"function f(a){return++a<++a}f(1)\",\n         \"{var a$$inline_0=1;\" +\n         \"++a$$inline_0<\" +\n         \"++a$$inline_0}\");\n  }\n```\n#Error message from the test method 51: junit.framework.AssertionFailedError:\n \n#Test method 52:\n```java\n  public void testIssue423() {\n    assumeMinimumCapture = false;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"(function($){\" +\n        \"  $.fn.multicheck=function(options$$1){\" +\n        \"    {\" +\n        \"     options$$1.checkboxes=$(this).siblings(\\\":checkbox\\\");\" +\n        \"     {\" +\n        \"       $(this).data(\\\"checkboxes\\\")\" +\n        \"     }\" +\n        \"    }\" +\n        \"  }\" +\n        \"})(jQuery)\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"{var $$$inline_0=jQuery;\\n\" +\n        \"$$$inline_0.fn.multicheck=function(options$$inline_4){\\n\" +\n        \"  {options$$inline_4.checkboxes=\" +\n            \"$$$inline_0(this).siblings(\\\":checkbox\\\");\\n\" +\n        \"  {$$$inline_0(this).data(\\\"checkboxes\\\")}\" +\n        \"  }\\n\" +\n        \"}\\n\" +\n        \"}\");\n  }\n```\n#Error message from the test method 52: junit.framework.AssertionFailedError:\n \n#Test method 53:\n```java\n  public void testComplexFunctionWithFunctionDefinition2() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"function f(a){call(function(){return})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }\n```\n#Error message from the test method 53: junit.framework.AssertionFailedError:\n \n#Test method 54:\n```java\n  public void testComplexFunctionWithFunctionDefinition3() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might need to be captured.\n    testSame(\"function f(){var a; call(function(){return a})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function f(){var a; call(function(){return a})}f()\",\n         \"{var a$$inline_0;call(function(){return a$$inline_0})}\");\n\n  }\n```\n#Error message from the test method 54: junit.framework.AssertionFailedError:\n \n#Test method 55:\n```java\n  public void testDecomposeFunctionExpressionInCall() {\n    test(\n        \"(function(map){descriptions_=map})(\\n\" +\n           \"function(){\\n\" +\n              \"var ret={};\\n\" +\n              \"ret[ONE]='a';\\n\" +\n              \"ret[TWO]='b';\\n\" +\n              \"return ret\\n\" +\n           \"}()\\n\" +\n        \");\",\n        \"{\" +\n        \"var JSCompiler_inline_result$$0;\" +\n        \"var ret$$inline_1={};\\n\" +\n        \"ret$$inline_1[ONE]='a';\\n\" +\n        \"ret$$inline_1[TWO]='b';\\n\" +\n        \"JSCompiler_inline_result$$0 = ret$$inline_1;\\n\" +\n        \"}\" +\n        \"{\" +\n        \"descriptions_=JSCompiler_inline_result$$0;\" +\n        \"}\"\n        );\n  }\n```\n#Error message from the test method 55: junit.framework.AssertionFailedError:\n \n#Test method 56:\n```java\n  public void testInlineNeverOverrideNewValues() {\n    test(\"function f(a){return++a<++a}f(1)\",\n        \"{var a$$inline_0=1;\" +\n        \"++a$$inline_0<++a$$inline_0}\");\n  }\n```\n#Error message from the test method 56: junit.framework.AssertionFailedError:\n \n#Test method 57:\n```java\n  public void testInlineBlockMutableArgs1() {\n    test(\"function foo(x){x+x}foo([])\",\n         \"{var x$$inline_0=[];\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n```\n#Error message from the test method 57: junit.framework.AssertionFailedError:\n \n#Test method 58:\n```java\n  public void testInlineBlockMutableArgs2() {\n    test(\"function foo(x){x+x}foo(new Date)\",\n         \"{var x$$inline_0=new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n```\n#Error message from the test method 58: junit.framework.AssertionFailedError:\n \n#Test method 59:\n```java\n  public void testInlineBlockMutableArgs3() {\n    test(\"function foo(x){x+x}foo(true&&new Date)\",\n         \"{var x$$inline_0=true&&new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n```\n#Error message from the test method 59: junit.framework.AssertionFailedError:\n \n#Test method 60:\n```java\n  public void testInlineBlockMutableArgs4() {\n    test(\"function foo(x){x+x}foo({})\",\n         \"{var x$$inline_0={};\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n```\n#Error message from the test method 60: junit.framework.AssertionFailedError:\n \n#Test method 61:\n```java\n  public void testInlineFunctions10() {\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i);y=INC(i)\",\n         \"var y;\" +\n         \"{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\" +\n         \"{var x$$inline_2=i;\" +\n         \"y=x$$inline_2++}\");\n  }\n```\n#Error message from the test method 61: junit.framework.AssertionFailedError:\n \n#Test method 62:\n```java\n  public void testInlineFunctions13() {\n    // inline as block if the input parameter has side-effects.\n    test(\"function f(x){return x}\" +\n         \"var y=f(i++)\",\n         \"var y;{var x$$inline_0=i++;y=x$$inline_0}\");\n  }\n```\n#Error message from the test method 62: junit.framework.AssertionFailedError:\n \n#Test method 63:\n```java\n  public void testInlineFunctions22() {\n    // Another tricky case ... test nested compiler inlines\n    test(\"function plex(a){if(a) return 0;else return 1;}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"function bar(d){return plex(d)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_plex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_plex_1}\" +\n         \"else{\" +\n         \"d=1;break JSCompiler_inline_label_plex_1}d=void 0}}\");\n  }\n```\n#Error message from the test method 63: junit.framework.AssertionFailedError:\n \n#Test method 64:\n```java\n  public void testInlineFunctions23() {\n    // Test both orderings again\n    test(\"function complex(a){if(a) return 0;else return 1;}\" +\n         \"function bar(d){return complex(d)}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_complex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_complex_1\" +\n         \"}else{\" +\n         \"d=1;break JSCompiler_inline_label_complex_1\" +\n         \"}d=void 0}}\");\n  }\n```\n#Error message from the test method 64: junit.framework.AssertionFailedError:\n \n#Test method 65:\n```java\n  public void testInlineFunctions9() {\n    // don't inline if the input parameter is modified.\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i)\",\n         \"var y;{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\");\n  }\n```\n#Error message from the test method 65: junit.framework.AssertionFailedError:\n \n#Test method 66:\n```java\n  public void testMakeLocalNamesUniqueWithContext5() {\n    // Set the test type\n    this.useDefaultRenamer = true;\n\n    testWithInversion(\n        \"function f(){var f; f = 1}\",\n        \"function f(){var f$$1; f$$1 = 1}\");\n    testWithInversion(\n        \"function f(f){f = 1}\",\n        \"function f(f$$1){f$$1 = 1}\");\n    testWithInversion(\n        \"function f(f){var f; f = 1}\",\n        \"function f(f$$1){var f$$1; f$$1 = 1}\");\n\n    test(\n        \"var fn = function f(){var f; f = 1}\",\n        \"var fn = function f(){var f$$1; f$$1 = 1}\");\n    test(\n        \"var fn = function f(f){f = 1}\",\n        \"var fn = function f(f$$1){f$$1 = 1}\");\n    test(\n        \"var fn = function f(f){var f; f = 1}\",\n        \"var fn = function f(f$$1){var f$$1; f$$1 = 1}\");\n  }\n```\n#Error message from the test method 66: junit.framework.AssertionFailedError:\n\n---\n\n## Your Goal\n\nFix the buggy methods. Return only the fixed Java methods. Do not include explanations or other text.\n",
                        "patches": [
                            "\n@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    switch (n.getToken()) {\n      case FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n          // Add the function parameters\n\n          // Add the function body declarations\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }\n    return true;\n}\n",
                            "\n@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            {\n                Renamer renamer = nameStack.peek().forChildScope();\n\n                String name = n.getFirstChild().getString();\n                if (name != null && !name.isEmpty() && parent != null\n                    && !NodeUtil.isFunctionDeclaration(n)) {\n                    renamer.addDeclaredName(name);\n                }\n\n                nameStack.push(renamer);\n            }\n            break;\n\n        case Token.CATCH:\n            {\n                Renamer renamer = nameStack.peek().forChildScope();\n\n                String name = n.getFirstChild().getString();\n                renamer.addDeclaredName(name);\n\n                nameStack.push(renamer);\n            }\n            break;\n    }\n\n    return true;\n}\n",
                            "\n@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  switch (n.getType()) {\n    case Token.FUNCTION: {\n      // Add recursive function name, if needed.\n      // NOTE: \"enterScope\" is called after we need to pick up this name.\n      Renamer renamer = nameStack.isEmpty() ? rootRenamer : nameStack.peek().forChildScope();\n\n      // If needed, add the function recursive name.\n      String name = n.getFirstChild().getString();\n      if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) {\n        renamer.addDeclaredName(name);\n      }\n\n      // Add the function parameters\n      Node functionParams = n.getSecondChild();\n      for (Node c = functionParams.getFirstChild(); c != null; c = c.getNext()) {\n        String paramName = c.getString();\n        if (paramName != null && !paramName.isEmpty()) {\n          renamer.addDeclaredName(paramName);\n        }\n      }\n\n      nameStack.push(renamer);\n    } break;\n\n    case Token.CATCH: {\n      Renamer renamer = nameStack.peek().forChildScope();\n\n      String name = n.getFirstChild().getString();\n      if (name != null && !name.isEmpty()) {\n        renamer.addDeclaredName(name);\n      }\n\n      nameStack.push(renamer);\n    } break;\n  }\n\n  return true;\n}\n",
                            "\n@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n        case Token.FUNCTION: {\n            // Add recursive function name, if needed.\n            // NOTE: \"enterScope\" is called after we need to pick up this name.\n            Renamer renamer = nameStack.peek().forChildScope();\n\n            // If needed, add the function recursive name.\n            String name = n.getFirstChild().getString();\n            if (name != null && !name.isEmpty() && parent != null\n                && NodeUtil.isFunctionExpression(n)) {\n                renamer.addDeclaredName(name);\n            }\n\n            nameStack.push(renamer);\n        }\n        break;\n\n        case Token.CATCH: {\n            Renamer renamer = nameStack.peek().forChildScope();\n\n            String name = n.getFirstChild().getString();\n            renamer.addDeclaredName(name);\n\n            nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n}\n",
                            "\n@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      {\n        // Add recursive function name, if needed.\n        // NOTE: \"enterScope\" is called after we need to pick up this name.\n        Renamer renamer = nameStack.peek().forChildScope();\n\n        // If needed, add the function recursive name.\n        String name = n.getFirstChild().getString();\n        if (name != null && !name.isEmpty() && parent != null\n            && !NodeUtil.isFunctionDeclaration(n)) {\n          renamer.addDeclaredName(name);\n        }\n\n        // Add the function parameters\n        Node params = n.getSecondChild();\n        for (Node c = params.getFirstChild(); c != null; c = c.getNext()) {\n          String paramName = c.getString();\n          renamer.addDeclaredName(paramName);\n        }\n\n        nameStack.push(renamer);\n      }\n      break;\n\n    case Token.CATCH:\n      {\n        Renamer renamer = nameStack.peek().forChildScope();\n\n        String name = n.getFirstChild().getString();\n        renamer.addDeclaredName(name);\n\n        nameStack.push(renamer);\n      }\n      break;\n  }\n\n  return true;\n}\n"
                        ]
                    }
                }
            },
            {
                "path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
                "start_loc": 155,
                "end_loc": 186,
                "buggy_function": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }\n  }\n",
                "fixed_function": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        nameStack.pop();\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n      case Token.LP:\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n        break;\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }\n  }\n",
                "comment": "",
                "normalized_body": [
                    "@Override public void visit(NodeTraversal t, Node n, Node parent) { switch(n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) { n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION: nameStack.pop(); break; case Token.CATCH: nameStack.pop(); break; } }"
                ],
                "top_similar_methods": [
                    [
                        1.0,
                        "@Override public void visit(NodeTraversal t, Node n, Node parent) { switch(n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) { n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION: nameStack.pop(); break; case Token.CATCH: nameStack.pop(); break; } }"
                    ],
                    [
                        0.9873638153076172,
                        "public void findFunctionExpressions(NodeTraversal t, Node n) { switch(n.getType()) { case Token.CALL: Node fnNode = null; if (n.getFirstChild().getType() == Token.FUNCTION) { fnNode = n.getFirstChild(); } else if (NodeUtil.isFunctionObjectCall(n)) { Node fnIdentifingNode = n.getFirstChild().getFirstChild(); if (fnIdentifingNode.getType() == Token.FUNCTION) { fnNode = fnIdentifingNode; } } if (fnNode != null) { Function fn = new FunctionExpression(fnNode, callsSeen++); maybeAddFunction(fn, t.getModule()); anonFns.put(fnNode, fn.getName()); } break; } }"
                    ],
                    [
                        0.9857234954833984,
                        "private void flattenSimpleStubDeclaration(Name name, String alias) { Ref ref = Iterables.getOnlyElement(name.getRefs()); Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, ref.node, name.getFullName()); Node varNode = new Node(Token.VAR, nameNode).copyInformationFrom(nameNode); Preconditions.checkState(ref.node.getParent().getType() == Token.EXPR_RESULT); Node parent = ref.node.getParent(); Node gramps = parent.getParent(); gramps.replaceChild(parent, varNode); compiler.reportCodeChange(); }"
                    ],
                    [
                        0.9849865436553955,
                        "private Node generateFixupDefinition() { Node functionCopy = copiedOriginalFunction(); Node nameNode; if (isAssignFunction) { nameNode = NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), name, functionCopy, name); } else { nameNode = functionCopy.getFirstChild(); functionCopy.replaceChild(nameNode, NodeUtil.newName(compiler.getCodingConvention(), \\\"\\\", nameNode)); } Node assignment = new Node(Token.ASSIGN, nameNode, functionCopy); assignment.copyInformationFrom(functionCopy); return NodeUtil.newExpr(assignment); }"
                    ],
                    [
                        0.9846702814102173,
                        "private void flattenNameRef(String alias, Node n, Node parent, String originalName) { Node ref = NodeUtil.newName(compiler.getCodingConvention(), alias, n, originalName); NodeUtil.copyNameAnnotations(n.getLastChild(), ref); if (parent.getType() == Token.CALL && n == parent.getFirstChild()) { parent.putBooleanProp(Node.FREE_CALL, true); } JSType type = n.getJSType(); if (type != null) { ref.setJSType(type); } parent.replaceChild(n, ref); compiler.reportCodeChange(); }"
                    ],
                    [
                        0.9846007227897644,
                        "@Override public int parseArguments(Parameters params) throws CmdLineException { String param = null; try { param = params.getParameter(0); } catch (CmdLineException e) { } if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1; } }"
                    ],
                    [
                        0.9844416379928589,
                        "private void getGlobalName(NodeTraversal t, Node dest, Node parent) { if (dest.getType() == Token.NAME) { JSDocInfo docInfo = dest.getJSDocInfo() == null ? parent.getJSDocInfo() : dest.getJSDocInfo(); boolean aliasable = !unaliasableGlobals.contains(dest.getString()) && (docInfo == null || !docInfo.isNoAlias()); if (aliasable) { String name = dest.getString(); Scope.Var var = t.getScope().getVar(name); if (var != null && !var.isLocal()) { globals.put(name, newSymbolForGlobalVar(dest)); } } } }"
                    ],
                    [
                        0.984350323677063,
                        "private static void gatherLocalNames(Node n, Set<String> names) { if (n.getType() == Token.FUNCTION) { if (NodeUtil.isFunctionDeclaration(n)) { names.add(n.getFirstChild().getString()); } return; } else if (n.getType() == Token.NAME) { switch(n.getParent().getType()) { case Token.VAR: case Token.CATCH: names.add(n.getString()); } } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { gatherLocalNames(c, names); } }"
                    ]
                ],
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline19b",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInlineIntoLoop",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline13",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline14",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline15",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline16",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline17",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline18",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline19",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testBug1897706",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInlineFunctionWithInnerFunction5",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateWithParameters3",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateCallInLoopVars1",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars1",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars2",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateFunctionDefinition",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutate8",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testLoopWithFunctionWithFunction",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables16",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables18",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining11",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverMutateConstants",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineWithThis7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables6",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionCallInlining11b",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineNoResultNoParamCall3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining9",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testMethodWithFunctionWithFunction",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionYCombinator",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineVars7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2a",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInline7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionOmega",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15b",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15d",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions16a",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexSample",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified4",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified5",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified6",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testIssue423",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeFunctionExpressionInCall",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverOverrideNewValues",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs4",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions10",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions13",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions22",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions23",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions9",
                    "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testMakeLocalNamesUniqueWithContext5"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below are buggy method(s) from a large Java project. These methods cause one or more test failures.\nYour task is to fix the bugs in these methods. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Methods\n\n\n```java\n\n  @Override\n  public void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n      // If the contextual renamer is being used the starting context can not\n      // be a function.\n      Preconditions.checkState(\n          declarationRoot.getType() != Token.FUNCTION ||\n          !(rootRenamer instanceof ContextualRenamer));\n      Preconditions.checkState(t.inGlobalScope());\n      renamer = rootRenamer;\n    } else {\n      renamer = nameStack.peek().forChildScope();\n    }\n\n    if (declarationRoot.getType() == Token.FUNCTION) {\n      for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n        String name = c.getString();\n        renamer.addDeclaredName(name);\n      }\n      Node functionBody = declarationRoot.getLastChild();\n      findDeclaredNames(functionBody, null, renamer);\n    }  else \n    if (declarationRoot.getType() != Token.FUNCTION) {\n      // Add the block declarations\n      findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n  }\n\n```\n\n```java\n\n  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n\n\n          // Add the function parameters\n\n          // Add the function body declarations\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n  }\n\n```\n\n```java\n\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }\n  }\n\n```\n\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n  public void testInline19b() {\n    helperInlineReferenceToFunction(\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){y = a; x = b;}; \" +\n        \"function bar() { foo(x,y); }\",\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){y = a; x = b;}; \" +\n        \"function bar() {\" +\n           \"{var b$$inline_1=y;\" +\n            \"y = x;\" +\n            \"x = b$$inline_1;}\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 1: junit.framework.AssertionFailedError:\n \n#Test method 2:\n```java\n  public void testInlineIntoLoop() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n        \"for(;1;){ foo(1); }\",\n        \"function foo(a){var b;return a;}; \" +\n        \"for(;1;){ {\" +\n            \"var b$$inline_1=void 0;1}}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n        \"do{ foo(1); } while(1)\",\n        \"function foo(a){var b;return a;}; \" +\n        \"do{ {\" +\n            \"var b$$inline_1=void 0;1}}while(1)\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){for(var b in c)return a;}; \" +\n        \"for(;1;){ foo(1); }\",\n        \"function foo(a){var b;for(b in c)return a;}; \" +\n        \"for(;1;){ {JSCompiler_inline_label_foo_2:{\" +\n            \"var b$$inline_1=void 0;for(b$$inline_1 in c){\" +\n              \"1;break JSCompiler_inline_label_foo_2\" +\n            \"}}}}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 2: junit.framework.AssertionFailedError:\n \n#Test method 3:\n```java\n  public void testInline13() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"function foo(a){return a;}; \" +\n        \"function x() {{var a$$inline_0=x++;\" +\n            \"a$$inline_0}}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 3: junit.framework.AssertionFailedError:\n \n#Test method 4:\n```java\n  public void testInline14() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(x++);\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=x++;\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 4: junit.framework.AssertionFailedError:\n \n#Test method 5:\n```java\n  public void testInline15() {\n    // Parameter has mutable, references more than once.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(new Date());\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=new Date();\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 5: junit.framework.AssertionFailedError:\n \n#Test method 6:\n```java\n  public void testInline16() {\n    // Parameter is large, references more than once.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(function(){});\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=function(){};\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 6: junit.framework.AssertionFailedError:\n \n#Test method 7:\n```java\n  public void testInline17() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; foo(goo());\",\n        \"function foo(a){return true;};\" +\n            \"{var a$$inline_0=goo();true}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 7: junit.framework.AssertionFailedError:\n \n#Test method 8:\n```java\n  public void testInline18() {\n    // This doesn't bring names into the global name space.\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n            \"function x() { foo(goo()); }\",\n            \"function foo(a){var b;return a;}; \" +\n            \"function x() {{var a$$inline_0=goo();\" +\n                \"var b$$inline_1;a$$inline_0}}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 8: junit.framework.AssertionFailedError:\n \n#Test method 9:\n```java\n  public void testInline19() {\n    // Properly alias.\n    helperInlineReferenceToFunction(\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){x = b; y = a;}; \" +\n        \"function bar() { foo(x,y); }\",\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){x = b; y = a;}; \" +\n        \"function bar() {\" +\n           \"{var a$$inline_0=x;\" +\n            \"x = y;\" +\n            \"y = a$$inline_0;}\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 9: junit.framework.AssertionFailedError:\n \n#Test method 10:\n```java\n  public void testBug1897706() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){}; foo(x())\",\n        \"function foo(a){}; {var a$$inline_0=x()}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){bar()}; foo(x())\",\n        \"function foo(a){bar()}; {var a$$inline_0=x();bar()}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a,b){bar()}; foo(x(),y())\",\n        \"function foo(a,b){bar()};\" +\n        \"{var a$$inline_0=x();var b$$inline_1=y();bar()}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 10: junit.framework.AssertionFailedError:\n \n#Test method 11:\n```java\n  public void testInlineFunctionWithInnerFunction5() {\n    // Call with inner function statement.\n    helperInlineReferenceToFunction(\n        \"function foo(){function x() {var a; return true;} return x}; foo();\",\n        \"function foo(){function x(){var a;return true}return x};\" +\n            \"{var x$$inline_0 = function(){\" +\n            \"var a$$inline_1;return true};x$$inline_0}\",\n        \"foo\", INLINE_BLOCK);\n  }\n```\n#Error message from the test method 11: junit.framework.AssertionFailedError:\n \n#Test method 12:\n```java\n  public void testMutateWithParameters3() {\n    // Parameter has side-effects.\n    helperMutate(\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"{var a$$inline_0 = x++; a$$inline_0}\",\n        \"foo\", null);\n  }\n```\n#Error message from the test method 12: junit.framework.AssertionFailedError:\n \n#Test method 13:\n```java\n  public void testMutateCallInLoopVars1() {\n    // baseline: outside a loop, the constant remains constant.\n    boolean callInLoop = false;\n    helperMutate(\n        \"function foo(a){var B = bar(); a;}; foo(1);\",\n        \"{var B$$inline_1=bar(); 1;}\",\n        \"foo\", null, false, callInLoop);\n    // ... in a loop, the constant-ness is removed.\n    // TODO(johnlenz): update this test to look for the const annotation.\n    callInLoop = true;\n    helperMutate(\n        \"function foo(a){var B = bar(); a;}; foo(1);\",\n        \"{var B$$inline_1 = bar(); 1;}\",\n        \"foo\", null, false, callInLoop);\n  }\n```\n#Error message from the test method 13: junit.framework.AssertionFailedError:\n \n#Test method 14:\n```java\n  public void testMutateInitializeUninitializedVars1() {\n    helperMutate(\n        \"function foo(a){var b;return a;}; foo(1);\",\n        \"{var b$$inline_1=void 0;1}\",\n        \"foo\", null, false, true);\n  }\n```\n#Error message from the test method 14: junit.framework.AssertionFailedError:\n \n#Test method 15:\n```java\n  public void testMutateInitializeUninitializedVars2() {\n    helperMutate(\n        \"function foo(a){for(var b in c)return a;}; foo(1);\",\n        \"{JSCompiler_inline_label_foo_2:\" +\n          \"{\" +\n            \"for(var b$$inline_1 in c){\" +\n                \"1;break JSCompiler_inline_label_foo_2\" +\n             \"}\" +\n          \"}\" +\n        \"}\",\n        \"foo\", null);\n  }\n```\n#Error message from the test method 15: junit.framework.AssertionFailedError:\n \n#Test method 16:\n```java\n  public void testMutateFunctionDefinition() {\n     // function declarations are rewritten as function\n     // expressions\n     helperMutate(\n        \"function foo(a){function g(){}}; foo(1);\",\n        \"{var g$$inline_1=function(){};}\",\n        \"foo\", null);\n  }\n```\n#Error message from the test method 16: junit.framework.AssertionFailedError:\n \n#Test method 17:\n```java\n  public void testMutate8() {\n    // Parameter has side-effects.\n    helperMutate(\n        \"function foo(a){return a+a;}; foo(x++);\",\n        \"{var a$$inline_0 = x++;\" +\n            \"a$$inline_0 + a$$inline_0;}\",\n        \"foo\", null);\n  }\n```\n#Error message from the test method 17: junit.framework.AssertionFailedError:\n \n#Test method 18:\n```java\n  public void testLoopWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariableInLoop_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"    var arr = [1, 2, 3, 4, 5];\\n\" +\n        \"    for (var i = 0, l = arr.length; i < l; i++) {\\n\" +\n        \"      var j = arr[i];\\n\" +\n        // don't inline this function, because the correct behavior depends\n        // captured values.\n        \"      (function() {\\n\" +\n        \"        var k = j;\\n\" +\n        \"        setTimeout(function() { result += k; }, 5 * i);\\n\" +\n        \"      })();\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariableInLoop_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\" +\n        \"  var arr$$inline_0=[1,2,3,4,5];\\n\" +\n        \"  var i$$inline_1=0;\\n\" +\n        \"  var l$$inline_2=arr$$inline_0.length;\\n\" +\n        \"  for(;i$$inline_1<l$$inline_2;i$$inline_1++){\\n\" +\n        \"    var j$$inline_3=arr$$inline_0[i$$inline_1];\\n\" +\n        \"    (function(){\\n\" +\n        \"       var k$$inline_4=j$$inline_3;\\n\" +\n        \"       setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)\\n\" +\n        \"     })()\\n\" +\n        \"  }\\n\" +\n        \"  }\\n\" +\n        \"}\");\n  }\n```\n#Error message from the test method 18: junit.framework.AssertionFailedError:\n \n#Test method 19:\n```java\n  public void testShadowVariables16() {\n    assumeMinimumCapture = false;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n\n  }\n```\n#Error message from the test method 19: junit.framework.AssertionFailedError:\n \n#Test method 20:\n```java\n  public void testShadowVariables18() {\n    test(\"var a=0;\" +\n        \"function bar(){return a+a}\" +\n        \"function foo(){var a=3;return bar()}\" +\n        \"function _goo(){var a=2;var x=foo();}\",\n\n        \"var a=0;\" +\n        \"function _goo(){var a$$2=2;var x;\" +\n        \"{var a$$inline_0=3;x=a+a}}\");\n  }\n```\n#Error message from the test method 20: junit.framework.AssertionFailedError:\n \n#Test method 21:\n```java\n  public void testCostBasedInlining11() {\n    // With block inlining\n    test(\"function f(a){return a + a;}\" +\n         \"var a = f(f(1))\",\n         \"var a;\" +\n         \"{var a$$inline_0=1+1;\" +\n         \"a=a$$inline_0+a$$inline_0}\");\n  }\n```\n#Error message from the test method 21: junit.framework.AssertionFailedError:\n \n#Test method 22:\n```java\n  public void testMixedModeInliningCosting3() {\n    // Do inline here because the function definition can be eliminated.\n    test(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+10}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3,x())\",\n\n        \"1+2+1+2+4+5+6+7+8+9+1+2+3+10;\" +\n        \"{var JSCompiler_inline_anon_param_2=x();\" +\n        \"2+3+2+3+4+5+6+7+8+9+1+2+3+10}\");\n  }\n```\n#Error message from the test method 22: junit.framework.AssertionFailedError:\n \n#Test method 23:\n```java\n  public void testInlineNeverMutateConstants() {\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }\n```\n#Error message from the test method 23: junit.framework.AssertionFailedError:\n \n#Test method 24:\n```java\n  public void testInlineWithThis7() {\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(a){a=1;this} f.call();\",\n         \"{var a$$inline_0=void 0; a$$inline_0=1; void 0;}\");\n    test(\"function f(a){a=1;this} f.call(x, x);\",\n         \"{var a$$inline_0=x; a$$inline_0=1; x;}\");\n  }\n```\n#Error message from the test method 24: junit.framework.AssertionFailedError:\n \n#Test method 25:\n```java\n  public void testAnonymous1() {\n    assumeMinimumCapture = false;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n         \"{var a$$inline_0=10;\" +\n         \"{var b$$inline_1=a$$inline_0;\" +\n         \"a$$inline_0++;alert(b$$inline_1)}}\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n        \"{var a$$inline_2=10;\" +\n        \"{var b$$inline_0=a$$inline_2;\" +\n        \"a$$inline_2++;alert(b$$inline_0)}}\");\n  }\n```\n#Error message from the test method 25: junit.framework.AssertionFailedError:\n \n#Test method 26:\n```java\n  public void testAnonymous3() {\n    // Introducing a new value into is tricky\n    assumeMinimumCapture = false;\n    testSame(\"(function(){var a=10;(function(){arguments;})()})();\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){arguments;})()})();\",\n         \"{var a$$inline_0=10;(function(){arguments;})();}\");\n\n    test(\"(function(){(function(){arguments;})()})();\",\n        \"{(function(){arguments;})()}\");\n  }\n```\n#Error message from the test method 26: junit.framework.AssertionFailedError:\n \n#Test method 27:\n```java\n  public void testShadowVariables1() {\n    // The Normalize pass now guarantees that that globals are never shadowed\n    // by locals.\n\n    // \"foo\" is inlined here as its parameter \"a\" doesn't conflict.\n    // \"bar\" is assigned a new name.\n    test(\"var a=0;\" +\n         \"function foo(a){return 3+a}\" +\n         \"function bar(){var a=foo(4)}\" +\n         \"bar();\",\n\n         \"var a=0;\" +\n         \"{var a$$inline_0=3+4}\");\n  }\n```\n#Error message from the test method 27: junit.framework.AssertionFailedError:\n \n#Test method 28:\n```java\n  public void testShadowVariables3() {\n    // \"foo\" is inlined into exported \"_bar\", aliasing foo's \"a\".\n    test(\"var a=0;\" +\n        \"function foo(){var a=2;return 3+a}\" +\n        \"function _bar(){a=foo()}\",\n\n        \"var a=0;\" +\n        \"function _bar(){{var a$$inline_0=2;\" +\n        \"a=3+a$$inline_0}}\");\n  }\n```\n#Error message from the test method 28: junit.framework.AssertionFailedError:\n \n#Test method 29:\n```java\n  public void testShadowVariables6() {\n    test(\"var a=0;\" +\n        \"function foo(){var a=4;return 3+a}\" +\n        \"function _bar(a){a=foo(4)}\",\n\n        \"var a=0;function _bar(a$$2){{\" +\n        \"var a$$inline_0=4;\" +\n        \"a$$2=3+a$$inline_0}}\");\n  }\n```\n#Error message from the test method 29: junit.framework.AssertionFailedError:\n \n#Test method 30:\n```java\n  public void testShadowVariables7() {\n    assumeMinimumCapture = false;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n  }\n```\n#Error message from the test method 30: junit.framework.AssertionFailedError:\n \n#Test method 31:\n```java\n  public void testFunctionExpressionCallInlining11b() {\n    assumeMinimumCapture = false;\n    // Can't inline functions that return inner functions and have local names.\n    testSame(\"((function(){var a; return function(){foo()}})())();\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"((function(){var a; return function(){foo()}})())();\",\n\n        \"{var JSCompiler_inline_result$$0;\" +\n        \"var a$$inline_1;\" +\n        \"JSCompiler_inline_result$$0=function(){foo()};}\" +\n        \"JSCompiler_inline_result$$0()\");\n\n  }\n```\n#Error message from the test method 31: junit.framework.AssertionFailedError:\n \n#Test method 32:\n```java\n  public void testComplexInlineNoResultNoParamCall3() {\n    // We now allow vars in the global space.\n    //   Don't inline into vars into global scope.\n    //   testSame(\"function f(){a();b();var z=1+1}f()\");\n\n    // But do inline into functions\n    test(\"function f(){a();b();var z=1+1}function _foo(){f()}\",\n         \"function _foo(){{a();b();var z$$inline_0=1+1}}\");\n\n  }\n```\n#Error message from the test method 32: junit.framework.AssertionFailedError:\n \n#Test method 33:\n```java\n  public void testCostBasedInlining9() {\n    // Here both direct and block inlining is used.  The call to f as a\n    // parameter is inlined directly, which the call to f with f as a parameter\n    // is inlined using block inlining.\n    test(\"function f(a){return 1 + a + a;}\" +\n         \"var a = f(f(1));\",\n         \"var a;\" +\n         \"{var a$$inline_0=1+1+1;\" +\n         \"a=1+a$$inline_0+a$$inline_0}\");\n  }\n```\n#Error message from the test method 33: junit.framework.AssertionFailedError:\n \n#Test method 34:\n```java\n  public void testMethodWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariable_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"      var j = [i];\\n\" +\n        \"      (function(j) {\\n\" +\n        \"        setTimeout(function() { result += j; }, 5 * i);\\n\" +\n        \"      })(j);\\n\" +\n        \"      j = null;\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariable_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_2=[i];\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_0=j$$inline_2;\\n\" +  // this temp is needed.\n        \"  setTimeout(function(){result+=j$$inline_0},5*i);\\n\" +\n        \"  }\\n\" +\n        \"  j$$inline_2=null\\n\" + // because this value can be modified later.\n        \"  }\\n\" +\n        \"}\");\n  }\n```\n#Error message from the test method 34: junit.framework.AssertionFailedError:\n \n#Test method 35:\n```java\n  public void testFunctionExpressionYCombinator() {\n    assumeMinimumCapture = false;\n    testSame(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\",\n        \"var factorial;\\n\" +\n        \"{\\n\" +\n        \"var M$$inline_4 = function(f$$2) {\\n\" +\n        \"  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\\n\" +\n        \"};\\n\" +\n        \"{\\n\" +\n        \"var f$$inline_0=function(f$$inline_7){\\n\" +\n        \"  return M$$inline_4(\\n\" +\n        \"    function(arg$$inline_8){\\n\" +\n        \"      return f$$inline_7(f$$inline_7)(arg$$inline_8)\\n\" +\n        \"     })\\n\" +\n        \"};\\n\" +\n        \"factorial=M$$inline_4(\\n\" +\n        \"  function(arg$$inline_1){\\n\" +\n        \"    return f$$inline_0(f$$inline_0)(arg$$inline_1)\\n\" +\n        \"});\\n\" +\n        \"}\\n\" +\n        \"}\" +\n        \"factorial(5)\");\n  }\n```\n#Error message from the test method 35: junit.framework.AssertionFailedError:\n \n#Test method 36:\n```java\n  public void testComplexInlineVars7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;var z=f(1,b)\",\n         \"var b=1;var z;\" +\n         \"{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2\" +\n         \"}else{\" +\n         \"z=true;break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }\n```\n#Error message from the test method 36: junit.framework.AssertionFailedError:\n \n#Test method 37:\n```java\n  public void testComplexFunctionWithFunctionDefinition2a() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"(function(){\" +\n        \"var f = function(a){call(function(){return a})};f()})()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }\n```\n#Error message from the test method 37: junit.framework.AssertionFailedError:\n \n#Test method 38:\n```java\n  public void testComplexInline7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;z=f(1,b)\",\n         \"var b=1;{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2}else{z=true;\" +\n         \"break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }\n```\n#Error message from the test method 38: junit.framework.AssertionFailedError:\n \n#Test method 39:\n```java\n  public void testFunctionExpressionOmega() {\n    // ... with unused recursive name.\n    test(\"(function (f){f(f)})(function(f){f(f)})\",\n         \"{var f$$inline_0=function(f$$1){f$$1(f$$1)};\" +\n          \"{{f$$inline_0(f$$inline_0)}}}\");\n  }\n```\n#Error message from the test method 39: junit.framework.AssertionFailedError:\n \n#Test method 40:\n```java\n  public void testInlineFunctions15b() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline closure with locals into global scope.\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"function foo(){var x;return function(a){return a+1}}\" +\n         \"var d=c+foo()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"var JSCompiler_temp_const$$0 = c;\\n\" +\n         \"{\\n\" +\n         \"var JSCompiler_inline_result$$1;\\n\" +\n         \"var x$$inline_2;\\n\" +\n         \"JSCompiler_inline_result$$1 = \" +\n         \"    function(a$$inline_3){ return a$$inline_3+1 };\\n\" +\n         \"}\" +\n         \"var d=JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1\");\n  }\n```\n#Error message from the test method 40: junit.framework.AssertionFailedError:\n \n#Test method 41:\n```java\n  public void testInlineFunctions15d() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function foo(){var x; return function(a){return a+1}}\" +\n         \"function _x(){ var d=c+foo() }\");\n\n    assumeMinimumCapture = true;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function _x() { \\n\" +\n         \"  var JSCompiler_temp_const$$0 = c;\\n\" +\n         \"  {\\n\" +\n         \"  var JSCompiler_inline_result$$1;\\n\" +\n         \"  var x$$inline_2;\\n\" +\n         \"  JSCompiler_inline_result$$1 = \" +\n         \"      function(a$$inline_3) {return a$$inline_3+1};\\n\" +\n         \"  }\\n\" +\n         \"  var d = JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\\n\" +\n         \"}\");\n  }\n```\n#Error message from the test method 41: junit.framework.AssertionFailedError:\n \n#Test method 42:\n```java\n  public void testInlineFunctions16a() {\n    assumeMinimumCapture = false;\n\n    testSame(\"function foo(b){return window.bar(function(){c(b)})}\" +\n         \"var d=foo(e)\");\n\n    assumeMinimumCapture = true;\n\n    test(\n        \"function foo(b){return window.bar(function(){c(b)})}\" +\n        \"var d=foo(e)\",\n        \"var d;{var b$$inline_0=e;\" +\n        \"d=window.bar(function(){c(b$$inline_0)})}\");\n  }\n```\n#Error message from the test method 42: junit.framework.AssertionFailedError:\n \n#Test method 43:\n```java\n  public void testBug4944818() {\n    test(\n        \"var getDomServices_ = function(self) {\\n\" +\n        \"  if (!self.domServices_) {\\n\" +\n        \"    self.domServices_ = goog$component$DomServices.get(\" +\n        \"        self.appContext_);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  return self.domServices_;\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"var getOwnerWin_ = function(self) {\\n\" +\n        \"  return getDomServices_(self).getDomHelper().getWindow();\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"HangoutStarter.prototype.launchHangout = function() {\\n\" +\n        \"  var self = a.b;\\n\" +\n        \"  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\\n\" +\n        \"};\",\n        \"HangoutStarter.prototype.launchHangout = function() { \" +\n        \"  var self$$2 = a.b;\" +\n        \"  var JSCompiler_temp_const$$0 = goog.Uri;\" +\n        \"  {\" +\n        \"  var JSCompiler_inline_result$$1;\" +\n        \"  var self$$inline_2 = self$$2;\" +\n        \"  if (!self$$inline_2.domServices_) {\" +\n        \"    self$$inline_2.domServices_ = goog$component$DomServices.get(\" +\n        \"        self$$inline_2.appContext_);\" +\n        \"  }\" +\n        \"  JSCompiler_inline_result$$1=self$$inline_2.domServices_;\" +\n        \"  }\" +\n        \"  var myUrl = new JSCompiler_temp_const$$0(\" +\n        \"      JSCompiler_inline_result$$1.getDomHelper().\" +\n        \"          getWindow().location.href)\" +\n        \"}\");\n  }\n```\n#Error message from the test method 43: junit.framework.AssertionFailedError:\n \n#Test method 44:\n```java\n  public void testComplexSample() {\n    String result = \"\" +\n      \"{{\" +\n      \"var styleSheet$$inline_2=null;\" +\n      \"if(goog$userAgent$IE)\" +\n        \"styleSheet$$inline_2=0;\" +\n      \"else \" +\n        \"var head$$inline_3=0;\" +\n      \"{\" +\n        \"var element$$inline_4=\" +\n            \"styleSheet$$inline_2;\" +\n        \"var stylesString$$inline_5=a;\" +\n        \"if(goog$userAgent$IE)\" +\n          \"element$$inline_4.cssText=\" +\n              \"stylesString$$inline_5;\" +\n        \"else \" +\n        \"{\" +\n          \"var propToSet$$inline_6=\" +\n              \"\\\"innerText\\\";\" +\n          \"element$$inline_4[\" +\n              \"propToSet$$inline_6]=\" +\n                  \"stylesString$$inline_5\" +\n        \"}\" +\n      \"}\" +\n      \"styleSheet$$inline_2\" +\n      \"}}\";\n\n    test(\"var foo = function(stylesString, opt_element) { \" +\n        \"var styleSheet = null;\" +\n        \"if (goog$userAgent$IE)\" +\n          \"styleSheet = 0;\" +\n        \"else \" +\n          \"var head = 0;\" +\n        \"\" +\n        \"goo$zoo(styleSheet, stylesString);\" +\n        \"return styleSheet;\" +\n     \" };\\n \" +\n\n     \"var goo$zoo = function(element, stylesString) {\" +\n        \"if (goog$userAgent$IE)\" +\n          \"element.cssText = stylesString;\" +\n        \"else {\" +\n          \"var propToSet = 'innerText';\" +\n          \"element[propToSet] = stylesString;\" +\n        \"}\" +\n      \"};\" +\n      \"(function(){foo(a,b);})();\",\n     result);\n  }\n```\n#Error message from the test method 44: junit.framework.AssertionFailedError:\n \n#Test method 45:\n```java\n  public void testNoInlineIfParametersModified1() {\n    // Assignment\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }\n```\n#Error message from the test method 45: junit.framework.AssertionFailedError:\n \n#Test method 46:\n```java\n  public void testNoInlineIfParametersModified2() {\n    test(\"function f(x){return (x)=1;}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0=1}\");\n  }\n```\n#Error message from the test method 46: junit.framework.AssertionFailedError:\n \n#Test method 47:\n```java\n  public void testNoInlineIfParametersModified3() {\n    // Assignment variant.\n    test(\"function f(x){return x*=2}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0*=2}\");\n  }\n```\n#Error message from the test method 47: junit.framework.AssertionFailedError:\n \n#Test method 48:\n```java\n  public void testNoInlineIfParametersModified4() {\n    // Assignment in if.\n    test(\"function f(x){return x?(x=2):0}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0?(\" +\n         \"x$$inline_0=2):0}\");\n  }\n```\n#Error message from the test method 48: junit.framework.AssertionFailedError:\n \n#Test method 49:\n```java\n  public void testNoInlineIfParametersModified5() {\n    // Assignment in if, multiple params\n    test(\"function f(x,y){return x?(y=2):0}f(2,undefined)\",\n         \"{var y$$inline_1=undefined;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }\n```\n#Error message from the test method 49: junit.framework.AssertionFailedError:\n \n#Test method 50:\n```java\n  public void testNoInlineIfParametersModified6() {\n    test(\"function f(x,y){return x?(y=2):0}f(2)\",\n         \"{var y$$inline_1=void 0;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }\n```\n#Error message from the test method 50: junit.framework.AssertionFailedError:\n \n#Test method 51:\n```java\n  public void testNoInlineIfParametersModified7() {\n    // Increment\n    test(\"function f(a){return++a<++a}f(1)\",\n         \"{var a$$inline_0=1;\" +\n         \"++a$$inline_0<\" +\n         \"++a$$inline_0}\");\n  }\n```\n#Error message from the test method 51: junit.framework.AssertionFailedError:\n \n#Test method 52:\n```java\n  public void testIssue423() {\n    assumeMinimumCapture = false;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"(function($){\" +\n        \"  $.fn.multicheck=function(options$$1){\" +\n        \"    {\" +\n        \"     options$$1.checkboxes=$(this).siblings(\\\":checkbox\\\");\" +\n        \"     {\" +\n        \"       $(this).data(\\\"checkboxes\\\")\" +\n        \"     }\" +\n        \"    }\" +\n        \"  }\" +\n        \"})(jQuery)\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"{var $$$inline_0=jQuery;\\n\" +\n        \"$$$inline_0.fn.multicheck=function(options$$inline_4){\\n\" +\n        \"  {options$$inline_4.checkboxes=\" +\n            \"$$$inline_0(this).siblings(\\\":checkbox\\\");\\n\" +\n        \"  {$$$inline_0(this).data(\\\"checkboxes\\\")}\" +\n        \"  }\\n\" +\n        \"}\\n\" +\n        \"}\");\n  }\n```\n#Error message from the test method 52: junit.framework.AssertionFailedError:\n \n#Test method 53:\n```java\n  public void testComplexFunctionWithFunctionDefinition2() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"function f(a){call(function(){return})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }\n```\n#Error message from the test method 53: junit.framework.AssertionFailedError:\n \n#Test method 54:\n```java\n  public void testComplexFunctionWithFunctionDefinition3() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might need to be captured.\n    testSame(\"function f(){var a; call(function(){return a})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function f(){var a; call(function(){return a})}f()\",\n         \"{var a$$inline_0;call(function(){return a$$inline_0})}\");\n\n  }\n```\n#Error message from the test method 54: junit.framework.AssertionFailedError:\n \n#Test method 55:\n```java\n  public void testDecomposeFunctionExpressionInCall() {\n    test(\n        \"(function(map){descriptions_=map})(\\n\" +\n           \"function(){\\n\" +\n              \"var ret={};\\n\" +\n              \"ret[ONE]='a';\\n\" +\n              \"ret[TWO]='b';\\n\" +\n              \"return ret\\n\" +\n           \"}()\\n\" +\n        \");\",\n        \"{\" +\n        \"var JSCompiler_inline_result$$0;\" +\n        \"var ret$$inline_1={};\\n\" +\n        \"ret$$inline_1[ONE]='a';\\n\" +\n        \"ret$$inline_1[TWO]='b';\\n\" +\n        \"JSCompiler_inline_result$$0 = ret$$inline_1;\\n\" +\n        \"}\" +\n        \"{\" +\n        \"descriptions_=JSCompiler_inline_result$$0;\" +\n        \"}\"\n        );\n  }\n```\n#Error message from the test method 55: junit.framework.AssertionFailedError:\n \n#Test method 56:\n```java\n  public void testInlineNeverOverrideNewValues() {\n    test(\"function f(a){return++a<++a}f(1)\",\n        \"{var a$$inline_0=1;\" +\n        \"++a$$inline_0<++a$$inline_0}\");\n  }\n```\n#Error message from the test method 56: junit.framework.AssertionFailedError:\n \n#Test method 57:\n```java\n  public void testInlineBlockMutableArgs1() {\n    test(\"function foo(x){x+x}foo([])\",\n         \"{var x$$inline_0=[];\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n```\n#Error message from the test method 57: junit.framework.AssertionFailedError:\n \n#Test method 58:\n```java\n  public void testInlineBlockMutableArgs2() {\n    test(\"function foo(x){x+x}foo(new Date)\",\n         \"{var x$$inline_0=new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n```\n#Error message from the test method 58: junit.framework.AssertionFailedError:\n \n#Test method 59:\n```java\n  public void testInlineBlockMutableArgs3() {\n    test(\"function foo(x){x+x}foo(true&&new Date)\",\n         \"{var x$$inline_0=true&&new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n```\n#Error message from the test method 59: junit.framework.AssertionFailedError:\n \n#Test method 60:\n```java\n  public void testInlineBlockMutableArgs4() {\n    test(\"function foo(x){x+x}foo({})\",\n         \"{var x$$inline_0={};\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n```\n#Error message from the test method 60: junit.framework.AssertionFailedError:\n \n#Test method 61:\n```java\n  public void testInlineFunctions10() {\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i);y=INC(i)\",\n         \"var y;\" +\n         \"{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\" +\n         \"{var x$$inline_2=i;\" +\n         \"y=x$$inline_2++}\");\n  }\n```\n#Error message from the test method 61: junit.framework.AssertionFailedError:\n \n#Test method 62:\n```java\n  public void testInlineFunctions13() {\n    // inline as block if the input parameter has side-effects.\n    test(\"function f(x){return x}\" +\n         \"var y=f(i++)\",\n         \"var y;{var x$$inline_0=i++;y=x$$inline_0}\");\n  }\n```\n#Error message from the test method 62: junit.framework.AssertionFailedError:\n \n#Test method 63:\n```java\n  public void testInlineFunctions22() {\n    // Another tricky case ... test nested compiler inlines\n    test(\"function plex(a){if(a) return 0;else return 1;}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"function bar(d){return plex(d)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_plex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_plex_1}\" +\n         \"else{\" +\n         \"d=1;break JSCompiler_inline_label_plex_1}d=void 0}}\");\n  }\n```\n#Error message from the test method 63: junit.framework.AssertionFailedError:\n \n#Test method 64:\n```java\n  public void testInlineFunctions23() {\n    // Test both orderings again\n    test(\"function complex(a){if(a) return 0;else return 1;}\" +\n         \"function bar(d){return complex(d)}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_complex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_complex_1\" +\n         \"}else{\" +\n         \"d=1;break JSCompiler_inline_label_complex_1\" +\n         \"}d=void 0}}\");\n  }\n```\n#Error message from the test method 64: junit.framework.AssertionFailedError:\n \n#Test method 65:\n```java\n  public void testInlineFunctions9() {\n    // don't inline if the input parameter is modified.\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i)\",\n         \"var y;{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\");\n  }\n```\n#Error message from the test method 65: junit.framework.AssertionFailedError:\n \n#Test method 66:\n```java\n  public void testMakeLocalNamesUniqueWithContext5() {\n    // Set the test type\n    this.useDefaultRenamer = true;\n\n    testWithInversion(\n        \"function f(){var f; f = 1}\",\n        \"function f(){var f$$1; f$$1 = 1}\");\n    testWithInversion(\n        \"function f(f){f = 1}\",\n        \"function f(f$$1){f$$1 = 1}\");\n    testWithInversion(\n        \"function f(f){var f; f = 1}\",\n        \"function f(f$$1){var f$$1; f$$1 = 1}\");\n\n    test(\n        \"var fn = function f(){var f; f = 1}\",\n        \"var fn = function f(){var f$$1; f$$1 = 1}\");\n    test(\n        \"var fn = function f(f){f = 1}\",\n        \"var fn = function f(f$$1){f$$1 = 1}\");\n    test(\n        \"var fn = function f(f){var f; f = 1}\",\n        \"var fn = function f(f$$1){var f$$1; f$$1 = 1}\");\n  }\n```\n#Error message from the test method 66: junit.framework.AssertionFailedError:\n\n---\n\n## Your Goal\n\nFix the buggy methods. Return only the fixed Java methods. Do not include explanations or other text.\n",
                        "patches": [
                            "\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getToken()) {\n      case NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO: Do we need to do anything about the javadoc?\n            n.removeProperty(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case FUNCTION:\n        // Remove the function body scope\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n      case CATCH:\n        // Remove catch exception name from the stack of names.\n        nameStack.pop();\n        break;\n    }\n}\n",
                            "\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n        case Token.NAME:\n            String newName = getReplacementName(n.getString());\n            if (newName != null) {\n                Renamer renamer = nameStack.peek();\n                if (renamer.stripConstIfReplaced()) {\n                    n.removeProp(Node.IS_CONSTANT_NAME);\n                }\n                n.setString(newName);\n                t.getCompiler().reportCodeChange();\n            }\n            break;\n\n        case Token.FUNCTION:\n            Node functionBody = NodeUtil.getFunctionBody(n);\n            // Ensure processing of FUNCTION body before popping renamer stack\n            findDeclaredNames(functionBody, null, nameStack.peek());\n            // Remove the function body scope\n            nameStack.pop();\n            break;\n\n        case Token.CATCH:\n            // Remove catch except name from the stack of names.\n            nameStack.pop();\n            break;\n    }\n}\n",
                            "\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  switch (n.getType()) {\n    case Token.NAME:\n      String newName = getReplacementName(n.getString());\n      if (newName != null) {\n        Renamer renamer = nameStack.peek();\n        if (renamer.stripConstIfReplaced()) {\n          n.removeProp(Node.IS_CONSTANT_NAME);\n        }\n        n.setString(newName);\n        t.getCompiler().reportCodeChange();\n      }\n      break;\n\n    case Token.FUNCTION:\n      // A Function node must be removed from the name stack twice:\n      // Once for parameters and once for the function body.\n      nameStack.pop();\n      nameStack.pop();\n      break;\n\n    case Token.CATCH:\n      // Remove catch except name from the stack of names.\n      nameStack.pop();\n      break;\n  }\n}\n",
                            "\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n        case Token.NAME:\n            String newName = getReplacementName(n.getString());\n            if (newName != null) {\n                Renamer renamer = nameStack.peek();\n                if (renamer.stripConstIfReplaced()) {\n                    // TODO: Do we need to do anything about the javadoc?\n                    n.removeProp(Node.IS_CONSTANT_NAME);\n                }\n                n.setString(newName);\n                t.getCompiler().reportCodeChange();\n            }\n            break;\n\n        case Token.FUNCTION:\n            // Remove the function body scope\n            // Remove function recursive name (if any).\n            nameStack.pop();\n            break;\n\n        case Token.CATCH:\n            // Remove catch except name from the stack of names.\n            nameStack.pop();\n            break;\n    }\n}\n",
                            "\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  switch (n.getType()) {\n    case Token.NAME:\n      String newName = getReplacementName(n.getString());\n      if (newName != null) {\n        Renamer renamer = nameStack.peek();\n        if (renamer.stripConstIfReplaced()) {\n          // TODO: Do we need to do anything about the javadoc?\n          n.removeProp(Node.IS_CONSTANT_NAME);\n        }\n        n.setString(newName);\n        t.getCompiler().reportCodeChange();\n      }\n      break;\n\n    case Token.FUNCTION:\n      // Remove the function body scope\n      // Remove function recursive name (if any).\n      nameStack.pop();\n      break;\n\n    case Token.CATCH:\n      // Remove catch except name from the stack of names.\n      nameStack.pop();\n      break;\n  }\n}\n"
                        ],
                        "evaluation_done": true
                    }
                }
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline19b": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline19b",
                "src": "  public void testInline19b() {\n    helperInlineReferenceToFunction(\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){y = a; x = b;}; \" +\n        \"function bar() { foo(x,y); }\",\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){y = a; x = b;}; \" +\n        \"function bar() {\" +\n           \"{var b$$inline_1=y;\" +\n            \"y = x;\" +\n            \"x = b$$inline_1;}\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var x=1;var y=2;function foo(a,b){y=a;x=b}function bar(){var b$$inline_1=y;y=x;x=b$$inline_1}\nResult: var x=1;var y=2;function foo(a,b){y=a;x=b}function bar(){var b$$inline_3=y;y=x;x=b$$inline_3}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n            NUMBER 1.0 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME y 1 [source_file:  [testcode] ]\n            NUMBER 2.0 1 [source_file:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n            NAME b 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME y 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n                    NAME b 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION bar 1 [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                        NAME b$$inline_1 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    VAR 1 [source_file: code]\n        NAME x 1 [source_file: code]\n            NUMBER 1.0 1 [source_file: code]\n    VAR 1 [source_file: code]\n        NAME y 1 [source_file: code]\n            NUMBER 2.0 1 [source_file: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n            NAME b 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME y 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME x 1 [source_file: code]\n                    NAME b 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION bar 1 [source_file: code]\n        NAME bar 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME b$$inline_3 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                        NAME b$$inline_3 1 [source_file: code]\n\n\nSubtree1: NAME b$$inline_1 1 [source_file:  [testcode] ]\n    NAME y 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME b$$inline_3 1 [source_file: code]\n    NAME y 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline19b(FunctionInjectorTest.java:945)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var x=1;var y=2;function foo(a,b){y=a;x=b}function bar(){var b$$inline_1=y;y=x;x=b$$inline_1}\nResult: var x=1;var y=2;function foo(a,b){y=a;x=b}function bar(){var b$$inline_3=y;y=x;x=b$$inline_3}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n            NUMBER 1.0 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME y 1 [source_file:  [testcode] ]\n            NUMBER 2.0 1 [source_file:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n            NAME b 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME y 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n                    NAME b 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION bar 1 [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                        NAME b$$inline_1 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    VAR 1 [source_file: code]\n        NAME x 1 [source_file: code]\n            NUMBER 1.0 1 [source_file: code]\n    VAR 1 [source_file: code]\n        NAME y 1 [source_file: code]\n            NUMBER 2.0 1 [source_file: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n            NAME b 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME y 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME x 1 [source_file: code]\n                    NAME b 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION bar 1 [source_file: code]\n        NAME bar 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME b$$inline_3 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                        NAME b$$inline_3 1 [source_file: code]\n\n\nSubtree1: NAME b$$inline_1 1 [source_file:  [testcode] ]\n    NAME y 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME b$$inline_3 1 [source_file: code]\n    NAME y 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)  traverseBranch(body, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline19b(FunctionInjectorTest.java:945)  helperInlineReferenceToFunction(        \"var x = 1; var y = 2;\" +        \"function foo(a,b){y = a; x = b;}; \" +        \"function bar() { foo(x,y); }\",        \"var x = 1; var y = 2;\" +        \"function foo(a,b){y = a; x = b;}; \" +        \"function bar() {\" +           \"{var b$$inline_1=y;\" +            \"y = x;\" +            \"x = b$$inline_1;}\" +        \"}\",        \"foo\", INLINE_BLOCK);"
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInlineIntoLoop": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInlineIntoLoop",
                "src": "  public void testInlineIntoLoop() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n        \"for(;1;){ foo(1); }\",\n        \"function foo(a){var b;return a;}; \" +\n        \"for(;1;){ {\" +\n            \"var b$$inline_1=void 0;1}}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n        \"do{ foo(1); } while(1)\",\n        \"function foo(a){var b;return a;}; \" +\n        \"do{ {\" +\n            \"var b$$inline_1=void 0;1}}while(1)\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){for(var b in c)return a;}; \" +\n        \"for(;1;){ foo(1); }\",\n        \"function foo(a){var b;for(b in c)return a;}; \" +\n        \"for(;1;){ {JSCompiler_inline_label_foo_2:{\" +\n            \"var b$$inline_1=void 0;for(b$$inline_1 in c){\" +\n              \"1;break JSCompiler_inline_label_foo_2\" +\n            \"}}}}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){var b;return a}for(;1;){var b$$inline_1=void 0;1}\nResult: function foo(a){var b;return a}for(;1;){var b$$inline_3=void 0;1}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            VAR 1 [source_file:  [testcode] ]\n                NAME b 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FOR 1 [source_file:  [testcode] ]\n        EMPTY 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n        EMPTY 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                        VOID 1 [source_file:  [testcode] ]\n                            NUMBER 0.0 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            VAR 1 [source_file: code]\n                NAME b 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FOR 1 [source_file: code]\n        EMPTY 1 [source_file: code]\n        NUMBER 1.0 1 [source_file: code]\n        EMPTY 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME b$$inline_3 1 [source_file: code]\n                        VOID 1 [source_file: code]\n                            NUMBER 0.0 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    NUMBER 1.0 1 [source_file: code]\n\n\nSubtree1: NAME b$$inline_1 1 [source_file:  [testcode] ]\n    VOID 1 [source_file:  [testcode] ]\n        NUMBER 0.0 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME b$$inline_3 1 [source_file: code]\n    VOID 1 [source_file: code]\n        NUMBER 0.0 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInlineIntoLoop(FunctionInjectorTest.java:960)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){var b;return a}for(;1;){var b$$inline_1=void 0;1}\nResult: function foo(a){var b;return a}for(;1;){var b$$inline_3=void 0;1}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            VAR 1 [source_file:  [testcode] ]\n                NAME b 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FOR 1 [source_file:  [testcode] ]\n        EMPTY 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n        EMPTY 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                        VOID 1 [source_file:  [testcode] ]\n                            NUMBER 0.0 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            VAR 1 [source_file: code]\n                NAME b 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FOR 1 [source_file: code]\n        EMPTY 1 [source_file: code]\n        NUMBER 1.0 1 [source_file: code]\n        EMPTY 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME b$$inline_3 1 [source_file: code]\n                        VOID 1 [source_file: code]\n                            NUMBER 0.0 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    NUMBER 1.0 1 [source_file: code]\n\n\nSubtree1: NAME b$$inline_1 1 [source_file:  [testcode] ]\n    VOID 1 [source_file:  [testcode] ]\n        NUMBER 0.0 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME b$$inline_3 1 [source_file: code]\n    VOID 1 [source_file: code]\n        NUMBER 0.0 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInlineIntoLoop(FunctionInjectorTest.java:960)  helperInlineReferenceToFunction(        \"function foo(a){var b;return a;}; \" +        \"for(;1;){ foo(1); }\",        \"function foo(a){var b;return a;}; \" +        \"for(;1;){ {\" +            \"var b$$inline_1=void 0;1}}\",        \"foo\", INLINE_BLOCK);"
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline13": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline13",
                "src": "  public void testInline13() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"function foo(a){return a;}; \" +\n        \"function x() {{var a$$inline_0=x++;\" +\n            \"a$$inline_0}}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a}function x(){var a$$inline_0=x++;a$$inline_0}\nResult: function foo(a){return a}function x(){var a$$inline_1=x++;a$$inline_1}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION x 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n                        INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                            NAME x 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION x 1 [source_file: code]\n        NAME x 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME a$$inline_1 1 [source_file: code]\n                        INC 1 [incrdecr: 1] [source_file: code]\n                            NAME x 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    INC 1 [incrdecr: 1] [source_file: code]\n        NAME x 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline13(FunctionInjectorTest.java:866)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a}function x(){var a$$inline_0=x++;a$$inline_0}\nResult: function foo(a){return a}function x(){var a$$inline_1=x++;a$$inline_1}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION x 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n                        INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                            NAME x 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION x 1 [source_file: code]\n        NAME x 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME a$$inline_1 1 [source_file: code]\n                        INC 1 [incrdecr: 1] [source_file: code]\n                            NAME x 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    INC 1 [incrdecr: 1] [source_file: code]\n        NAME x 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)  traverseBranch(body, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline13(FunctionInjectorTest.java:866)  helperInlineReferenceToFunction(        \"function foo(a){return a;}; \" +        \"function x() { foo(x++); }\",        \"function foo(a){return a;}; \" +        \"function x() {{var a$$inline_0=x++;\" +            \"a$$inline_0}}\",        \"foo\", INLINE_BLOCK);"
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline14": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline14",
                "src": "  public void testInline14() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(x++);\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=x++;\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a+a}var a$$inline_0=x++;a$$inline_0+a$$inline_0\nResult: function foo(a){return a+a}var a$$inline_1=x++;a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                ADD 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            ADD 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                ADD 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                INC 1 [incrdecr: 1] [source_file: code]\n                    NAME x 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            ADD 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    INC 1 [incrdecr: 1] [source_file: code]\n        NAME x 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline14(FunctionInjectorTest.java:877)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a+a}var a$$inline_0=x++;a$$inline_0+a$$inline_0\nResult: function foo(a){return a+a}var a$$inline_1=x++;a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                ADD 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            ADD 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                ADD 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                INC 1 [incrdecr: 1] [source_file: code]\n                    NAME x 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            ADD 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    INC 1 [incrdecr: 1] [source_file: code]\n        NAME x 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline14(FunctionInjectorTest.java:877)  helperInlineReferenceToFunction(        \"function foo(a){return a+a;}; foo(x++);\",        \"function foo(a){return a+a;}; \" +            \"{var a$$inline_0=x++;\" +            \" a$$inline_0+\" +            \"a$$inline_0;}\",        \"foo\", INLINE_BLOCK);"
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline15": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline15",
                "src": "  public void testInline15() {\n    // Parameter has mutable, references more than once.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(new Date());\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=new Date();\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a+a}var a$$inline_0=new Date;a$$inline_0+a$$inline_0\nResult: function foo(a){return a+a}var a$$inline_1=new Date;a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                ADD 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NEW 1 [source_file:  [testcode] ]\n                    NAME Date 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            ADD 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                ADD 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                NEW 1 [source_file: code]\n                    NAME Date 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            ADD 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    NEW 1 [source_file:  [testcode] ]\n        NAME Date 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    NEW 1 [source_file: code]\n        NAME Date 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline15(FunctionInjectorTest.java:888)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a+a}var a$$inline_0=new Date;a$$inline_0+a$$inline_0\nResult: function foo(a){return a+a}var a$$inline_1=new Date;a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                ADD 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NEW 1 [source_file:  [testcode] ]\n                    NAME Date 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            ADD 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                ADD 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                NEW 1 [source_file: code]\n                    NAME Date 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            ADD 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    NEW 1 [source_file:  [testcode] ]\n        NAME Date 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    NEW 1 [source_file: code]\n        NAME Date 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline15(FunctionInjectorTest.java:888)  helperInlineReferenceToFunction(        \"function foo(a){return a+a;}; foo(new Date());\",        \"function foo(a){return a+a;}; \" +            \"{var a$$inline_0=new Date();\" +            \" a$$inline_0+\" +            \"a$$inline_0;}\",        \"foo\", INLINE_BLOCK);"
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline16": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline16",
                "src": "  public void testInline16() {\n    // Parameter is large, references more than once.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(function(){});\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=function(){};\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a+a}var a$$inline_0=function(){};a$$inline_0+a$$inline_0\nResult: function foo(a){return a+a}var a$$inline_1=function(){};a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                ADD 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                FUNCTION  1 [source_file:  [testcode] ]\n                    NAME  1 [source_file:  [testcode] ]\n                    LP 1 [source_file:  [testcode] ]\n                    BLOCK 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            ADD 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                ADD 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                FUNCTION  1 [source_file: code]\n                    NAME  1 [source_file: code]\n                    LP 1 [source_file: code]\n                    BLOCK 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            ADD 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    FUNCTION  1 [source_file: code]\n        NAME  1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline16(FunctionInjectorTest.java:899)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a+a}var a$$inline_0=function(){};a$$inline_0+a$$inline_0\nResult: function foo(a){return a+a}var a$$inline_1=function(){};a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                ADD 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                FUNCTION  1 [source_file:  [testcode] ]\n                    NAME  1 [source_file:  [testcode] ]\n                    LP 1 [source_file:  [testcode] ]\n                    BLOCK 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            ADD 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                ADD 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                FUNCTION  1 [source_file: code]\n                    NAME  1 [source_file: code]\n                    LP 1 [source_file: code]\n                    BLOCK 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            ADD 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    FUNCTION  1 [source_file: code]\n        NAME  1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline16(FunctionInjectorTest.java:899)  helperInlineReferenceToFunction(        \"function foo(a){return a+a;}; foo(function(){});\",        \"function foo(a){return a+a;}; \" +            \"{var a$$inline_0=function(){};\" +            \" a$$inline_0+\" +            \"a$$inline_0;}\",        \"foo\", INLINE_BLOCK);"
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline17": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline17",
                "src": "  public void testInline17() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; foo(goo());\",\n        \"function foo(a){return true;};\" +\n            \"{var a$$inline_0=goo();true}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return true}var a$$inline_0=goo();true\nResult: function foo(a){return true}var a$$inline_1=goo();true\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                TRUE 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                    NAME goo 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            TRUE 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                TRUE 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                CALL 1 [free_call: 1] [source_file: code]\n                    NAME goo 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            TRUE 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME goo 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    CALL 1 [free_call: 1] [source_file: code]\n        NAME goo 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline17(FunctionInjectorTest.java:910)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return true}var a$$inline_0=goo();true\nResult: function foo(a){return true}var a$$inline_1=goo();true\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                TRUE 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                    NAME goo 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            TRUE 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                TRUE 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                CALL 1 [free_call: 1] [source_file: code]\n                    NAME goo 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            TRUE 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME goo 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    CALL 1 [free_call: 1] [source_file: code]\n        NAME goo 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline17(FunctionInjectorTest.java:910)  helperInlineReferenceToFunction(        \"function foo(a){return true;}; foo(goo());\",        \"function foo(a){return true;};\" +            \"{var a$$inline_0=goo();true}\",        \"foo\", INLINE_BLOCK);"
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline18": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline18",
                "src": "  public void testInline18() {\n    // This doesn't bring names into the global name space.\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n            \"function x() { foo(goo()); }\",\n            \"function foo(a){var b;return a;}; \" +\n            \"function x() {{var a$$inline_0=goo();\" +\n                \"var b$$inline_1;a$$inline_0}}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){var b;return a}function x(){var a$$inline_0=goo();var b$$inline_1;a$$inline_0}\nResult: function foo(a){var b;return a}function x(){var a$$inline_2=goo();var b$$inline_3;a$$inline_2}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            VAR 1 [source_file:  [testcode] ]\n                NAME b 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION x 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n                        CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                            NAME goo 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            VAR 1 [source_file: code]\n                NAME b 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION x 1 [source_file: code]\n        NAME x 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME a$$inline_2 1 [source_file: code]\n                        CALL 1 [free_call: 1] [source_file: code]\n                            NAME goo 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME b$$inline_3 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    NAME a$$inline_2 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME goo 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: code]\n    CALL 1 [free_call: 1] [source_file: code]\n        NAME goo 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline18(FunctionInjectorTest.java:919)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){var b;return a}function x(){var a$$inline_0=goo();var b$$inline_1;a$$inline_0}\nResult: function foo(a){var b;return a}function x(){var a$$inline_2=goo();var b$$inline_3;a$$inline_2}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            VAR 1 [source_file:  [testcode] ]\n                NAME b 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION x 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n                        CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                            NAME goo 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            VAR 1 [source_file: code]\n                NAME b 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION x 1 [source_file: code]\n        NAME x 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME a$$inline_2 1 [source_file: code]\n                        CALL 1 [free_call: 1] [source_file: code]\n                            NAME goo 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME b$$inline_3 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    NAME a$$inline_2 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME goo 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: code]\n    CALL 1 [free_call: 1] [source_file: code]\n        NAME goo 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)  traverseBranch(body, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline18(FunctionInjectorTest.java:919)  helperInlineReferenceToFunction(        \"function foo(a){var b;return a;}; \" +            \"function x() { foo(goo()); }\",            \"function foo(a){var b;return a;}; \" +            \"function x() {{var a$$inline_0=goo();\" +                \"var b$$inline_1;a$$inline_0}}\",        \"foo\", INLINE_BLOCK);"
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline19": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline19",
                "src": "  public void testInline19() {\n    // Properly alias.\n    helperInlineReferenceToFunction(\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){x = b; y = a;}; \" +\n        \"function bar() { foo(x,y); }\",\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){x = b; y = a;}; \" +\n        \"function bar() {\" +\n           \"{var a$$inline_0=x;\" +\n            \"x = y;\" +\n            \"y = a$$inline_0;}\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var x=1;var y=2;function foo(a,b){x=b;y=a}function bar(){var a$$inline_0=x;x=y;y=a$$inline_0}\nResult: var x=1;var y=2;function foo(a,b){x=b;y=a}function bar(){var a$$inline_2=x;x=y;y=a$$inline_2}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n            NUMBER 1.0 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME y 1 [source_file:  [testcode] ]\n            NUMBER 2.0 1 [source_file:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n            NAME b 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n                    NAME b 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME y 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION bar 1 [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                        NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    VAR 1 [source_file: code]\n        NAME x 1 [source_file: code]\n            NUMBER 1.0 1 [source_file: code]\n    VAR 1 [source_file: code]\n        NAME y 1 [source_file: code]\n            NUMBER 2.0 1 [source_file: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n            NAME b 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME x 1 [source_file: code]\n                    NAME b 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME y 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION bar 1 [source_file: code]\n        NAME bar 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME a$$inline_2 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                        NAME a$$inline_2 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: code]\n    NAME x 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline19(FunctionInjectorTest.java:930)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var x=1;var y=2;function foo(a,b){x=b;y=a}function bar(){var a$$inline_0=x;x=y;y=a$$inline_0}\nResult: var x=1;var y=2;function foo(a,b){x=b;y=a}function bar(){var a$$inline_2=x;x=y;y=a$$inline_2}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n            NUMBER 1.0 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME y 1 [source_file:  [testcode] ]\n            NUMBER 2.0 1 [source_file:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n            NAME b 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n                    NAME b 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME y 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION bar 1 [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                        NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    VAR 1 [source_file: code]\n        NAME x 1 [source_file: code]\n            NUMBER 1.0 1 [source_file: code]\n    VAR 1 [source_file: code]\n        NAME y 1 [source_file: code]\n            NUMBER 2.0 1 [source_file: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n            NAME b 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME x 1 [source_file: code]\n                    NAME b 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME y 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION bar 1 [source_file: code]\n        NAME bar 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME a$$inline_2 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                        NAME a$$inline_2 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: code]\n    NAME x 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)  traverseBranch(body, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline19(FunctionInjectorTest.java:930)  helperInlineReferenceToFunction(        \"var x = 1; var y = 2;\" +        \"function foo(a,b){x = b; y = a;}; \" +        \"function bar() { foo(x,y); }\",        \"var x = 1; var y = 2;\" +        \"function foo(a,b){x = b; y = a;}; \" +        \"function bar() {\" +           \"{var a$$inline_0=x;\" +            \"x = y;\" +            \"y = a$$inline_0;}\" +        \"}\",        \"foo\", INLINE_BLOCK);"
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testBug1897706": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testBug1897706",
                "src": "  public void testBug1897706() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){}; foo(x())\",\n        \"function foo(a){}; {var a$$inline_0=x()}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){bar()}; foo(x())\",\n        \"function foo(a){bar()}; {var a$$inline_0=x();bar()}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a,b){bar()}; foo(x(),y())\",\n        \"function foo(a,b){bar()};\" +\n        \"{var a$$inline_0=x();var b$$inline_1=y();bar()}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){}var a$$inline_0=x()\nResult: function foo(a){}var a$$inline_1=x()\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                CALL 1 [free_call: 1] [source_file: code]\n                    NAME x 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    CALL 1 [free_call: 1] [source_file: code]\n        NAME x 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testBug1897706(FunctionInjectorTest.java:1315)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(a){}var a$$inline_0=x()\nResult: function foo(a){}var a$$inline_1=x()\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                CALL 1 [free_call: 1] [source_file: code]\n                    NAME x 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    CALL 1 [free_call: 1] [source_file: code]\n        NAME x 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testBug1897706(FunctionInjectorTest.java:1315)  helperInlineReferenceToFunction(        \"function foo(a){}; foo(x())\",        \"function foo(a){}; {var a$$inline_0=x()}\",        \"foo\", INLINE_BLOCK);"
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInlineFunctionWithInnerFunction5": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInlineFunctionWithInnerFunction5",
                "src": "  public void testInlineFunctionWithInnerFunction5() {\n    // Call with inner function statement.\n    helperInlineReferenceToFunction(\n        \"function foo(){function x() {var a; return true;} return x}; foo();\",\n        \"function foo(){function x(){var a;return true}return x};\" +\n            \"{var x$$inline_0 = function(){\" +\n            \"var a$$inline_1;return true};x$$inline_0}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(){function x(){var a;return true}return x}var x$$inline_0=function(){var a$$inline_1;return true};x$$inline_0\nResult: function foo(){function x(){var a;return true}return x}var x$$inline_1=function(){var a$$inline_2;return true};x$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            FUNCTION x 1 [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n                LP 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n                    VAR 1 [source_file:  [testcode] ]\n                        NAME a 1 [source_file:  [testcode] ]\n                    RETURN 1 [source_file:  [testcode] ]\n                        TRUE 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME x$$inline_0 1 [source_file:  [testcode] ]\n                FUNCTION  1 [source_file:  [testcode] ]\n                    NAME  1 [source_file:  [testcode] ]\n                    LP 1 [source_file:  [testcode] ]\n                    BLOCK 1 [source_file:  [testcode] ]\n                        VAR 1 [source_file:  [testcode] ]\n                            NAME a$$inline_1 1 [source_file:  [testcode] ]\n                        RETURN 1 [source_file:  [testcode] ]\n                            TRUE 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            NAME x$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            FUNCTION x 1 [source_file: code]\n                NAME x 1 [source_file: code]\n                LP 1 [source_file: code]\n                BLOCK 1 [source_file: code]\n                    VAR 1 [source_file: code]\n                        NAME a 1 [source_file: code]\n                    RETURN 1 [source_file: code]\n                        TRUE 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME x 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME x$$inline_1 1 [source_file: code]\n                FUNCTION  1 [source_file: code]\n                    NAME  1 [source_file: code]\n                    LP 1 [source_file: code]\n                    BLOCK 1 [source_file: code]\n                        VAR 1 [source_file: code]\n                            NAME a$$inline_2 1 [source_file: code]\n                        RETURN 1 [source_file: code]\n                            TRUE 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            NAME x$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            VAR 1 [source_file:  [testcode] ]\n                NAME a$$inline_1 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                TRUE 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: code]\n    FUNCTION  1 [source_file: code]\n        NAME  1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            VAR 1 [source_file: code]\n                NAME a$$inline_2 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                TRUE 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInlineFunctionWithInnerFunction5(FunctionInjectorTest.java:1025)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function foo(){function x(){var a;return true}return x}var x$$inline_0=function(){var a$$inline_1;return true};x$$inline_0\nResult: function foo(){function x(){var a;return true}return x}var x$$inline_1=function(){var a$$inline_2;return true};x$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            FUNCTION x 1 [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n                LP 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n                    VAR 1 [source_file:  [testcode] ]\n                        NAME a 1 [source_file:  [testcode] ]\n                    RETURN 1 [source_file:  [testcode] ]\n                        TRUE 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME x$$inline_0 1 [source_file:  [testcode] ]\n                FUNCTION  1 [source_file:  [testcode] ]\n                    NAME  1 [source_file:  [testcode] ]\n                    LP 1 [source_file:  [testcode] ]\n                    BLOCK 1 [source_file:  [testcode] ]\n                        VAR 1 [source_file:  [testcode] ]\n                            NAME a$$inline_1 1 [source_file:  [testcode] ]\n                        RETURN 1 [source_file:  [testcode] ]\n                            TRUE 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            NAME x$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            FUNCTION x 1 [source_file: code]\n                NAME x 1 [source_file: code]\n                LP 1 [source_file: code]\n                BLOCK 1 [source_file: code]\n                    VAR 1 [source_file: code]\n                        NAME a 1 [source_file: code]\n                    RETURN 1 [source_file: code]\n                        TRUE 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME x 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME x$$inline_1 1 [source_file: code]\n                FUNCTION  1 [source_file: code]\n                    NAME  1 [source_file: code]\n                    LP 1 [source_file: code]\n                    BLOCK 1 [source_file: code]\n                        VAR 1 [source_file: code]\n                            NAME a$$inline_2 1 [source_file: code]\n                        RETURN 1 [source_file: code]\n                            TRUE 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            NAME x$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            VAR 1 [source_file:  [testcode] ]\n                NAME a$$inline_1 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                TRUE 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: code]\n    FUNCTION  1 [source_file: code]\n        NAME  1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            VAR 1 [source_file: code]\n                NAME a$$inline_2 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                TRUE 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInlineFunctionWithInnerFunction5(FunctionInjectorTest.java:1025)  helperInlineReferenceToFunction(        \"function foo(){function x() {var a; return true;} return x}; foo();\",        \"function foo(){function x(){var a;return true}return x};\" +            \"{var x$$inline_0 = function(){\" +            \"var a$$inline_1;return true};x$$inline_0}\",        \"foo\", INLINE_BLOCK);"
            },
            "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateWithParameters3": {
                "path": "test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java",
                "function_name": "testMutateWithParameters3",
                "src": "  public void testMutateWithParameters3() {\n    // Parameter has side-effects.\n    helperMutate(\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"{var a$$inline_0 = x++; a$$inline_0}\",\n        \"foo\", null);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=x++;a$$inline_0\nResult: var a$$inline_1=x++;a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_0 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_1 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NAME a$$inline_1 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$1.call(FunctionToBlockMutatorTest.java:240)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$TestCallback.visit(FunctionToBlockMutatorTest.java:279)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateWithParameters3(FunctionToBlockMutatorTest.java:112)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=x++;a$$inline_0\nResult: var a$$inline_1=x++;a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_0 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_1 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NAME a$$inline_1 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)  traverseBranch(body, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)  helperMutate(code, expectedResult, fnName, resultName, false, false);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateWithParameters3(FunctionToBlockMutatorTest.java:112)  helperMutate(        \"function foo(a){return a;}; \" +        \"function x() { foo(x++); }\",        \"{var a$$inline_0 = x++; a$$inline_0}\",        \"foo\", null);"
            },
            "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateCallInLoopVars1": {
                "path": "test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java",
                "function_name": "testMutateCallInLoopVars1",
                "src": "  public void testMutateCallInLoopVars1() {\n    // baseline: outside a loop, the constant remains constant.\n    boolean callInLoop = false;\n    helperMutate(\n        \"function foo(a){var B = bar(); a;}; foo(1);\",\n        \"{var B$$inline_1=bar(); 1;}\",\n        \"foo\", null, false, callInLoop);\n    // ... in a loop, the constant-ness is removed.\n    // TODO(johnlenz): update this test to look for the const annotation.\n    callInLoop = true;\n    helperMutate(\n        \"function foo(a){var B = bar(); a;}; foo(1);\",\n        \"{var B$$inline_1 = bar(); 1;}\",\n        \"foo\", null, false, callInLoop);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var B$$inline_1=bar();1\nResult: var B$$inline_3=bar();1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME B$$inline_1 1 [source_file:  [testcode] ]\n            CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                NAME bar 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME B$$inline_3 1 [source_file:  [testcode] ]\n            CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                NAME bar 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME B$$inline_1 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME B$$inline_3 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$1.call(FunctionToBlockMutatorTest.java:240)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$TestCallback.visit(FunctionToBlockMutatorTest.java:279)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateCallInLoopVars1(FunctionToBlockMutatorTest.java:151)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var B$$inline_1=bar();1\nResult: var B$$inline_3=bar();1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME B$$inline_1 1 [source_file:  [testcode] ]\n            CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                NAME bar 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME B$$inline_3 1 [source_file:  [testcode] ]\n            CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                NAME bar 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME B$$inline_1 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME B$$inline_3 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateCallInLoopVars1(FunctionToBlockMutatorTest.java:151)  helperMutate(        \"function foo(a){var B = bar(); a;}; foo(1);\",        \"{var B$$inline_1=bar(); 1;}\",        \"foo\", null, false, callInLoop);"
            },
            "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars1": {
                "path": "test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java",
                "function_name": "testMutateInitializeUninitializedVars1",
                "src": "  public void testMutateInitializeUninitializedVars1() {\n    helperMutate(\n        \"function foo(a){var b;return a;}; foo(1);\",\n        \"{var b$$inline_1=void 0;1}\",\n        \"foo\", null, false, true);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var b$$inline_1=void 0;1\nResult: var b$$inline_3=void 0;1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME b$$inline_1 1 [source_file:  [testcode] ]\n            VOID 1 [source_file:  [testcode] ]\n                NUMBER 0.0 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME b$$inline_3 1 [source_file:  [testcode] ]\n            VOID 1 [source_file:  [testcode] ]\n                NUMBER 0.0 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME b$$inline_1 1 [source_file:  [testcode] ]\n    VOID 1 [source_file:  [testcode] ]\n        NUMBER 0.0 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME b$$inline_3 1 [source_file:  [testcode] ]\n    VOID 1 [source_file:  [testcode] ]\n        NUMBER 0.0 1 [source_file:  [testcode] ]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$1.call(FunctionToBlockMutatorTest.java:240)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$TestCallback.visit(FunctionToBlockMutatorTest.java:279)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateInitializeUninitializedVars1(FunctionToBlockMutatorTest.java:129)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var b$$inline_1=void 0;1\nResult: var b$$inline_3=void 0;1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME b$$inline_1 1 [source_file:  [testcode] ]\n            VOID 1 [source_file:  [testcode] ]\n                NUMBER 0.0 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME b$$inline_3 1 [source_file:  [testcode] ]\n            VOID 1 [source_file:  [testcode] ]\n                NUMBER 0.0 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME b$$inline_1 1 [source_file:  [testcode] ]\n    VOID 1 [source_file:  [testcode] ]\n        NUMBER 0.0 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME b$$inline_3 1 [source_file:  [testcode] ]\n    VOID 1 [source_file:  [testcode] ]\n        NUMBER 0.0 1 [source_file:  [testcode] ]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateInitializeUninitializedVars1(FunctionToBlockMutatorTest.java:129)  helperMutate(        \"function foo(a){var b;return a;}; foo(1);\",        \"{var b$$inline_1=void 0;1}\",        \"foo\", null, false, true);"
            },
            "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars2": {
                "path": "test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java",
                "function_name": "testMutateInitializeUninitializedVars2",
                "src": "  public void testMutateInitializeUninitializedVars2() {\n    helperMutate(\n        \"function foo(a){for(var b in c)return a;}; foo(1);\",\n        \"{JSCompiler_inline_label_foo_2:\" +\n          \"{\" +\n            \"for(var b$$inline_1 in c){\" +\n                \"1;break JSCompiler_inline_label_foo_2\" +\n             \"}\" +\n          \"}\" +\n        \"}\",\n        \"foo\", null);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: JSCompiler_inline_label_foo_2:for(var b$$inline_1 in c){1;break JSCompiler_inline_label_foo_2}\nResult: JSCompiler_inline_label_foo_4:for(var b$$inline_3 in c){1;break JSCompiler_inline_label_foo_4}\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    LABEL 1 [source_file:  [testcode] ]\n        LABEL_NAME JSCompiler_inline_label_foo_2 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            FOR 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                NAME c 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n                    EXPR_RESULT 1 [source_file:  [testcode] ]\n                        NUMBER 1.0 1 [source_file:  [testcode] ]\n                    BREAK 1 [source_file:  [testcode] ]\n                        LABEL_NAME JSCompiler_inline_label_foo_2 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    LABEL 1 [source_file:  [testcode] ]\n        LABEL_NAME JSCompiler_inline_label_foo_4 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            FOR 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_3 1 [source_file:  [testcode] ]\n                NAME c 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n                    EXPR_RESULT 1 [source_file:  [testcode] ]\n                        NUMBER 1.0 1 [source_file:  [testcode] ]\n                    BREAK 1 [source_file:  [testcode] ]\n                        LABEL_NAME JSCompiler_inline_label_foo_4 1 [source_file:  [testcode] ]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_foo_2 1 [source_file:  [testcode] ]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_foo_4 1 [source_file:  [testcode] ]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$1.call(FunctionToBlockMutatorTest.java:240)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$TestCallback.visit(FunctionToBlockMutatorTest.java:279)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateInitializeUninitializedVars2(FunctionToBlockMutatorTest.java:136)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: JSCompiler_inline_label_foo_2:for(var b$$inline_1 in c){1;break JSCompiler_inline_label_foo_2}\nResult: JSCompiler_inline_label_foo_4:for(var b$$inline_3 in c){1;break JSCompiler_inline_label_foo_4}\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    LABEL 1 [source_file:  [testcode] ]\n        LABEL_NAME JSCompiler_inline_label_foo_2 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            FOR 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                NAME c 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n                    EXPR_RESULT 1 [source_file:  [testcode] ]\n                        NUMBER 1.0 1 [source_file:  [testcode] ]\n                    BREAK 1 [source_file:  [testcode] ]\n                        LABEL_NAME JSCompiler_inline_label_foo_2 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    LABEL 1 [source_file:  [testcode] ]\n        LABEL_NAME JSCompiler_inline_label_foo_4 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            FOR 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_3 1 [source_file:  [testcode] ]\n                NAME c 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n                    EXPR_RESULT 1 [source_file:  [testcode] ]\n                        NUMBER 1.0 1 [source_file:  [testcode] ]\n                    BREAK 1 [source_file:  [testcode] ]\n                        LABEL_NAME JSCompiler_inline_label_foo_4 1 [source_file:  [testcode] ]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_foo_2 1 [source_file:  [testcode] ]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_foo_4 1 [source_file:  [testcode] ]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)  helperMutate(code, expectedResult, fnName, resultName, false, false);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateInitializeUninitializedVars2(FunctionToBlockMutatorTest.java:136)  helperMutate(        \"function foo(a){for(var b in c)return a;}; foo(1);\",        \"{JSCompiler_inline_label_foo_2:\" +          \"{\" +            \"for(var b$$inline_1 in c){\" +                \"1;break JSCompiler_inline_label_foo_2\" +             \"}\" +          \"}\" +        \"}\",        \"foo\", null);"
            },
            "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateFunctionDefinition": {
                "path": "test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java",
                "function_name": "testMutateFunctionDefinition",
                "src": "  public void testMutateFunctionDefinition() {\n     // function declarations are rewritten as function\n     // expressions\n     helperMutate(\n        \"function foo(a){function g(){}}; foo(1);\",\n        \"{var g$$inline_1=function(){};}\",\n        \"foo\", null);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var g$$inline_1=function(){}\nResult: var g$$inline_3=function(){}\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME g$$inline_1 1 [source_file:  [testcode] ]\n            FUNCTION  1 [source_file:  [testcode] ]\n                NAME  1 [source_file:  [testcode] ]\n                LP 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME g$$inline_3 1 [source_file:  [testcode] ]\n            FUNCTION  1 [source_file:  [testcode] ]\n                NAME  1 [source_file:  [testcode] ]\n                LP 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME g$$inline_1 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME g$$inline_3 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$1.call(FunctionToBlockMutatorTest.java:240)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$TestCallback.visit(FunctionToBlockMutatorTest.java:279)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateFunctionDefinition(FunctionToBlockMutatorTest.java:167)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var g$$inline_1=function(){}\nResult: var g$$inline_3=function(){}\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME g$$inline_1 1 [source_file:  [testcode] ]\n            FUNCTION  1 [source_file:  [testcode] ]\n                NAME  1 [source_file:  [testcode] ]\n                LP 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME g$$inline_3 1 [source_file:  [testcode] ]\n            FUNCTION  1 [source_file:  [testcode] ]\n                NAME  1 [source_file:  [testcode] ]\n                LP 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME g$$inline_1 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME g$$inline_3 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)  helperMutate(code, expectedResult, fnName, resultName, false, false);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateFunctionDefinition(FunctionToBlockMutatorTest.java:167)  helperMutate(        \"function foo(a){function g(){}}; foo(1);\",        \"{var g$$inline_1=function(){};}\",        \"foo\", null);"
            },
            "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutate8": {
                "path": "test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java",
                "function_name": "testMutate8",
                "src": "  public void testMutate8() {\n    // Parameter has side-effects.\n    helperMutate(\n        \"function foo(a){return a+a;}; foo(x++);\",\n        \"{var a$$inline_0 = x++;\" +\n            \"a$$inline_0 + a$$inline_0;}\",\n        \"foo\", null);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=x++;a$$inline_0+a$$inline_0\nResult: var a$$inline_1=x++;a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_0 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        ADD 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_1 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        ADD 1 [source_file:  [testcode] ]\n            NAME a$$inline_1 1 [source_file:  [testcode] ]\n            NAME a$$inline_1 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$1.call(FunctionToBlockMutatorTest.java:240)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$TestCallback.visit(FunctionToBlockMutatorTest.java:279)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutate8(FunctionToBlockMutatorTest.java:121)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=x++;a$$inline_0+a$$inline_0\nResult: var a$$inline_1=x++;a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_0 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        ADD 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_1 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        ADD 1 [source_file:  [testcode] ]\n            NAME a$$inline_1 1 [source_file:  [testcode] ]\n            NAME a$$inline_1 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)  helperMutate(code, expectedResult, fnName, resultName, false, false);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutate8(FunctionToBlockMutatorTest.java:121)  helperMutate(        \"function foo(a){return a+a;}; foo(x++);\",        \"{var a$$inline_0 = x++;\" +            \"a$$inline_0 + a$$inline_0;}\",        \"foo\", null);"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testLoopWithFunctionWithFunction": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testLoopWithFunctionWithFunction",
                "src": "  public void testLoopWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariableInLoop_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"    var arr = [1, 2, 3, 4, 5];\\n\" +\n        \"    for (var i = 0, l = arr.length; i < l; i++) {\\n\" +\n        \"      var j = arr[i];\\n\" +\n        // don't inline this function, because the correct behavior depends\n        // captured values.\n        \"      (function() {\\n\" +\n        \"        var k = j;\\n\" +\n        \"        setTimeout(function() { result += k; }, 5 * i);\\n\" +\n        \"      })();\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariableInLoop_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\" +\n        \"  var arr$$inline_0=[1,2,3,4,5];\\n\" +\n        \"  var i$$inline_1=0;\\n\" +\n        \"  var l$$inline_2=arr$$inline_0.length;\\n\" +\n        \"  for(;i$$inline_1<l$$inline_2;i$$inline_1++){\\n\" +\n        \"    var j$$inline_3=arr$$inline_0[i$$inline_1];\\n\" +\n        \"    (function(){\\n\" +\n        \"       var k$$inline_4=j$$inline_3;\\n\" +\n        \"       setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)\\n\" +\n        \"     })()\\n\" +\n        \"  }\\n\" +\n        \"  }\\n\" +\n        \"}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function _testLocalVariableInLoop_(){var result=0;var arr$$inline_0=[1,2,3,4,5];var i$$inline_1=0;var l$$inline_2=arr$$inline_0.length;for(;i$$inline_1<l$$inline_2;i$$inline_1++){var j$$inline_3=arr$$inline_0[i$$inline_1];(function(){var k$$inline_4=j$$inline_3;setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)})()}}\nResult: function _testLocalVariableInLoop_(){var result=0;var arr$$inline_4=[1,2,3,4,5];var i$$inline_5=0;var l$$inline_6=arr$$inline_4.length;for(;i$$inline_5<l$$inline_6;i$$inline_5++){var j$$inline_7=arr$$inline_4[i$$inline_5];(function(){var k$$inline_8=j$$inline_7;setTimeout(function(){result+=k$$inline_8},5*i$$inline_5)})()}}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _testLocalVariableInLoop_ 1 [source_file: expected0]\n            NAME _testLocalVariableInLoop_ 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME result 2 [source_file: expected0]\n                        NUMBER 0.0 2 [source_file: expected0]\n                BLOCK 3 [source_file: expected0]\n                    VAR 3 [source_file: expected0]\n                        NAME arr$$inline_0 3 [source_file: expected0]\n                            ARRAYLIT 3 [source_file: expected0]\n                                NUMBER 1.0 3 [source_file: expected0]\n                                NUMBER 2.0 3 [source_file: expected0]\n                                NUMBER 3.0 3 [source_file: expected0]\n                                NUMBER 4.0 3 [source_file: expected0]\n                                NUMBER 5.0 3 [source_file: expected0]\n                    VAR 4 [source_file: expected0]\n                        NAME i$$inline_1 4 [source_file: expected0]\n                            NUMBER 0.0 4 [source_file: expected0]\n                    VAR 5 [source_file: expected0]\n                        NAME l$$inline_2 5 [source_file: expected0]\n                            GETPROP 5 [source_file: expected0]\n                                NAME arr$$inline_0 5 [source_file: expected0]\n                                STRING length 5 [source_file: expected0]\n                    FOR 6 [source_file: expected0]\n                        EMPTY 6 [source_file: expected0]\n                        LT 6 [source_file: expected0]\n                            NAME i$$inline_1 6 [source_file: expected0]\n                            NAME l$$inline_2 6 [source_file: expected0]\n                        INC 6 [incrdecr: 1] [source_file: expected0]\n                            NAME i$$inline_1 6 [source_file: expected0]\n                        BLOCK 6 [source_file: expected0]\n                            VAR 7 [source_file: expected0]\n                                NAME j$$inline_3 7 [source_file: expected0]\n                                    GETELEM 7 [source_file: expected0]\n                                        NAME arr$$inline_0 7 [source_file: expected0]\n                                        NAME i$$inline_1 7 [source_file: expected0]\n                            EXPR_RESULT 8 [source_file: expected0]\n                                CALL 11 [free_call: 1] [source_file: expected0]\n                                    FUNCTION  8 [parenthesized: true] [source_file: expected0]\n                                        NAME  8 [source_file: expected0]\n                                        LP 8 [source_file: expected0]\n                                        BLOCK 8 [source_file: expected0]\n                                            VAR 9 [source_file: expected0]\n                                                NAME k$$inline_4 9 [source_file: expected0]\n                                                    NAME j$$inline_3 9 [source_file: expected0]\n                                            EXPR_RESULT 10 [source_file: expected0]\n                                                CALL 10 [free_call: 1] [source_file: expected0]\n                                                    NAME setTimeout 10 [source_file: expected0]\n                                                    FUNCTION  10 [source_file: expected0]\n                                                        NAME  10 [source_file: expected0]\n                                                        LP 10 [source_file: expected0]\n                                                        BLOCK 10 [source_file: expected0]\n                                                            EXPR_RESULT 10 [source_file: expected0]\n                                                                ASSIGN_ADD 10 [source_file: expected0]\n                                                                    NAME result 10 [source_file: expected0]\n                                                                    NAME k$$inline_4 10 [source_file: expected0]\n                                                    MUL 10 [source_file: expected0]\n                                                        NUMBER 5.0 10 [source_file: expected0]\n                                                        NAME i$$inline_1 10 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _testLocalVariableInLoop_ 1 [source_file: testcode]\n            NAME _testLocalVariableInLoop_ 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 2 [source_file: testcode]\n                    NAME result 2 [source_file: testcode]\n                        NUMBER 0.0 2 [source_file: testcode]\n                BLOCK 3 [source_file: testcode]\n                    VAR 4 [source_file: testcode]\n                        NAME arr$$inline_4 4 [source_file: testcode]\n                            ARRAYLIT 4 [source_file: testcode]\n                                NUMBER 1.0 4 [source_file: testcode]\n                                NUMBER 2.0 4 [source_file: testcode]\n                                NUMBER 3.0 4 [source_file: testcode]\n                                NUMBER 4.0 4 [source_file: testcode]\n                                NUMBER 5.0 4 [source_file: testcode]\n                    VAR 3\n                        NAME i$$inline_5 5 [source_file: testcode]\n                            NUMBER 0.0 5 [source_file: testcode]\n                    VAR 5 [source_file: testcode]\n                        NAME l$$inline_6 5 [source_file: testcode]\n                            GETPROP 5 [source_file: testcode]\n                                NAME arr$$inline_4 5 [source_file: testcode]\n                                STRING length 5 [source_file: testcode]\n                    FOR 5 [source_file: testcode]\n                        EMPTY 5 [source_file: testcode]\n                        LT 5 [source_file: testcode]\n                            NAME i$$inline_5 5 [source_file: testcode]\n                            NAME l$$inline_6 5 [source_file: testcode]\n                        INC 5 [incrdecr: 1] [source_file: testcode]\n                            NAME i$$inline_5 5 [source_file: testcode]\n                        BLOCK 5 [source_file: testcode]\n                            VAR 6 [source_file: testcode]\n                                NAME j$$inline_7 6 [source_file: testcode]\n                                    GETELEM 6 [source_file: testcode]\n                                        NAME arr$$inline_4 6 [source_file: testcode]\n                                        NAME i$$inline_5 6 [source_file: testcode]\n                            EXPR_RESULT 7 [source_file: testcode]\n                                CALL 10 [free_call: 1] [source_file: testcode]\n                                    FUNCTION  7 [parenthesized: true] [source_file: testcode]\n                                        NAME  7 [source_file: testcode]\n                                        LP 7 [source_file: testcode]\n                                        BLOCK 7 [source_file: testcode]\n                                            VAR 8 [source_file: testcode]\n                                                NAME k$$inline_8 8 [source_file: testcode]\n                                                    NAME j$$inline_7 8 [source_file: testcode]\n                                            EXPR_RESULT 9 [source_file: testcode]\n                                                CALL 9 [free_call: 1] [source_file: testcode]\n                                                    NAME setTimeout 9 [source_file: testcode]\n                                                    FUNCTION  9 [source_file: testcode]\n                                                        NAME  9 [source_file: testcode]\n                                                        LP 9 [source_file: testcode]\n                                                        BLOCK 9 [source_file: testcode]\n                                                            EXPR_RESULT 9 [source_file: testcode]\n                                                                ASSIGN_ADD 9 [source_file: testcode]\n                                                                    NAME result 9 [source_file: testcode]\n                                                                    NAME k$$inline_8 9 [source_file: testcode]\n                                                    MUL 9 [source_file: testcode]\n                                                        NUMBER 5.0 9 [source_file: testcode]\n                                                        NAME i$$inline_5 9 [source_file: testcode]\n\n\nSubtree1: NAME arr$$inline_0 3 [source_file: expected0]\n    ARRAYLIT 3 [source_file: expected0]\n        NUMBER 1.0 3 [source_file: expected0]\n        NUMBER 2.0 3 [source_file: expected0]\n        NUMBER 3.0 3 [source_file: expected0]\n        NUMBER 4.0 3 [source_file: expected0]\n        NUMBER 5.0 3 [source_file: expected0]\n\n\nSubtree2: NAME arr$$inline_4 4 [source_file: testcode]\n    ARRAYLIT 4 [source_file: testcode]\n        NUMBER 1.0 4 [source_file: testcode]\n        NUMBER 2.0 4 [source_file: testcode]\n        NUMBER 3.0 4 [source_file: testcode]\n        NUMBER 4.0 4 [source_file: testcode]\n        NUMBER 5.0 4 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testLoopWithFunctionWithFunction(InlineFunctionsTest.java:2201)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function _testLocalVariableInLoop_(){var result=0;var arr$$inline_0=[1,2,3,4,5];var i$$inline_1=0;var l$$inline_2=arr$$inline_0.length;for(;i$$inline_1<l$$inline_2;i$$inline_1++){var j$$inline_3=arr$$inline_0[i$$inline_1];(function(){var k$$inline_4=j$$inline_3;setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)})()}}\nResult: function _testLocalVariableInLoop_(){var result=0;var arr$$inline_4=[1,2,3,4,5];var i$$inline_5=0;var l$$inline_6=arr$$inline_4.length;for(;i$$inline_5<l$$inline_6;i$$inline_5++){var j$$inline_7=arr$$inline_4[i$$inline_5];(function(){var k$$inline_8=j$$inline_7;setTimeout(function(){result+=k$$inline_8},5*i$$inline_5)})()}}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _testLocalVariableInLoop_ 1 [source_file: expected0]\n            NAME _testLocalVariableInLoop_ 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME result 2 [source_file: expected0]\n                        NUMBER 0.0 2 [source_file: expected0]\n                BLOCK 3 [source_file: expected0]\n                    VAR 3 [source_file: expected0]\n                        NAME arr$$inline_0 3 [source_file: expected0]\n                            ARRAYLIT 3 [source_file: expected0]\n                                NUMBER 1.0 3 [source_file: expected0]\n                                NUMBER 2.0 3 [source_file: expected0]\n                                NUMBER 3.0 3 [source_file: expected0]\n                                NUMBER 4.0 3 [source_file: expected0]\n                                NUMBER 5.0 3 [source_file: expected0]\n                    VAR 4 [source_file: expected0]\n                        NAME i$$inline_1 4 [source_file: expected0]\n                            NUMBER 0.0 4 [source_file: expected0]\n                    VAR 5 [source_file: expected0]\n                        NAME l$$inline_2 5 [source_file: expected0]\n                            GETPROP 5 [source_file: expected0]\n                                NAME arr$$inline_0 5 [source_file: expected0]\n                                STRING length 5 [source_file: expected0]\n                    FOR 6 [source_file: expected0]\n                        EMPTY 6 [source_file: expected0]\n                        LT 6 [source_file: expected0]\n                            NAME i$$inline_1 6 [source_file: expected0]\n                            NAME l$$inline_2 6 [source_file: expected0]\n                        INC 6 [incrdecr: 1] [source_file: expected0]\n                            NAME i$$inline_1 6 [source_file: expected0]\n                        BLOCK 6 [source_file: expected0]\n                            VAR 7 [source_file: expected0]\n                                NAME j$$inline_3 7 [source_file: expected0]\n                                    GETELEM 7 [source_file: expected0]\n                                        NAME arr$$inline_0 7 [source_file: expected0]\n                                        NAME i$$inline_1 7 [source_file: expected0]\n                            EXPR_RESULT 8 [source_file: expected0]\n                                CALL 11 [free_call: 1] [source_file: expected0]\n                                    FUNCTION  8 [parenthesized: true] [source_file: expected0]\n                                        NAME  8 [source_file: expected0]\n                                        LP 8 [source_file: expected0]\n                                        BLOCK 8 [source_file: expected0]\n                                            VAR 9 [source_file: expected0]\n                                                NAME k$$inline_4 9 [source_file: expected0]\n                                                    NAME j$$inline_3 9 [source_file: expected0]\n                                            EXPR_RESULT 10 [source_file: expected0]\n                                                CALL 10 [free_call: 1] [source_file: expected0]\n                                                    NAME setTimeout 10 [source_file: expected0]\n                                                    FUNCTION  10 [source_file: expected0]\n                                                        NAME  10 [source_file: expected0]\n                                                        LP 10 [source_file: expected0]\n                                                        BLOCK 10 [source_file: expected0]\n                                                            EXPR_RESULT 10 [source_file: expected0]\n                                                                ASSIGN_ADD 10 [source_file: expected0]\n                                                                    NAME result 10 [source_file: expected0]\n                                                                    NAME k$$inline_4 10 [source_file: expected0]\n                                                    MUL 10 [source_file: expected0]\n                                                        NUMBER 5.0 10 [source_file: expected0]\n                                                        NAME i$$inline_1 10 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _testLocalVariableInLoop_ 1 [source_file: testcode]\n            NAME _testLocalVariableInLoop_ 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 2 [source_file: testcode]\n                    NAME result 2 [source_file: testcode]\n                        NUMBER 0.0 2 [source_file: testcode]\n                BLOCK 3 [source_file: testcode]\n                    VAR 4 [source_file: testcode]\n                        NAME arr$$inline_4 4 [source_file: testcode]\n                            ARRAYLIT 4 [source_file: testcode]\n                                NUMBER 1.0 4 [source_file: testcode]\n                                NUMBER 2.0 4 [source_file: testcode]\n                                NUMBER 3.0 4 [source_file: testcode]\n                                NUMBER 4.0 4 [source_file: testcode]\n                                NUMBER 5.0 4 [source_file: testcode]\n                    VAR 3\n                        NAME i$$inline_5 5 [source_file: testcode]\n                            NUMBER 0.0 5 [source_file: testcode]\n                    VAR 5 [source_file: testcode]\n                        NAME l$$inline_6 5 [source_file: testcode]\n                            GETPROP 5 [source_file: testcode]\n                                NAME arr$$inline_4 5 [source_file: testcode]\n                                STRING length 5 [source_file: testcode]\n                    FOR 5 [source_file: testcode]\n                        EMPTY 5 [source_file: testcode]\n                        LT 5 [source_file: testcode]\n                            NAME i$$inline_5 5 [source_file: testcode]\n                            NAME l$$inline_6 5 [source_file: testcode]\n                        INC 5 [incrdecr: 1] [source_file: testcode]\n                            NAME i$$inline_5 5 [source_file: testcode]\n                        BLOCK 5 [source_file: testcode]\n                            VAR 6 [source_file: testcode]\n                                NAME j$$inline_7 6 [source_file: testcode]\n                                    GETELEM 6 [source_file: testcode]\n                                        NAME arr$$inline_4 6 [source_file: testcode]\n                                        NAME i$$inline_5 6 [source_file: testcode]\n                            EXPR_RESULT 7 [source_file: testcode]\n                                CALL 10 [free_call: 1] [source_file: testcode]\n                                    FUNCTION  7 [parenthesized: true] [source_file: testcode]\n                                        NAME  7 [source_file: testcode]\n                                        LP 7 [source_file: testcode]\n                                        BLOCK 7 [source_file: testcode]\n                                            VAR 8 [source_file: testcode]\n                                                NAME k$$inline_8 8 [source_file: testcode]\n                                                    NAME j$$inline_7 8 [source_file: testcode]\n                                            EXPR_RESULT 9 [source_file: testcode]\n                                                CALL 9 [free_call: 1] [source_file: testcode]\n                                                    NAME setTimeout 9 [source_file: testcode]\n                                                    FUNCTION  9 [source_file: testcode]\n                                                        NAME  9 [source_file: testcode]\n                                                        LP 9 [source_file: testcode]\n                                                        BLOCK 9 [source_file: testcode]\n                                                            EXPR_RESULT 9 [source_file: testcode]\n                                                                ASSIGN_ADD 9 [source_file: testcode]\n                                                                    NAME result 9 [source_file: testcode]\n                                                                    NAME k$$inline_8 9 [source_file: testcode]\n                                                    MUL 9 [source_file: testcode]\n                                                        NUMBER 5.0 9 [source_file: testcode]\n                                                        NAME i$$inline_5 9 [source_file: testcode]\n\n\nSubtree1: NAME arr$$inline_0 3 [source_file: expected0]\n    ARRAYLIT 3 [source_file: expected0]\n        NUMBER 1.0 3 [source_file: expected0]\n        NUMBER 2.0 3 [source_file: expected0]\n        NUMBER 3.0 3 [source_file: expected0]\n        NUMBER 4.0 3 [source_file: expected0]\n        NUMBER 5.0 3 [source_file: expected0]\n\n\nSubtree2: NAME arr$$inline_4 4 [source_file: testcode]\n    ARRAYLIT 4 [source_file: testcode]\n        NUMBER 1.0 4 [source_file: testcode]\n        NUMBER 2.0 4 [source_file: testcode]\n        NUMBER 3.0 4 [source_file: testcode]\n        NUMBER 4.0 4 [source_file: testcode]\n        NUMBER 5.0 4 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testLoopWithFunctionWithFunction(InlineFunctionsTest.java:2201)  test(\"function _testLocalVariableInLoop_() {\\n\" +        \"  var result = 0;\\n\" +        \"  function foo() {\\n\" +        \"    var arr = [1, 2, 3, 4, 5];\\n\" +        \"    for (var i = 0, l = arr.length; i < l; i++) {\\n\" +        \"      var j = arr[i];\\n\" +        // don't inline this function, because the correct behavior depends        // captured values.        \"      (function() {\\n\" +        \"        var k = j;\\n\" +        \"        setTimeout(function() { result += k; }, 5 * i);\\n\" +        \"      })();\\n\" +        \"    }\\n\" +        \"  }\\n\" +        \"  foo();\\n\" +        \"}\",        \"function _testLocalVariableInLoop_(){\\n\" +        \"  var result=0;\\n\" +        \"  {\" +        \"  var arr$$inline_0=[1,2,3,4,5];\\n\" +        \"  var i$$inline_1=0;\\n\" +        \"  var l$$inline_2=arr$$inline_0.length;\\n\" +        \"  for(;i$$inline_1<l$$inline_2;i$$inline_1++){\\n\" +        \"    var j$$inline_3=arr$$inline_0[i$$inline_1];\\n\" +        \"    (function(){\\n\" +        \"       var k$$inline_4=j$$inline_3;\\n\" +        \"       setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)\\n\" +        \"     })()\\n\" +        \"  }\\n\" +        \"  }\\n\" +        \"}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables16": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testShadowVariables16",
                "src": "  public void testShadowVariables16() {\n    assumeMinimumCapture = false;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a=3;var a$$inline_0=5;a\nResult: var a=3;var a$$inline_1=5;a\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 3.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 5.0 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 3.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 5.0 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 5.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 5.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables16(InlineFunctionsTest.java:845)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a=3;var a$$inline_0=5;a\nResult: var a=3;var a$$inline_1=5;a\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 3.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 5.0 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 3.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 5.0 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 5.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 5.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables16(InlineFunctionsTest.java:845)  test(\"var a=3;\" +         \"function foo(){return a}\" +         \"(function(){var a=5;(function(){foo()})()})()\",         \"var a=3;\" +         \"{var a$$inline_0=5;{a}}\"         );"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables18": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testShadowVariables18",
                "src": "  public void testShadowVariables18() {\n    test(\"var a=0;\" +\n        \"function bar(){return a+a}\" +\n        \"function foo(){var a=3;return bar()}\" +\n        \"function _goo(){var a=2;var x=foo();}\",\n\n        \"var a=0;\" +\n        \"function _goo(){var a$$2=2;var x;\" +\n        \"{var a$$inline_0=3;x=a+a}}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a=0;function _goo(){var a$$2=2;var x;var a$$inline_0=3;x=a+a}\nResult: var a=0;function _goo(){var a$$2=2;var x;var a$$inline_1=3;x=a+a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION _goo 1 [source_file: expected0]\n            NAME _goo 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a$$2 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME x 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                            NUMBER 3.0 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME x 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NAME a 1 [source_file: expected0]\n                                NAME a 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        FUNCTION _goo 1 [source_file: testcode]\n            NAME _goo 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a$$2 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME x 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                            NUMBER 3.0 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME x 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NAME a 1 [source_file: testcode]\n                                NAME a 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 3.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 3.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables18(InlineFunctionsTest.java:874)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a=0;function _goo(){var a$$2=2;var x;var a$$inline_0=3;x=a+a}\nResult: var a=0;function _goo(){var a$$2=2;var x;var a$$inline_1=3;x=a+a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION _goo 1 [source_file: expected0]\n            NAME _goo 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a$$2 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME x 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                            NUMBER 3.0 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME x 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NAME a 1 [source_file: expected0]\n                                NAME a 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        FUNCTION _goo 1 [source_file: testcode]\n            NAME _goo 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a$$2 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME x 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                            NUMBER 3.0 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME x 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NAME a 1 [source_file: testcode]\n                                NAME a 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 3.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 3.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables18(InlineFunctionsTest.java:874)  test(\"var a=0;\" +        \"function bar(){return a+a}\" +        \"function foo(){var a=3;return bar()}\" +        \"function _goo(){var a=2;var x=foo();}\",        \"var a=0;\" +        \"function _goo(){var a$$2=2;var x;\" +        \"{var a$$inline_0=3;x=a+a}}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining11": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testCostBasedInlining11",
                "src": "  public void testCostBasedInlining11() {\n    // With block inlining\n    test(\"function f(a){return a + a;}\" +\n         \"var a = f(f(1))\",\n         \"var a;\" +\n         \"{var a$$inline_0=1+1;\" +\n         \"a=a$$inline_0+a$$inline_0}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a;var a$$inline_0=1+1;a=a$$inline_0+a$$inline_0\nResult: var a;var a$$inline_1=1+1;a=a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining11(InlineFunctionsTest.java:996)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a;var a$$inline_0=1+1;a=a$$inline_0+a$$inline_0\nResult: var a;var a$$inline_1=1+1;a=a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining11(InlineFunctionsTest.java:996)  test(\"function f(a){return a + a;}\" +         \"var a = f(f(1))\",         \"var a;\" +         \"{var a$$inline_0=1+1;\" +         \"a=a$$inline_0+a$$inline_0}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testMixedModeInliningCosting3",
                "src": "  public void testMixedModeInliningCosting3() {\n    // Do inline here because the function definition can be eliminated.\n    test(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+10}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3,x())\",\n\n        \"1+2+1+2+4+5+6+7+8+9+1+2+3+10;\" +\n        \"{var JSCompiler_inline_anon_param_2=x();\" +\n        \"2+3+2+3+4+5+6+7+8+9+1+2+3+10}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: 1+2+1+2+4+5+6+7+8+9+1+2+3+10;var JSCompiler_inline_anon_param_2=x();2+3+2+3+4+5+6+7+8+9+1+2+3+10\nResult: 1+2+1+2+4+5+6+7+8+9+1+2+3+10;var JSCompiler_inline_anon_param_4=x();2+3+2+3+4+5+6+7+8+9+1+2+3+10\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ADD 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                ADD 1 [source_file: expected0]\n                                    ADD 1 [source_file: expected0]\n                                        ADD 1 [source_file: expected0]\n                                            ADD 1 [source_file: expected0]\n                                                ADD 1 [source_file: expected0]\n                                                    ADD 1 [source_file: expected0]\n                                                        ADD 1 [source_file: expected0]\n                                                            ADD 1 [source_file: expected0]\n                                                                NUMBER 1.0 1 [source_file: expected0]\n                                                                NUMBER 2.0 1 [source_file: expected0]\n                                                            NUMBER 1.0 1 [source_file: expected0]\n                                                        NUMBER 2.0 1 [source_file: expected0]\n                                                    NUMBER 4.0 1 [source_file: expected0]\n                                                NUMBER 5.0 1 [source_file: expected0]\n                                            NUMBER 6.0 1 [source_file: expected0]\n                                        NUMBER 7.0 1 [source_file: expected0]\n                                    NUMBER 8.0 1 [source_file: expected0]\n                                NUMBER 9.0 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 3.0 1 [source_file: expected0]\n                NUMBER 10.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME JSCompiler_inline_anon_param_2 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME x 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                ADD 1 [source_file: expected0]\n                                    ADD 1 [source_file: expected0]\n                                        ADD 1 [source_file: expected0]\n                                            ADD 1 [source_file: expected0]\n                                                ADD 1 [source_file: expected0]\n                                                    ADD 1 [source_file: expected0]\n                                                        ADD 1 [source_file: expected0]\n                                                            ADD 1 [source_file: expected0]\n                                                                ADD 1 [source_file: expected0]\n                                                                    NUMBER 2.0 1 [source_file: expected0]\n                                                                    NUMBER 3.0 1 [source_file: expected0]\n                                                                NUMBER 2.0 1 [source_file: expected0]\n                                                            NUMBER 3.0 1 [source_file: expected0]\n                                                        NUMBER 4.0 1 [source_file: expected0]\n                                                    NUMBER 5.0 1 [source_file: expected0]\n                                                NUMBER 6.0 1 [source_file: expected0]\n                                            NUMBER 7.0 1 [source_file: expected0]\n                                        NUMBER 8.0 1 [source_file: expected0]\n                                    NUMBER 9.0 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        NUMBER 3.0 1 [source_file: expected0]\n                    NUMBER 10.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        EXPR_RESULT 1 [source_file: testcode]\n            ADD 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    ADD 1 [source_file: testcode]\n                                        ADD 1 [source_file: testcode]\n                                            ADD 1 [source_file: testcode]\n                                                ADD 1 [source_file: testcode]\n                                                    ADD 1 [source_file: testcode]\n                                                        ADD 1 [source_file: testcode]\n                                                            ADD 1 [source_file: testcode]\n                                                                NUMBER 1.0 1 [source_file: testcode]\n                                                                NUMBER 2.0 1 [source_file: testcode]\n                                                            NUMBER 1.0 1 [source_file: testcode]\n                                                        NUMBER 2.0 1 [source_file: testcode]\n                                                    NUMBER 4.0 1 [source_file: testcode]\n                                                NUMBER 5.0 1 [source_file: testcode]\n                                            NUMBER 6.0 1 [source_file: testcode]\n                                        NUMBER 7.0 1 [source_file: testcode]\n                                    NUMBER 8.0 1 [source_file: testcode]\n                                NUMBER 9.0 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 3.0 1 [source_file: testcode]\n                NUMBER 10.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME JSCompiler_inline_anon_param_4 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME x 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    ADD 1 [source_file: testcode]\n                                        ADD 1 [source_file: testcode]\n                                            ADD 1 [source_file: testcode]\n                                                ADD 1 [source_file: testcode]\n                                                    ADD 1 [source_file: testcode]\n                                                        ADD 1 [source_file: testcode]\n                                                            ADD 1 [source_file: testcode]\n                                                                ADD 1 [source_file: testcode]\n                                                                    NUMBER 2.0 1 [source_file: testcode]\n                                                                    NUMBER 3.0 1 [source_file: testcode]\n                                                                NUMBER 2.0 1 [source_file: testcode]\n                                                            NUMBER 3.0 1 [source_file: testcode]\n                                                        NUMBER 4.0 1 [source_file: testcode]\n                                                    NUMBER 5.0 1 [source_file: testcode]\n                                                NUMBER 6.0 1 [source_file: testcode]\n                                            NUMBER 7.0 1 [source_file: testcode]\n                                        NUMBER 8.0 1 [source_file: testcode]\n                                    NUMBER 9.0 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                        NUMBER 3.0 1 [source_file: testcode]\n                    NUMBER 10.0 1 [source_file: testcode]\n\n\nSubtree1: NAME JSCompiler_inline_anon_param_2 1 [source_file: expected0]\n    CALL 1 [free_call: 1] [source_file: expected0]\n        NAME x 1 [source_file: expected0]\n\n\nSubtree2: NAME JSCompiler_inline_anon_param_4 1 [source_file: testcode]\n    CALL 1 [free_call: 1] [source_file: testcode]\n        NAME x 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInliningCosting3(InlineFunctionsTest.java:529)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: 1+2+1+2+4+5+6+7+8+9+1+2+3+10;var JSCompiler_inline_anon_param_2=x();2+3+2+3+4+5+6+7+8+9+1+2+3+10\nResult: 1+2+1+2+4+5+6+7+8+9+1+2+3+10;var JSCompiler_inline_anon_param_4=x();2+3+2+3+4+5+6+7+8+9+1+2+3+10\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ADD 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                ADD 1 [source_file: expected0]\n                                    ADD 1 [source_file: expected0]\n                                        ADD 1 [source_file: expected0]\n                                            ADD 1 [source_file: expected0]\n                                                ADD 1 [source_file: expected0]\n                                                    ADD 1 [source_file: expected0]\n                                                        ADD 1 [source_file: expected0]\n                                                            ADD 1 [source_file: expected0]\n                                                                NUMBER 1.0 1 [source_file: expected0]\n                                                                NUMBER 2.0 1 [source_file: expected0]\n                                                            NUMBER 1.0 1 [source_file: expected0]\n                                                        NUMBER 2.0 1 [source_file: expected0]\n                                                    NUMBER 4.0 1 [source_file: expected0]\n                                                NUMBER 5.0 1 [source_file: expected0]\n                                            NUMBER 6.0 1 [source_file: expected0]\n                                        NUMBER 7.0 1 [source_file: expected0]\n                                    NUMBER 8.0 1 [source_file: expected0]\n                                NUMBER 9.0 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 3.0 1 [source_file: expected0]\n                NUMBER 10.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME JSCompiler_inline_anon_param_2 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME x 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                ADD 1 [source_file: expected0]\n                                    ADD 1 [source_file: expected0]\n                                        ADD 1 [source_file: expected0]\n                                            ADD 1 [source_file: expected0]\n                                                ADD 1 [source_file: expected0]\n                                                    ADD 1 [source_file: expected0]\n                                                        ADD 1 [source_file: expected0]\n                                                            ADD 1 [source_file: expected0]\n                                                                ADD 1 [source_file: expected0]\n                                                                    NUMBER 2.0 1 [source_file: expected0]\n                                                                    NUMBER 3.0 1 [source_file: expected0]\n                                                                NUMBER 2.0 1 [source_file: expected0]\n                                                            NUMBER 3.0 1 [source_file: expected0]\n                                                        NUMBER 4.0 1 [source_file: expected0]\n                                                    NUMBER 5.0 1 [source_file: expected0]\n                                                NUMBER 6.0 1 [source_file: expected0]\n                                            NUMBER 7.0 1 [source_file: expected0]\n                                        NUMBER 8.0 1 [source_file: expected0]\n                                    NUMBER 9.0 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        NUMBER 3.0 1 [source_file: expected0]\n                    NUMBER 10.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        EXPR_RESULT 1 [source_file: testcode]\n            ADD 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    ADD 1 [source_file: testcode]\n                                        ADD 1 [source_file: testcode]\n                                            ADD 1 [source_file: testcode]\n                                                ADD 1 [source_file: testcode]\n                                                    ADD 1 [source_file: testcode]\n                                                        ADD 1 [source_file: testcode]\n                                                            ADD 1 [source_file: testcode]\n                                                                NUMBER 1.0 1 [source_file: testcode]\n                                                                NUMBER 2.0 1 [source_file: testcode]\n                                                            NUMBER 1.0 1 [source_file: testcode]\n                                                        NUMBER 2.0 1 [source_file: testcode]\n                                                    NUMBER 4.0 1 [source_file: testcode]\n                                                NUMBER 5.0 1 [source_file: testcode]\n                                            NUMBER 6.0 1 [source_file: testcode]\n                                        NUMBER 7.0 1 [source_file: testcode]\n                                    NUMBER 8.0 1 [source_file: testcode]\n                                NUMBER 9.0 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 3.0 1 [source_file: testcode]\n                NUMBER 10.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME JSCompiler_inline_anon_param_4 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME x 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    ADD 1 [source_file: testcode]\n                                        ADD 1 [source_file: testcode]\n                                            ADD 1 [source_file: testcode]\n                                                ADD 1 [source_file: testcode]\n                                                    ADD 1 [source_file: testcode]\n                                                        ADD 1 [source_file: testcode]\n                                                            ADD 1 [source_file: testcode]\n                                                                ADD 1 [source_file: testcode]\n                                                                    NUMBER 2.0 1 [source_file: testcode]\n                                                                    NUMBER 3.0 1 [source_file: testcode]\n                                                                NUMBER 2.0 1 [source_file: testcode]\n                                                            NUMBER 3.0 1 [source_file: testcode]\n                                                        NUMBER 4.0 1 [source_file: testcode]\n                                                    NUMBER 5.0 1 [source_file: testcode]\n                                                NUMBER 6.0 1 [source_file: testcode]\n                                            NUMBER 7.0 1 [source_file: testcode]\n                                        NUMBER 8.0 1 [source_file: testcode]\n                                    NUMBER 9.0 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                        NUMBER 3.0 1 [source_file: testcode]\n                    NUMBER 10.0 1 [source_file: testcode]\n\n\nSubtree1: NAME JSCompiler_inline_anon_param_2 1 [source_file: expected0]\n    CALL 1 [free_call: 1] [source_file: expected0]\n        NAME x 1 [source_file: expected0]\n\n\nSubtree2: NAME JSCompiler_inline_anon_param_4 1 [source_file: testcode]\n    CALL 1 [free_call: 1] [source_file: testcode]\n        NAME x 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInliningCosting3(InlineFunctionsTest.java:529)  test(        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+10}\" +        \"foo(1,2);\" +        \"foo(2,3,x())\",        \"1+2+1+2+4+5+6+7+8+9+1+2+3+10;\" +        \"{var JSCompiler_inline_anon_param_2=x();\" +        \"2+3+2+3+4+5+6+7+8+9+1+2+3+10}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverMutateConstants": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineNeverMutateConstants",
                "src": "  public void testInlineNeverMutateConstants() {\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=undefined;x$$inline_0=1\nResult: var x$$inline_1=undefined;x$$inline_1=1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME undefined 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME undefined 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME undefined 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME undefined 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverMutateConstants(InlineFunctionsTest.java:617)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=undefined;x$$inline_0=1\nResult: var x$$inline_1=undefined;x$$inline_1=1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME undefined 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME undefined 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME undefined 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME undefined 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverMutateConstants(InlineFunctionsTest.java:617)  test(\"function f(x){return x=1}f(undefined)\",         \"{var x$$inline_0=undefined;\" +         \"x$$inline_0=1}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineWithThis7": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineWithThis7",
                "src": "  public void testInlineWithThis7() {\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(a){a=1;this} f.call();\",\n         \"{var a$$inline_0=void 0; a$$inline_0=1; void 0;}\");\n    test(\"function f(a){a=1;this} f.call(x, x);\",\n         \"{var a$$inline_0=x; a$$inline_0=1; x;}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=void 0;a$$inline_0=1;void 0\nResult: var a$$inline_1=void 0;a$$inline_1=1;void 0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    VOID 1 [source_file: expected0]\n                        NUMBER 0.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                VOID 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    VOID 1 [source_file: testcode]\n                        NUMBER 0.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                VOID 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis7(InlineFunctionsTest.java:1895)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=void 0;a$$inline_0=1;void 0\nResult: var a$$inline_1=void 0;a$$inline_1=1;void 0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    VOID 1 [source_file: expected0]\n                        NUMBER 0.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                VOID 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    VOID 1 [source_file: testcode]\n                        NUMBER 0.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                VOID 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis7(InlineFunctionsTest.java:1895)  test(\"function f(a){a=1;this} f.call();\",         \"{var a$$inline_0=void 0; a$$inline_0=1; void 0;}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous1": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testAnonymous1",
                "src": "  public void testAnonymous1() {\n    assumeMinimumCapture = false;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n         \"{var a$$inline_0=10;\" +\n         \"{var b$$inline_1=a$$inline_0;\" +\n         \"a$$inline_0++;alert(b$$inline_1)}}\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n        \"{var a$$inline_2=10;\" +\n        \"{var b$$inline_0=a$$inline_2;\" +\n        \"a$$inline_2++;alert(b$$inline_0)}}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=10;var b$$inline_1=a$$inline_0;a$$inline_0++;alert(b$$inline_1)\nResult: var a$$inline_2=10;var b$$inline_3=a$$inline_2;a$$inline_2++;alert(b$$inline_3)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 10.0 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME b$$inline_1 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME alert 1 [source_file: expected0]\n                        NAME b$$inline_1 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_2 1 [source_file: testcode]\n                    NUMBER 10.0 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME b$$inline_3 1 [source_file: testcode]\n                        NAME a$$inline_2 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME a$$inline_2 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME alert 1 [source_file: testcode]\n                        NAME b$$inline_3 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 10.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: testcode]\n    NUMBER 10.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous1(InlineFunctionsTest.java:2169)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=10;var b$$inline_1=a$$inline_0;a$$inline_0++;alert(b$$inline_1)\nResult: var a$$inline_2=10;var b$$inline_3=a$$inline_2;a$$inline_2++;alert(b$$inline_3)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 10.0 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME b$$inline_1 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME alert 1 [source_file: expected0]\n                        NAME b$$inline_1 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_2 1 [source_file: testcode]\n                    NUMBER 10.0 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME b$$inline_3 1 [source_file: testcode]\n                        NAME a$$inline_2 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME a$$inline_2 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME alert 1 [source_file: testcode]\n                        NAME b$$inline_3 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 10.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: testcode]\n    NUMBER 10.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous1(InlineFunctionsTest.java:2169)  test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",         \"{var a$$inline_0=10;\" +         \"{var b$$inline_1=a$$inline_0;\" +         \"a$$inline_0++;alert(b$$inline_1)}}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testAnonymous3",
                "src": "  public void testAnonymous3() {\n    // Introducing a new value into is tricky\n    assumeMinimumCapture = false;\n    testSame(\"(function(){var a=10;(function(){arguments;})()})();\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){arguments;})()})();\",\n         \"{var a$$inline_0=10;(function(){arguments;})();}\");\n\n    test(\"(function(){(function(){arguments;})()})();\",\n        \"{(function(){arguments;})()}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=10;(function(){arguments})()\nResult: var a$$inline_1=10;(function(){arguments})()\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 10.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                CALL 1 [free_call: 1] [source_file: expected0]\n                    FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                NAME arguments 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 10.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                CALL 1 [free_call: 1] [source_file: testcode]\n                    FUNCTION  1 [parenthesized: true] [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                NAME arguments 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 10.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 10.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous3(InlineFunctionsTest.java:2191)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=10;(function(){arguments})()\nResult: var a$$inline_1=10;(function(){arguments})()\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 10.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                CALL 1 [free_call: 1] [source_file: expected0]\n                    FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                NAME arguments 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 10.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                CALL 1 [free_call: 1] [source_file: testcode]\n                    FUNCTION  1 [parenthesized: true] [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                NAME arguments 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 10.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 10.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous3(InlineFunctionsTest.java:2191)  test(\"(function(){var a=10;(function(){arguments;})()})();\",         \"{var a$$inline_0=10;(function(){arguments;})();}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables1": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testShadowVariables1",
                "src": "  public void testShadowVariables1() {\n    // The Normalize pass now guarantees that that globals are never shadowed\n    // by locals.\n\n    // \"foo\" is inlined here as its parameter \"a\" doesn't conflict.\n    // \"bar\" is assigned a new name.\n    test(\"var a=0;\" +\n         \"function foo(a){return 3+a}\" +\n         \"function bar(){var a=foo(4)}\" +\n         \"bar();\",\n\n         \"var a=0;\" +\n         \"{var a$$inline_0=3+4}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a=0;var a$$inline_0=3+4\nResult: var a=0;var a$$inline_1=3+4\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NUMBER 3.0 1 [source_file: expected0]\n                        NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NUMBER 3.0 1 [source_file: testcode]\n                        NUMBER 4.0 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        NUMBER 3.0 1 [source_file: expected0]\n        NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        NUMBER 3.0 1 [source_file: testcode]\n        NUMBER 4.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables1(InlineFunctionsTest.java:682)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a=0;var a$$inline_0=3+4\nResult: var a=0;var a$$inline_1=3+4\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NUMBER 3.0 1 [source_file: expected0]\n                        NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NUMBER 3.0 1 [source_file: testcode]\n                        NUMBER 4.0 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        NUMBER 3.0 1 [source_file: expected0]\n        NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        NUMBER 3.0 1 [source_file: testcode]\n        NUMBER 4.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables1(InlineFunctionsTest.java:682)  test(\"var a=0;\" +         \"function foo(a){return 3+a}\" +         \"function bar(){var a=foo(4)}\" +         \"bar();\",         \"var a=0;\" +         \"{var a$$inline_0=3+4}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testShadowVariables3",
                "src": "  public void testShadowVariables3() {\n    // \"foo\" is inlined into exported \"_bar\", aliasing foo's \"a\".\n    test(\"var a=0;\" +\n        \"function foo(){var a=2;return 3+a}\" +\n        \"function _bar(){a=foo()}\",\n\n        \"var a=0;\" +\n        \"function _bar(){{var a$$inline_0=2;\" +\n        \"a=3+a$$inline_0}}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a=0;function _bar(){var a$$inline_0=2;a=3+a$$inline_0}\nResult: var a=0;function _bar(){var a$$inline_1=2;a=3+a$$inline_1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION _bar 1 [source_file: expected0]\n            NAME _bar 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NUMBER 3.0 1 [source_file: expected0]\n                                NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        FUNCTION _bar 1 [source_file: testcode]\n            NAME _bar 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME a 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NUMBER 3.0 1 [source_file: testcode]\n                                NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables3(InlineFunctionsTest.java:706)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a=0;function _bar(){var a$$inline_0=2;a=3+a$$inline_0}\nResult: var a=0;function _bar(){var a$$inline_1=2;a=3+a$$inline_1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION _bar 1 [source_file: expected0]\n            NAME _bar 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NUMBER 3.0 1 [source_file: expected0]\n                                NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        FUNCTION _bar 1 [source_file: testcode]\n            NAME _bar 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME a 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NUMBER 3.0 1 [source_file: testcode]\n                                NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables3(InlineFunctionsTest.java:706)  test(\"var a=0;\" +        \"function foo(){var a=2;return 3+a}\" +        \"function _bar(){a=foo()}\",        \"var a=0;\" +        \"function _bar(){{var a$$inline_0=2;\" +        \"a=3+a$$inline_0}}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables6": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testShadowVariables6",
                "src": "  public void testShadowVariables6() {\n    test(\"var a=0;\" +\n        \"function foo(){var a=4;return 3+a}\" +\n        \"function _bar(a){a=foo(4)}\",\n\n        \"var a=0;function _bar(a$$2){{\" +\n        \"var a$$inline_0=4;\" +\n        \"a$$2=3+a$$inline_0}}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a=0;function _bar(a$$2){var a$$inline_0=4;a$$2=3+a$$inline_0}\nResult: var a=0;function _bar(a$$2){var a$$inline_1=4;a$$2=3+a$$inline_1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION _bar 1 [source_file: expected0]\n            NAME _bar 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n                NAME a$$2 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME a$$2 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NUMBER 3.0 1 [source_file: expected0]\n                                NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        FUNCTION _bar 1 [source_file: testcode]\n            NAME _bar 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n                NAME a$$2 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                            NUMBER 4.0 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME a$$2 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NUMBER 3.0 1 [source_file: testcode]\n                                NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 4.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables6(InlineFunctionsTest.java:737)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a=0;function _bar(a$$2){var a$$inline_0=4;a$$2=3+a$$inline_0}\nResult: var a=0;function _bar(a$$2){var a$$inline_1=4;a$$2=3+a$$inline_1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION _bar 1 [source_file: expected0]\n            NAME _bar 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n                NAME a$$2 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME a$$2 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NUMBER 3.0 1 [source_file: expected0]\n                                NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        FUNCTION _bar 1 [source_file: testcode]\n            NAME _bar 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n                NAME a$$2 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                            NUMBER 4.0 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME a$$2 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NUMBER 3.0 1 [source_file: testcode]\n                                NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 4.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables6(InlineFunctionsTest.java:737)  test(\"var a=0;\" +        \"function foo(){var a=4;return 3+a}\" +        \"function _bar(a){a=foo(4)}\",        \"var a=0;function _bar(a$$2){{\" +        \"var a$$inline_0=4;\" +        \"a$$2=3+a$$inline_0}}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables7": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testShadowVariables7",
                "src": "  public void testShadowVariables7() {\n    assumeMinimumCapture = false;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a=3;var a$$inline_0=5;a\nResult: var a=3;var a$$inline_1=5;a\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 3.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 5.0 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 3.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 5.0 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 5.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 5.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables7(InlineFunctionsTest.java:748)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a=3;var a$$inline_0=5;a\nResult: var a=3;var a$$inline_1=5;a\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 3.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 5.0 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 3.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 5.0 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 5.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 5.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables7(InlineFunctionsTest.java:748)  test(\"var a=3;\" +         \"function foo(){return a}\" +         \"(function(){var a=5;(function(){foo()})()})()\",         \"var a=3;\" +         \"{var a$$inline_0=5;{a}}\"         );"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionCallInlining11b": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testFunctionExpressionCallInlining11b",
                "src": "  public void testFunctionExpressionCallInlining11b() {\n    assumeMinimumCapture = false;\n    // Can't inline functions that return inner functions and have local names.\n    testSame(\"((function(){var a; return function(){foo()}})())();\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"((function(){var a; return function(){foo()}})())();\",\n\n        \"{var JSCompiler_inline_result$$0;\" +\n        \"var a$$inline_1;\" +\n        \"JSCompiler_inline_result$$0=function(){foo()};}\" +\n        \"JSCompiler_inline_result$$0()\");\n\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var JSCompiler_inline_result$$0;var a$$inline_1;JSCompiler_inline_result$$0=function(){foo()};JSCompiler_inline_result$$0()\nResult: var JSCompiler_inline_result$$0;var a$$inline_2;JSCompiler_inline_result$$0=function(){foo()};JSCompiler_inline_result$$0()\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_1 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n                    FUNCTION  1 [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                CALL 1 [free_call: 1] [source_file: expected0]\n                                    NAME foo 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_2 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                CALL 1 [free_call: 1] [source_file: testcode]\n                                    NAME foo 1 [source_file: testcode]\n        EXPR_RESULT 1 [source_file: testcode]\n            CALL 1 [free_call: 1] [source_file: testcode]\n                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_1 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11b(InlineFunctionsTest.java:1682)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var JSCompiler_inline_result$$0;var a$$inline_1;JSCompiler_inline_result$$0=function(){foo()};JSCompiler_inline_result$$0()\nResult: var JSCompiler_inline_result$$0;var a$$inline_2;JSCompiler_inline_result$$0=function(){foo()};JSCompiler_inline_result$$0()\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_1 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n                    FUNCTION  1 [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                CALL 1 [free_call: 1] [source_file: expected0]\n                                    NAME foo 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_2 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                CALL 1 [free_call: 1] [source_file: testcode]\n                                    NAME foo 1 [source_file: testcode]\n        EXPR_RESULT 1 [source_file: testcode]\n            CALL 1 [free_call: 1] [source_file: testcode]\n                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_1 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11b(InlineFunctionsTest.java:1682)  test(        \"((function(){var a; return function(){foo()}})())();\",        \"{var JSCompiler_inline_result$$0;\" +        \"var a$$inline_1;\" +        \"JSCompiler_inline_result$$0=function(){foo()};}\" +        \"JSCompiler_inline_result$$0()\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineNoResultNoParamCall3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexInlineNoResultNoParamCall3",
                "src": "  public void testComplexInlineNoResultNoParamCall3() {\n    // We now allow vars in the global space.\n    //   Don't inline into vars into global scope.\n    //   testSame(\"function f(){a();b();var z=1+1}f()\");\n\n    // But do inline into functions\n    test(\"function f(){a();b();var z=1+1}function _foo(){f()}\",\n         \"function _foo(){{a();b();var z$$inline_0=1+1}}\");\n\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function _foo(){a();b();var z$$inline_0=1+1}\nResult: function _foo(){a();b();var z$$inline_1=1+1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _foo 1 [source_file: expected0]\n            NAME _foo 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME b 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME z$$inline_0 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _foo 1 [source_file: testcode]\n            NAME _foo 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME a 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME b 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME z$$inline_1 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME z$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME z$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultNoParamCall3(InlineFunctionsTest.java:1212)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function _foo(){a();b();var z$$inline_0=1+1}\nResult: function _foo(){a();b();var z$$inline_1=1+1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _foo 1 [source_file: expected0]\n            NAME _foo 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME b 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME z$$inline_0 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _foo 1 [source_file: testcode]\n            NAME _foo 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME a 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME b 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME z$$inline_1 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME z$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME z$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultNoParamCall3(InlineFunctionsTest.java:1212)  test(\"function f(){a();b();var z=1+1}function _foo(){f()}\",         \"function _foo(){{a();b();var z$$inline_0=1+1}}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining9": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testCostBasedInlining9",
                "src": "  public void testCostBasedInlining9() {\n    // Here both direct and block inlining is used.  The call to f as a\n    // parameter is inlined directly, which the call to f with f as a parameter\n    // is inlined using block inlining.\n    test(\"function f(a){return 1 + a + a;}\" +\n         \"var a = f(f(1));\",\n         \"var a;\" +\n         \"{var a$$inline_0=1+1+1;\" +\n         \"a=1+a$$inline_0+a$$inline_0}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a;var a$$inline_0=1+1+1;a=1+a$$inline_0+a$$inline_0\nResult: var a;var a$$inline_1=1+1+1;a=1+a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NAME a$$inline_0 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NAME a$$inline_1 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        ADD 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        ADD 1 [source_file: testcode]\n            NUMBER 1.0 1 [source_file: testcode]\n            NUMBER 1.0 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining9(InlineFunctionsTest.java:977)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a;var a$$inline_0=1+1+1;a=1+a$$inline_0+a$$inline_0\nResult: var a;var a$$inline_1=1+1+1;a=1+a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NAME a$$inline_0 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NAME a$$inline_1 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        ADD 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        ADD 1 [source_file: testcode]\n            NUMBER 1.0 1 [source_file: testcode]\n            NUMBER 1.0 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining9(InlineFunctionsTest.java:977)  test(\"function f(a){return 1 + a + a;}\" +         \"var a = f(f(1));\",         \"var a;\" +         \"{var a$$inline_0=1+1+1;\" +         \"a=1+a$$inline_0+a$$inline_0}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testMethodWithFunctionWithFunction": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testMethodWithFunctionWithFunction",
                "src": "  public void testMethodWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariable_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"      var j = [i];\\n\" +\n        \"      (function(j) {\\n\" +\n        \"        setTimeout(function() { result += j; }, 5 * i);\\n\" +\n        \"      })(j);\\n\" +\n        \"      j = null;\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariable_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_2=[i];\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_0=j$$inline_2;\\n\" +  // this temp is needed.\n        \"  setTimeout(function(){result+=j$$inline_0},5*i);\\n\" +\n        \"  }\\n\" +\n        \"  j$$inline_2=null\\n\" + // because this value can be modified later.\n        \"  }\\n\" +\n        \"}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function _testLocalVariable_(){var result=0;var j$$inline_2=[i];var j$$inline_0=j$$inline_2;setTimeout(function(){result+=j$$inline_0},5*i);j$$inline_2=null}\nResult: function _testLocalVariable_(){var result=0;var j$$inline_4=[i];var j$$inline_1=j$$inline_4;setTimeout(function(){result+=j$$inline_1},5*i);j$$inline_4=null}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _testLocalVariable_ 1 [source_file: expected0]\n            NAME _testLocalVariable_ 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME result 2 [source_file: expected0]\n                        NUMBER 0.0 2 [source_file: expected0]\n                BLOCK 3 [source_file: expected0]\n                    VAR 4 [source_file: expected0]\n                        NAME j$$inline_2 4 [source_file: expected0]\n                            ARRAYLIT 4 [source_file: expected0]\n                                NAME i 4 [source_file: expected0]\n                    BLOCK 5 [source_file: expected0]\n                        VAR 6 [source_file: expected0]\n                            NAME j$$inline_0 6 [source_file: expected0]\n                                NAME j$$inline_2 6 [source_file: expected0]\n                        EXPR_RESULT 7 [source_file: expected0]\n                            CALL 7 [free_call: 1] [source_file: expected0]\n                                NAME setTimeout 7 [source_file: expected0]\n                                FUNCTION  7 [source_file: expected0]\n                                    NAME  7 [source_file: expected0]\n                                    LP 7 [source_file: expected0]\n                                    BLOCK 7 [source_file: expected0]\n                                        EXPR_RESULT 7 [source_file: expected0]\n                                            ASSIGN_ADD 7 [source_file: expected0]\n                                                NAME result 7 [source_file: expected0]\n                                                NAME j$$inline_0 7 [source_file: expected0]\n                                MUL 7 [source_file: expected0]\n                                    NUMBER 5.0 7 [source_file: expected0]\n                                    NAME i 7 [source_file: expected0]\n                    EXPR_RESULT 9 [source_file: expected0]\n                        ASSIGN 9 [source_file: expected0]\n                            NAME j$$inline_2 9 [source_file: expected0]\n                            NULL 9 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _testLocalVariable_ 1 [source_file: testcode]\n            NAME _testLocalVariable_ 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 2 [source_file: testcode]\n                    NAME result 2 [source_file: testcode]\n                        NUMBER 0.0 2 [source_file: testcode]\n                BLOCK 3 [source_file: testcode]\n                    VAR 4 [source_file: testcode]\n                        NAME j$$inline_4 4 [source_file: testcode]\n                            ARRAYLIT 4 [source_file: testcode]\n                                NAME i 4 [source_file: testcode]\n                    BLOCK 5 [source_file: testcode]\n                        VAR 7 [source_file: testcode]\n                            NAME j$$inline_1 7 [source_file: testcode]\n                                NAME j$$inline_4 7 [source_file: testcode]\n                        EXPR_RESULT 6 [source_file: testcode]\n                            CALL 6 [free_call: 1] [source_file: testcode]\n                                NAME setTimeout 6 [source_file: testcode]\n                                FUNCTION  6 [source_file: testcode]\n                                    NAME  6 [source_file: testcode]\n                                    LP 6 [source_file: testcode]\n                                    BLOCK 6 [source_file: testcode]\n                                        EXPR_RESULT 6 [source_file: testcode]\n                                            ASSIGN_ADD 6 [source_file: testcode]\n                                                NAME result 6 [source_file: testcode]\n                                                NAME j$$inline_1 6 [source_file: testcode]\n                                MUL 6 [source_file: testcode]\n                                    NUMBER 5.0 6 [source_file: testcode]\n                                    NAME i 6 [source_file: testcode]\n                    EXPR_RESULT 8 [source_file: testcode]\n                        ASSIGN 8 [source_file: testcode]\n                            NAME j$$inline_4 8 [source_file: testcode]\n                            NULL 8 [source_file: testcode]\n\n\nSubtree1: NAME j$$inline_2 4 [source_file: expected0]\n    ARRAYLIT 4 [source_file: expected0]\n        NAME i 4 [source_file: expected0]\n\n\nSubtree2: NAME j$$inline_4 4 [source_file: testcode]\n    ARRAYLIT 4 [source_file: testcode]\n        NAME i 4 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testMethodWithFunctionWithFunction(InlineFunctionsTest.java:2236)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function _testLocalVariable_(){var result=0;var j$$inline_2=[i];var j$$inline_0=j$$inline_2;setTimeout(function(){result+=j$$inline_0},5*i);j$$inline_2=null}\nResult: function _testLocalVariable_(){var result=0;var j$$inline_4=[i];var j$$inline_1=j$$inline_4;setTimeout(function(){result+=j$$inline_1},5*i);j$$inline_4=null}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _testLocalVariable_ 1 [source_file: expected0]\n            NAME _testLocalVariable_ 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME result 2 [source_file: expected0]\n                        NUMBER 0.0 2 [source_file: expected0]\n                BLOCK 3 [source_file: expected0]\n                    VAR 4 [source_file: expected0]\n                        NAME j$$inline_2 4 [source_file: expected0]\n                            ARRAYLIT 4 [source_file: expected0]\n                                NAME i 4 [source_file: expected0]\n                    BLOCK 5 [source_file: expected0]\n                        VAR 6 [source_file: expected0]\n                            NAME j$$inline_0 6 [source_file: expected0]\n                                NAME j$$inline_2 6 [source_file: expected0]\n                        EXPR_RESULT 7 [source_file: expected0]\n                            CALL 7 [free_call: 1] [source_file: expected0]\n                                NAME setTimeout 7 [source_file: expected0]\n                                FUNCTION  7 [source_file: expected0]\n                                    NAME  7 [source_file: expected0]\n                                    LP 7 [source_file: expected0]\n                                    BLOCK 7 [source_file: expected0]\n                                        EXPR_RESULT 7 [source_file: expected0]\n                                            ASSIGN_ADD 7 [source_file: expected0]\n                                                NAME result 7 [source_file: expected0]\n                                                NAME j$$inline_0 7 [source_file: expected0]\n                                MUL 7 [source_file: expected0]\n                                    NUMBER 5.0 7 [source_file: expected0]\n                                    NAME i 7 [source_file: expected0]\n                    EXPR_RESULT 9 [source_file: expected0]\n                        ASSIGN 9 [source_file: expected0]\n                            NAME j$$inline_2 9 [source_file: expected0]\n                            NULL 9 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _testLocalVariable_ 1 [source_file: testcode]\n            NAME _testLocalVariable_ 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 2 [source_file: testcode]\n                    NAME result 2 [source_file: testcode]\n                        NUMBER 0.0 2 [source_file: testcode]\n                BLOCK 3 [source_file: testcode]\n                    VAR 4 [source_file: testcode]\n                        NAME j$$inline_4 4 [source_file: testcode]\n                            ARRAYLIT 4 [source_file: testcode]\n                                NAME i 4 [source_file: testcode]\n                    BLOCK 5 [source_file: testcode]\n                        VAR 7 [source_file: testcode]\n                            NAME j$$inline_1 7 [source_file: testcode]\n                                NAME j$$inline_4 7 [source_file: testcode]\n                        EXPR_RESULT 6 [source_file: testcode]\n                            CALL 6 [free_call: 1] [source_file: testcode]\n                                NAME setTimeout 6 [source_file: testcode]\n                                FUNCTION  6 [source_file: testcode]\n                                    NAME  6 [source_file: testcode]\n                                    LP 6 [source_file: testcode]\n                                    BLOCK 6 [source_file: testcode]\n                                        EXPR_RESULT 6 [source_file: testcode]\n                                            ASSIGN_ADD 6 [source_file: testcode]\n                                                NAME result 6 [source_file: testcode]\n                                                NAME j$$inline_1 6 [source_file: testcode]\n                                MUL 6 [source_file: testcode]\n                                    NUMBER 5.0 6 [source_file: testcode]\n                                    NAME i 6 [source_file: testcode]\n                    EXPR_RESULT 8 [source_file: testcode]\n                        ASSIGN 8 [source_file: testcode]\n                            NAME j$$inline_4 8 [source_file: testcode]\n                            NULL 8 [source_file: testcode]\n\n\nSubtree1: NAME j$$inline_2 4 [source_file: expected0]\n    ARRAYLIT 4 [source_file: expected0]\n        NAME i 4 [source_file: expected0]\n\n\nSubtree2: NAME j$$inline_4 4 [source_file: testcode]\n    ARRAYLIT 4 [source_file: testcode]\n        NAME i 4 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testMethodWithFunctionWithFunction(InlineFunctionsTest.java:2236)  test(\"function _testLocalVariable_() {\\n\" +        \"  var result = 0;\\n\" +        \"  function foo() {\\n\" +        \"      var j = [i];\\n\" +        \"      (function(j) {\\n\" +        \"        setTimeout(function() { result += j; }, 5 * i);\\n\" +        \"      })(j);\\n\" +        \"      j = null;\" +        \"  }\\n\" +        \"  foo();\\n\" +        \"}\",        \"function _testLocalVariable_(){\\n\" +        \"  var result=0;\\n\" +        \"  {\\n\" +        \"  var j$$inline_2=[i];\\n\" +        \"  {\\n\" +        \"  var j$$inline_0=j$$inline_2;\\n\" +  // this temp is needed.        \"  setTimeout(function(){result+=j$$inline_0},5*i);\\n\" +        \"  }\\n\" +        \"  j$$inline_2=null\\n\" + // because this value can be modified later.        \"  }\\n\" +        \"}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionYCombinator": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testFunctionExpressionYCombinator",
                "src": "  public void testFunctionExpressionYCombinator() {\n    assumeMinimumCapture = false;\n    testSame(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\",\n        \"var factorial;\\n\" +\n        \"{\\n\" +\n        \"var M$$inline_4 = function(f$$2) {\\n\" +\n        \"  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\\n\" +\n        \"};\\n\" +\n        \"{\\n\" +\n        \"var f$$inline_0=function(f$$inline_7){\\n\" +\n        \"  return M$$inline_4(\\n\" +\n        \"    function(arg$$inline_8){\\n\" +\n        \"      return f$$inline_7(f$$inline_7)(arg$$inline_8)\\n\" +\n        \"     })\\n\" +\n        \"};\\n\" +\n        \"factorial=M$$inline_4(\\n\" +\n        \"  function(arg$$inline_1){\\n\" +\n        \"    return f$$inline_0(f$$inline_0)(arg$$inline_1)\\n\" +\n        \"});\\n\" +\n        \"}\\n\" +\n        \"}\" +\n        \"factorial(5)\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var factorial;var M$$inline_4=function(f$$2){return function(n){if(n===0)return 1;else return n*f$$2(n-1)}};var f$$inline_0=function(f$$inline_7){return M$$inline_4(function(arg$$inline_8){return f$$inline_7(f$$inline_7)(arg$$inline_8)})};factorial=M$$inline_4(function(arg$$inline_1){return f$$inline_0(f$$inline_0)(arg$$inline_1)});factorial(5)\nResult: var factorial;var M$$inline_6=function(f$$2){return function(n){if(n===0)return 1;else return n*f$$2(n-1)}};var f$$inline_1=function(f$$inline_9){return M$$inline_6(function(arg$$inline_10){return f$$inline_9(f$$inline_9)(arg$$inline_10)})};factorial=M$$inline_6(function(arg$$inline_2){return f$$inline_1(f$$inline_1)(arg$$inline_2)});factorial(5)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME factorial 1 [source_file: expected0]\n        BLOCK 2 [source_file: expected0]\n            VAR 3 [source_file: expected0]\n                NAME M$$inline_4 3 [source_file: expected0]\n                    FUNCTION  3 [source_file: expected0]\n                        NAME  3 [source_file: expected0]\n                        LP 3 [source_file: expected0]\n                            NAME f$$2 3 [source_file: expected0]\n                        BLOCK 3 [source_file: expected0]\n                            RETURN 4 [source_file: expected0]\n                                FUNCTION  4 [source_file: expected0]\n                                    NAME  4 [source_file: expected0]\n                                    LP 4 [source_file: expected0]\n                                        NAME n 4 [source_file: expected0]\n                                    BLOCK 4 [source_file: expected0]\n                                        IF 4 [source_file: expected0]\n                                            SHEQ 4 [source_file: expected0]\n                                                NAME n 4 [source_file: expected0]\n                                                NUMBER 0.0 4 [source_file: expected0]\n                                            BLOCK 4 [source_file: expected0]\n                                                RETURN 4 [source_file: expected0]\n                                                    NUMBER 1.0 4 [source_file: expected0]\n                                            BLOCK 4 [source_file: expected0]\n                                                RETURN 4 [source_file: expected0]\n                                                    MUL 4 [source_file: expected0]\n                                                        NAME n 4 [source_file: expected0]\n                                                        CALL 4 [free_call: 1] [source_file: expected0]\n                                                            NAME f$$2 4 [source_file: expected0]\n                                                            SUB 4 [source_file: expected0]\n                                                                NAME n 4 [source_file: expected0]\n                                                                NUMBER 1.0 4 [source_file: expected0]\n            BLOCK 6 [source_file: expected0]\n                VAR 7 [source_file: expected0]\n                    NAME f$$inline_0 7 [source_file: expected0]\n                        FUNCTION  7 [source_file: expected0]\n                            NAME  7 [source_file: expected0]\n                            LP 7 [source_file: expected0]\n                                NAME f$$inline_7 7 [source_file: expected0]\n                            BLOCK 7 [source_file: expected0]\n                                RETURN 8 [source_file: expected0]\n                                    CALL 8 [free_call: 1] [source_file: expected0]\n                                        NAME M$$inline_4 8 [source_file: expected0]\n                                        FUNCTION  9 [source_file: expected0]\n                                            NAME  9 [source_file: expected0]\n                                            LP 9 [source_file: expected0]\n                                                NAME arg$$inline_8 9 [source_file: expected0]\n                                            BLOCK 9 [source_file: expected0]\n                                                RETURN 10 [source_file: expected0]\n                                                    CALL 10 [free_call: 1] [source_file: expected0]\n                                                        CALL 10 [free_call: 1] [source_file: expected0]\n                                                            NAME f$$inline_7 10 [source_file: expected0]\n                                                            NAME f$$inline_7 10 [source_file: expected0]\n                                                        NAME arg$$inline_8 10 [source_file: expected0]\n                EXPR_RESULT 13 [source_file: expected0]\n                    ASSIGN 13 [source_file: expected0]\n                        NAME factorial 13 [source_file: expected0]\n                        CALL 13 [free_call: 1] [source_file: expected0]\n                            NAME M$$inline_4 13 [source_file: expected0]\n                            FUNCTION  14 [source_file: expected0]\n                                NAME  14 [source_file: expected0]\n                                LP 14 [source_file: expected0]\n                                    NAME arg$$inline_1 14 [source_file: expected0]\n                                BLOCK 14 [source_file: expected0]\n                                    RETURN 15 [source_file: expected0]\n                                        CALL 15 [free_call: 1] [source_file: expected0]\n                                            CALL 15 [free_call: 1] [source_file: expected0]\n                                                NAME f$$inline_0 15 [source_file: expected0]\n                                                NAME f$$inline_0 15 [source_file: expected0]\n                                            NAME arg$$inline_1 15 [source_file: expected0]\n        EXPR_RESULT 18 [source_file: expected0]\n            CALL 18 [free_call: 1] [source_file: expected0]\n                NAME factorial 18 [source_file: expected0]\n                NUMBER 5.0 18 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME factorial 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 13 [source_file: testcode]\n                NAME M$$inline_6 13 [source_file: testcode]\n                    FUNCTION  13 [source_file: testcode]\n                        NAME  13 [source_file: testcode]\n                        LP 13 [source_file: testcode]\n                            NAME f$$2 13 [source_file: testcode]\n                        BLOCK 13 [source_file: testcode]\n                            RETURN 14 [source_file: testcode]\n                                FUNCTION  14 [source_file: testcode]\n                                    NAME  14 [source_file: testcode]\n                                    LP 14 [source_file: testcode]\n                                        NAME n 14 [source_file: testcode]\n                                    BLOCK 14 [source_file: testcode]\n                                        IF 15 [source_file: testcode]\n                                            SHEQ 15 [source_file: testcode]\n                                                NAME n 15 [source_file: testcode]\n                                                NUMBER 0.0 15 [source_file: testcode]\n                                            BLOCK 16 [source_file: testcode]\n                                                RETURN 16 [source_file: testcode]\n                                                    NUMBER 1.0 16 [source_file: testcode]\n                                            BLOCK 18 [source_file: testcode]\n                                                RETURN 18 [source_file: testcode]\n                                                    MUL 18 [source_file: testcode]\n                                                        NAME n 18 [source_file: testcode]\n                                                        CALL 18 [free_call: 1] [source_file: testcode]\n                                                            NAME f$$2 18 [source_file: testcode]\n                                                            SUB 18 [source_file: testcode]\n                                                                NAME n 18 [source_file: testcode]\n                                                                NUMBER 1.0 18 [source_file: testcode]\n            BLOCK 2 [source_file: testcode]\n                VAR 7 [source_file: testcode]\n                    NAME f$$inline_1 7 [source_file: testcode]\n                        FUNCTION  7 [source_file: testcode]\n                            NAME  7 [source_file: testcode]\n                            LP 7 [source_file: testcode]\n                                NAME f$$inline_9 7 [source_file: testcode]\n                            BLOCK 7 [source_file: testcode]\n                                RETURN 8 [source_file: testcode]\n                                    CALL 8 [free_call: 1] [source_file: testcode]\n                                        NAME M$$inline_6 8 [source_file: testcode]\n                                        FUNCTION  8 [source_file: testcode]\n                                            NAME  8 [source_file: testcode]\n                                            LP 8 [source_file: testcode]\n                                                NAME arg$$inline_10 8 [source_file: testcode]\n                                            BLOCK 8 [source_file: testcode]\n                                                RETURN 9 [source_file: testcode]\n                                                    CALL 9 [free_call: 1] [source_file: testcode]\n                                                        CALL 9 [parenthesized: true] [free_call: 1] [source_file: testcode]\n                                                            NAME f$$inline_9 9 [source_file: testcode]\n                                                            NAME f$$inline_9 9 [source_file: testcode]\n                                                        NAME arg$$inline_10 9 [source_file: testcode]\n                EXPR_RESULT 3 [source_file: testcode]\n                    ASSIGN 3 [source_file: testcode]\n                        NAME factorial 3 [source_file: testcode]\n                        CALL 3 [free_call: 1] [source_file: testcode]\n                            NAME M$$inline_6 3 [source_file: testcode]\n                            FUNCTION  3 [source_file: testcode]\n                                NAME  3 [source_file: testcode]\n                                LP 3 [source_file: testcode]\n                                    NAME arg$$inline_2 3 [source_file: testcode]\n                                BLOCK 3 [source_file: testcode]\n                                    RETURN 4 [source_file: testcode]\n                                        CALL 4 [free_call: 1] [source_file: testcode]\n                                            CALL 4 [parenthesized: true] [free_call: 1] [source_file: testcode]\n                                                NAME f$$inline_1 4 [source_file: testcode]\n                                                NAME f$$inline_1 4 [source_file: testcode]\n                                            NAME arg$$inline_2 4 [source_file: testcode]\n        EXPR_RESULT 22 [source_file: testcode]\n            CALL 22 [free_call: 1] [source_file: testcode]\n                NAME factorial 22 [source_file: testcode]\n                NUMBER 5.0 22 [source_file: testcode]\n\n\nSubtree1: NAME M$$inline_4 3 [source_file: expected0]\n    FUNCTION  3 [source_file: expected0]\n        NAME  3 [source_file: expected0]\n        LP 3 [source_file: expected0]\n            NAME f$$2 3 [source_file: expected0]\n        BLOCK 3 [source_file: expected0]\n            RETURN 4 [source_file: expected0]\n                FUNCTION  4 [source_file: expected0]\n                    NAME  4 [source_file: expected0]\n                    LP 4 [source_file: expected0]\n                        NAME n 4 [source_file: expected0]\n                    BLOCK 4 [source_file: expected0]\n                        IF 4 [source_file: expected0]\n                            SHEQ 4 [source_file: expected0]\n                                NAME n 4 [source_file: expected0]\n                                NUMBER 0.0 4 [source_file: expected0]\n                            BLOCK 4 [source_file: expected0]\n                                RETURN 4 [source_file: expected0]\n                                    NUMBER 1.0 4 [source_file: expected0]\n                            BLOCK 4 [source_file: expected0]\n                                RETURN 4 [source_file: expected0]\n                                    MUL 4 [source_file: expected0]\n                                        NAME n 4 [source_file: expected0]\n                                        CALL 4 [free_call: 1] [source_file: expected0]\n                                            NAME f$$2 4 [source_file: expected0]\n                                            SUB 4 [source_file: expected0]\n                                                NAME n 4 [source_file: expected0]\n                                                NUMBER 1.0 4 [source_file: expected0]\n\n\nSubtree2: NAME M$$inline_6 13 [source_file: testcode]\n    FUNCTION  13 [source_file: testcode]\n        NAME  13 [source_file: testcode]\n        LP 13 [source_file: testcode]\n            NAME f$$2 13 [source_file: testcode]\n        BLOCK 13 [source_file: testcode]\n            RETURN 14 [source_file: testcode]\n                FUNCTION  14 [source_file: testcode]\n                    NAME  14 [source_file: testcode]\n                    LP 14 [source_file: testcode]\n                        NAME n 14 [source_file: testcode]\n                    BLOCK 14 [source_file: testcode]\n                        IF 15 [source_file: testcode]\n                            SHEQ 15 [source_file: testcode]\n                                NAME n 15 [source_file: testcode]\n                                NUMBER 0.0 15 [source_file: testcode]\n                            BLOCK 16 [source_file: testcode]\n                                RETURN 16 [source_file: testcode]\n                                    NUMBER 1.0 16 [source_file: testcode]\n                            BLOCK 18 [source_file: testcode]\n                                RETURN 18 [source_file: testcode]\n                                    MUL 18 [source_file: testcode]\n                                        NAME n 18 [source_file: testcode]\n                                        CALL 18 [free_call: 1] [source_file: testcode]\n                                            NAME f$$2 18 [source_file: testcode]\n                                            SUB 18 [source_file: testcode]\n                                                NAME n 18 [source_file: testcode]\n                                                NUMBER 1.0 18 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionYCombinator(InlineFunctionsTest.java:1929)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var factorial;var M$$inline_4=function(f$$2){return function(n){if(n===0)return 1;else return n*f$$2(n-1)}};var f$$inline_0=function(f$$inline_7){return M$$inline_4(function(arg$$inline_8){return f$$inline_7(f$$inline_7)(arg$$inline_8)})};factorial=M$$inline_4(function(arg$$inline_1){return f$$inline_0(f$$inline_0)(arg$$inline_1)});factorial(5)\nResult: var factorial;var M$$inline_6=function(f$$2){return function(n){if(n===0)return 1;else return n*f$$2(n-1)}};var f$$inline_1=function(f$$inline_9){return M$$inline_6(function(arg$$inline_10){return f$$inline_9(f$$inline_9)(arg$$inline_10)})};factorial=M$$inline_6(function(arg$$inline_2){return f$$inline_1(f$$inline_1)(arg$$inline_2)});factorial(5)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME factorial 1 [source_file: expected0]\n        BLOCK 2 [source_file: expected0]\n            VAR 3 [source_file: expected0]\n                NAME M$$inline_4 3 [source_file: expected0]\n                    FUNCTION  3 [source_file: expected0]\n                        NAME  3 [source_file: expected0]\n                        LP 3 [source_file: expected0]\n                            NAME f$$2 3 [source_file: expected0]\n                        BLOCK 3 [source_file: expected0]\n                            RETURN 4 [source_file: expected0]\n                                FUNCTION  4 [source_file: expected0]\n                                    NAME  4 [source_file: expected0]\n                                    LP 4 [source_file: expected0]\n                                        NAME n 4 [source_file: expected0]\n                                    BLOCK 4 [source_file: expected0]\n                                        IF 4 [source_file: expected0]\n                                            SHEQ 4 [source_file: expected0]\n                                                NAME n 4 [source_file: expected0]\n                                                NUMBER 0.0 4 [source_file: expected0]\n                                            BLOCK 4 [source_file: expected0]\n                                                RETURN 4 [source_file: expected0]\n                                                    NUMBER 1.0 4 [source_file: expected0]\n                                            BLOCK 4 [source_file: expected0]\n                                                RETURN 4 [source_file: expected0]\n                                                    MUL 4 [source_file: expected0]\n                                                        NAME n 4 [source_file: expected0]\n                                                        CALL 4 [free_call: 1] [source_file: expected0]\n                                                            NAME f$$2 4 [source_file: expected0]\n                                                            SUB 4 [source_file: expected0]\n                                                                NAME n 4 [source_file: expected0]\n                                                                NUMBER 1.0 4 [source_file: expected0]\n            BLOCK 6 [source_file: expected0]\n                VAR 7 [source_file: expected0]\n                    NAME f$$inline_0 7 [source_file: expected0]\n                        FUNCTION  7 [source_file: expected0]\n                            NAME  7 [source_file: expected0]\n                            LP 7 [source_file: expected0]\n                                NAME f$$inline_7 7 [source_file: expected0]\n                            BLOCK 7 [source_file: expected0]\n                                RETURN 8 [source_file: expected0]\n                                    CALL 8 [free_call: 1] [source_file: expected0]\n                                        NAME M$$inline_4 8 [source_file: expected0]\n                                        FUNCTION  9 [source_file: expected0]\n                                            NAME  9 [source_file: expected0]\n                                            LP 9 [source_file: expected0]\n                                                NAME arg$$inline_8 9 [source_file: expected0]\n                                            BLOCK 9 [source_file: expected0]\n                                                RETURN 10 [source_file: expected0]\n                                                    CALL 10 [free_call: 1] [source_file: expected0]\n                                                        CALL 10 [free_call: 1] [source_file: expected0]\n                                                            NAME f$$inline_7 10 [source_file: expected0]\n                                                            NAME f$$inline_7 10 [source_file: expected0]\n                                                        NAME arg$$inline_8 10 [source_file: expected0]\n                EXPR_RESULT 13 [source_file: expected0]\n                    ASSIGN 13 [source_file: expected0]\n                        NAME factorial 13 [source_file: expected0]\n                        CALL 13 [free_call: 1] [source_file: expected0]\n                            NAME M$$inline_4 13 [source_file: expected0]\n                            FUNCTION  14 [source_file: expected0]\n                                NAME  14 [source_file: expected0]\n                                LP 14 [source_file: expected0]\n                                    NAME arg$$inline_1 14 [source_file: expected0]\n                                BLOCK 14 [source_file: expected0]\n                                    RETURN 15 [source_file: expected0]\n                                        CALL 15 [free_call: 1] [source_file: expected0]\n                                            CALL 15 [free_call: 1] [source_file: expected0]\n                                                NAME f$$inline_0 15 [source_file: expected0]\n                                                NAME f$$inline_0 15 [source_file: expected0]\n                                            NAME arg$$inline_1 15 [source_file: expected0]\n        EXPR_RESULT 18 [source_file: expected0]\n            CALL 18 [free_call: 1] [source_file: expected0]\n                NAME factorial 18 [source_file: expected0]\n                NUMBER 5.0 18 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME factorial 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 13 [source_file: testcode]\n                NAME M$$inline_6 13 [source_file: testcode]\n                    FUNCTION  13 [source_file: testcode]\n                        NAME  13 [source_file: testcode]\n                        LP 13 [source_file: testcode]\n                            NAME f$$2 13 [source_file: testcode]\n                        BLOCK 13 [source_file: testcode]\n                            RETURN 14 [source_file: testcode]\n                                FUNCTION  14 [source_file: testcode]\n                                    NAME  14 [source_file: testcode]\n                                    LP 14 [source_file: testcode]\n                                        NAME n 14 [source_file: testcode]\n                                    BLOCK 14 [source_file: testcode]\n                                        IF 15 [source_file: testcode]\n                                            SHEQ 15 [source_file: testcode]\n                                                NAME n 15 [source_file: testcode]\n                                                NUMBER 0.0 15 [source_file: testcode]\n                                            BLOCK 16 [source_file: testcode]\n                                                RETURN 16 [source_file: testcode]\n                                                    NUMBER 1.0 16 [source_file: testcode]\n                                            BLOCK 18 [source_file: testcode]\n                                                RETURN 18 [source_file: testcode]\n                                                    MUL 18 [source_file: testcode]\n                                                        NAME n 18 [source_file: testcode]\n                                                        CALL 18 [free_call: 1] [source_file: testcode]\n                                                            NAME f$$2 18 [source_file: testcode]\n                                                            SUB 18 [source_file: testcode]\n                                                                NAME n 18 [source_file: testcode]\n                                                                NUMBER 1.0 18 [source_file: testcode]\n            BLOCK 2 [source_file: testcode]\n                VAR 7 [source_file: testcode]\n                    NAME f$$inline_1 7 [source_file: testcode]\n                        FUNCTION  7 [source_file: testcode]\n                            NAME  7 [source_file: testcode]\n                            LP 7 [source_file: testcode]\n                                NAME f$$inline_9 7 [source_file: testcode]\n                            BLOCK 7 [source_file: testcode]\n                                RETURN 8 [source_file: testcode]\n                                    CALL 8 [free_call: 1] [source_file: testcode]\n                                        NAME M$$inline_6 8 [source_file: testcode]\n                                        FUNCTION  8 [source_file: testcode]\n                                            NAME  8 [source_file: testcode]\n                                            LP 8 [source_file: testcode]\n                                                NAME arg$$inline_10 8 [source_file: testcode]\n                                            BLOCK 8 [source_file: testcode]\n                                                RETURN 9 [source_file: testcode]\n                                                    CALL 9 [free_call: 1] [source_file: testcode]\n                                                        CALL 9 [parenthesized: true] [free_call: 1] [source_file: testcode]\n                                                            NAME f$$inline_9 9 [source_file: testcode]\n                                                            NAME f$$inline_9 9 [source_file: testcode]\n                                                        NAME arg$$inline_10 9 [source_file: testcode]\n                EXPR_RESULT 3 [source_file: testcode]\n                    ASSIGN 3 [source_file: testcode]\n                        NAME factorial 3 [source_file: testcode]\n                        CALL 3 [free_call: 1] [source_file: testcode]\n                            NAME M$$inline_6 3 [source_file: testcode]\n                            FUNCTION  3 [source_file: testcode]\n                                NAME  3 [source_file: testcode]\n                                LP 3 [source_file: testcode]\n                                    NAME arg$$inline_2 3 [source_file: testcode]\n                                BLOCK 3 [source_file: testcode]\n                                    RETURN 4 [source_file: testcode]\n                                        CALL 4 [free_call: 1] [source_file: testcode]\n                                            CALL 4 [parenthesized: true] [free_call: 1] [source_file: testcode]\n                                                NAME f$$inline_1 4 [source_file: testcode]\n                                                NAME f$$inline_1 4 [source_file: testcode]\n                                            NAME arg$$inline_2 4 [source_file: testcode]\n        EXPR_RESULT 22 [source_file: testcode]\n            CALL 22 [free_call: 1] [source_file: testcode]\n                NAME factorial 22 [source_file: testcode]\n                NUMBER 5.0 22 [source_file: testcode]\n\n\nSubtree1: NAME M$$inline_4 3 [source_file: expected0]\n    FUNCTION  3 [source_file: expected0]\n        NAME  3 [source_file: expected0]\n        LP 3 [source_file: expected0]\n            NAME f$$2 3 [source_file: expected0]\n        BLOCK 3 [source_file: expected0]\n            RETURN 4 [source_file: expected0]\n                FUNCTION  4 [source_file: expected0]\n                    NAME  4 [source_file: expected0]\n                    LP 4 [source_file: expected0]\n                        NAME n 4 [source_file: expected0]\n                    BLOCK 4 [source_file: expected0]\n                        IF 4 [source_file: expected0]\n                            SHEQ 4 [source_file: expected0]\n                                NAME n 4 [source_file: expected0]\n                                NUMBER 0.0 4 [source_file: expected0]\n                            BLOCK 4 [source_file: expected0]\n                                RETURN 4 [source_file: expected0]\n                                    NUMBER 1.0 4 [source_file: expected0]\n                            BLOCK 4 [source_file: expected0]\n                                RETURN 4 [source_file: expected0]\n                                    MUL 4 [source_file: expected0]\n                                        NAME n 4 [source_file: expected0]\n                                        CALL 4 [free_call: 1] [source_file: expected0]\n                                            NAME f$$2 4 [source_file: expected0]\n                                            SUB 4 [source_file: expected0]\n                                                NAME n 4 [source_file: expected0]\n                                                NUMBER 1.0 4 [source_file: expected0]\n\n\nSubtree2: NAME M$$inline_6 13 [source_file: testcode]\n    FUNCTION  13 [source_file: testcode]\n        NAME  13 [source_file: testcode]\n        LP 13 [source_file: testcode]\n            NAME f$$2 13 [source_file: testcode]\n        BLOCK 13 [source_file: testcode]\n            RETURN 14 [source_file: testcode]\n                FUNCTION  14 [source_file: testcode]\n                    NAME  14 [source_file: testcode]\n                    LP 14 [source_file: testcode]\n                        NAME n 14 [source_file: testcode]\n                    BLOCK 14 [source_file: testcode]\n                        IF 15 [source_file: testcode]\n                            SHEQ 15 [source_file: testcode]\n                                NAME n 15 [source_file: testcode]\n                                NUMBER 0.0 15 [source_file: testcode]\n                            BLOCK 16 [source_file: testcode]\n                                RETURN 16 [source_file: testcode]\n                                    NUMBER 1.0 16 [source_file: testcode]\n                            BLOCK 18 [source_file: testcode]\n                                RETURN 18 [source_file: testcode]\n                                    MUL 18 [source_file: testcode]\n                                        NAME n 18 [source_file: testcode]\n                                        CALL 18 [free_call: 1] [source_file: testcode]\n                                            NAME f$$2 18 [source_file: testcode]\n                                            SUB 18 [source_file: testcode]\n                                                NAME n 18 [source_file: testcode]\n                                                NUMBER 1.0 18 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionYCombinator(InlineFunctionsTest.java:1929)  test(        \"var factorial = ((function(M) {\\n\" +        \"      return ((function(f) {\\n\" +        \"                 return M(function(arg) {\\n\" +        \"                            return (f(f))(arg);\\n\" +        \"                            })\\n\" +        \"               })\\n\" +        \"              (function(f) {\\n\" +        \"                 return M(function(arg) {\\n\" +        \"                            return (f(f))(arg);\\n\" +        \"                           })\\n\" +        \"                 }));\\n\" +        \"     })\\n\" +        \"    (function(f) {\\n\" +        \"       return function(n) {\\n\" +        \"        if (n === 0)\\n\" +        \"          return 1;\\n\" +        \"        else\\n\" +        \"          return n * f(n - 1);\\n\" +        \"       };\\n\" +        \"     }));\\n\" +        \"\\n\" +        \"factorial(5)\\n\",        \"var factorial;\\n\" +        \"{\\n\" +        \"var M$$inline_4 = function(f$$2) {\\n\" +        \"  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\\n\" +        \"};\\n\" +        \"{\\n\" +        \"var f$$inline_0=function(f$$inline_7){\\n\" +        \"  return M$$inline_4(\\n\" +        \"    function(arg$$inline_8){\\n\" +        \"      return f$$inline_7(f$$inline_7)(arg$$inline_8)\\n\" +        \"     })\\n\" +        \"};\\n\" +        \"factorial=M$$inline_4(\\n\" +        \"  function(arg$$inline_1){\\n\" +        \"    return f$$inline_0(f$$inline_0)(arg$$inline_1)\\n\" +        \"});\\n\" +        \"}\\n\" +        \"}\" +        \"factorial(5)\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineVars7": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexInlineVars7",
                "src": "  public void testComplexInlineVars7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;var z=f(1,b)\",\n         \"var b=1;var z;\" +\n         \"{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2\" +\n         \"}else{\" +\n         \"z=true;break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var b=1;var z;JSCompiler_inline_label_f_2:{if(1){z=b();break JSCompiler_inline_label_f_2}else{z=true;break JSCompiler_inline_label_f_2}z=void 0}\nResult: var b=1;var z;JSCompiler_inline_label_f_4:{if(1){z=b();break JSCompiler_inline_label_f_4}else{z=true;break JSCompiler_inline_label_f_4}z=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME b 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME z 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME b 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    TRUE 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME z 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME b 1 [source_file: testcode]\n                NUMBER 1.0 1 [source_file: testcode]\n        VAR 1 [source_file: testcode]\n            NAME z 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME b 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    TRUE 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME z 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars7(InlineFunctionsTest.java:1319)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var b=1;var z;JSCompiler_inline_label_f_2:{if(1){z=b();break JSCompiler_inline_label_f_2}else{z=true;break JSCompiler_inline_label_f_2}z=void 0}\nResult: var b=1;var z;JSCompiler_inline_label_f_4:{if(1){z=b();break JSCompiler_inline_label_f_4}else{z=true;break JSCompiler_inline_label_f_4}z=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME b 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME z 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME b 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    TRUE 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME z 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME b 1 [source_file: testcode]\n                NUMBER 1.0 1 [source_file: testcode]\n        VAR 1 [source_file: testcode]\n            NAME z 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME b 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    TRUE 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME z 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars7(InlineFunctionsTest.java:1319)  test(\"function f(x,y){if (x) return y(); else return true;}\" +         \"var b=1;var z=f(1,b)\",         \"var b=1;var z;\" +         \"{JSCompiler_inline_label_f_2:{if(1){z=b();\" +         \"break JSCompiler_inline_label_f_2\" +         \"}else{\" +         \"z=true;break JSCompiler_inline_label_f_2}z=void 0}}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2a": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexFunctionWithFunctionDefinition2a",
                "src": "  public void testComplexFunctionWithFunctionDefinition2a() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"(function(){\" +\n        \"var f = function(a){call(function(){return a})};f()})()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=void 0;call(function(){return a$$inline_0})\nResult: var a$$inline_1=void 0;call(function(){return a$$inline_1})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a$$inline_0 1 [source_file: expected0]\n                        VOID 1 [source_file: expected0]\n                            NUMBER 0.0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME call 1 [source_file: expected0]\n                        FUNCTION  1 [source_file: expected0]\n                            NAME  1 [source_file: expected0]\n                            LP 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                                RETURN 1 [source_file: expected0]\n                                    NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a$$inline_1 1 [source_file: testcode]\n                        VOID 1 [source_file: testcode]\n                            NUMBER 0.0 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME call 1 [source_file: testcode]\n                        FUNCTION  1 [source_file: testcode]\n                            NAME  1 [source_file: testcode]\n                            LP 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                                RETURN 1 [source_file: testcode]\n                                    NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2a(InlineFunctionsTest.java:1525)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=void 0;call(function(){return a$$inline_0})\nResult: var a$$inline_1=void 0;call(function(){return a$$inline_1})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a$$inline_0 1 [source_file: expected0]\n                        VOID 1 [source_file: expected0]\n                            NUMBER 0.0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME call 1 [source_file: expected0]\n                        FUNCTION  1 [source_file: expected0]\n                            NAME  1 [source_file: expected0]\n                            LP 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                                RETURN 1 [source_file: expected0]\n                                    NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a$$inline_1 1 [source_file: testcode]\n                        VOID 1 [source_file: testcode]\n                            NUMBER 0.0 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME call 1 [source_file: testcode]\n                        FUNCTION  1 [source_file: testcode]\n                            NAME  1 [source_file: testcode]\n                            LP 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                                RETURN 1 [source_file: testcode]\n                                    NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2a(InlineFunctionsTest.java:1525)  test(\"(function(){\" +         \"var f = function(a){call(function(){return a})};f()})()\",         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInline7": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexInline7",
                "src": "  public void testComplexInline7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;z=f(1,b)\",\n         \"var b=1;{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2}else{z=true;\" +\n         \"break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var b=1;JSCompiler_inline_label_f_2:{if(1){z=b();break JSCompiler_inline_label_f_2}else{z=true;break JSCompiler_inline_label_f_2}z=void 0}\nResult: var b=1;JSCompiler_inline_label_f_4:{if(1){z=b();break JSCompiler_inline_label_f_4}else{z=true;break JSCompiler_inline_label_f_4}z=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME b 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME b 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    TRUE 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME z 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME b 1 [source_file: testcode]\n                NUMBER 1.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME b 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    TRUE 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME z 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline7(InlineFunctionsTest.java:1269)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var b=1;JSCompiler_inline_label_f_2:{if(1){z=b();break JSCompiler_inline_label_f_2}else{z=true;break JSCompiler_inline_label_f_2}z=void 0}\nResult: var b=1;JSCompiler_inline_label_f_4:{if(1){z=b();break JSCompiler_inline_label_f_4}else{z=true;break JSCompiler_inline_label_f_4}z=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME b 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME b 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    TRUE 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME z 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME b 1 [source_file: testcode]\n                NUMBER 1.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME b 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    TRUE 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME z 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline7(InlineFunctionsTest.java:1269)  test(\"function f(x,y){if (x) return y(); else return true;}\" +         \"var b=1;z=f(1,b)\",         \"var b=1;{JSCompiler_inline_label_f_2:{if(1){z=b();\" +         \"break JSCompiler_inline_label_f_2}else{z=true;\" +         \"break JSCompiler_inline_label_f_2}z=void 0}}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionOmega": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testFunctionExpressionOmega",
                "src": "  public void testFunctionExpressionOmega() {\n    // ... with unused recursive name.\n    test(\"(function (f){f(f)})(function(f){f(f)})\",\n         \"{var f$$inline_0=function(f$$1){f$$1(f$$1)};\" +\n          \"{{f$$inline_0(f$$inline_0)}}}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var f$$inline_0=function(f$$1){f$$1(f$$1)};f$$inline_0(f$$inline_0)\nResult: var f$$inline_1=function(f$$1){f$$1(f$$1)};f$$inline_1(f$$inline_1)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME f$$inline_0 1 [source_file: expected0]\n                    FUNCTION  1 [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                            NAME f$$1 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                CALL 1 [free_call: 1] [source_file: expected0]\n                                    NAME f$$1 1 [source_file: expected0]\n                                    NAME f$$1 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME f$$inline_0 1 [source_file: expected0]\n                            NAME f$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME f$$inline_1 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                            NAME f$$1 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                CALL 1 [free_call: 1] [source_file: testcode]\n                                    NAME f$$1 1 [source_file: testcode]\n                                    NAME f$$1 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME f$$inline_1 1 [source_file: testcode]\n                            NAME f$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME f$$inline_0 1 [source_file: expected0]\n    FUNCTION  1 [source_file: expected0]\n        NAME  1 [source_file: expected0]\n        LP 1 [source_file: expected0]\n            NAME f$$1 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                CALL 1 [free_call: 1] [source_file: expected0]\n                    NAME f$$1 1 [source_file: expected0]\n                    NAME f$$1 1 [source_file: expected0]\n\n\nSubtree2: NAME f$$inline_1 1 [source_file: testcode]\n    FUNCTION  1 [source_file: testcode]\n        NAME  1 [source_file: testcode]\n        LP 1 [source_file: testcode]\n            NAME f$$1 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                CALL 1 [free_call: 1] [source_file: testcode]\n                    NAME f$$1 1 [source_file: testcode]\n                    NAME f$$1 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionOmega(InlineFunctionsTest.java:1758)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var f$$inline_0=function(f$$1){f$$1(f$$1)};f$$inline_0(f$$inline_0)\nResult: var f$$inline_1=function(f$$1){f$$1(f$$1)};f$$inline_1(f$$inline_1)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME f$$inline_0 1 [source_file: expected0]\n                    FUNCTION  1 [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                            NAME f$$1 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                CALL 1 [free_call: 1] [source_file: expected0]\n                                    NAME f$$1 1 [source_file: expected0]\n                                    NAME f$$1 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME f$$inline_0 1 [source_file: expected0]\n                            NAME f$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME f$$inline_1 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                            NAME f$$1 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                CALL 1 [free_call: 1] [source_file: testcode]\n                                    NAME f$$1 1 [source_file: testcode]\n                                    NAME f$$1 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME f$$inline_1 1 [source_file: testcode]\n                            NAME f$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME f$$inline_0 1 [source_file: expected0]\n    FUNCTION  1 [source_file: expected0]\n        NAME  1 [source_file: expected0]\n        LP 1 [source_file: expected0]\n            NAME f$$1 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                CALL 1 [free_call: 1] [source_file: expected0]\n                    NAME f$$1 1 [source_file: expected0]\n                    NAME f$$1 1 [source_file: expected0]\n\n\nSubtree2: NAME f$$inline_1 1 [source_file: testcode]\n    FUNCTION  1 [source_file: testcode]\n        NAME  1 [source_file: testcode]\n        LP 1 [source_file: testcode]\n            NAME f$$1 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                CALL 1 [free_call: 1] [source_file: testcode]\n                    NAME f$$1 1 [source_file: testcode]\n                    NAME f$$1 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionOmega(InlineFunctionsTest.java:1758)  test(\"(function (f){f(f)})(function(f){f(f)})\",         \"{var f$$inline_0=function(f$$1){f$$1(f$$1)};\" +          \"{{f$$inline_0(f$$inline_0)}}}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15b": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions15b",
                "src": "  public void testInlineFunctions15b() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline closure with locals into global scope.\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"function foo(){var x;return function(a){return a+1}}\" +\n         \"var d=c+foo()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"var JSCompiler_temp_const$$0 = c;\\n\" +\n         \"{\\n\" +\n         \"var JSCompiler_inline_result$$1;\\n\" +\n         \"var x$$inline_2;\\n\" +\n         \"JSCompiler_inline_result$$1 = \" +\n         \"    function(a$$inline_3){ return a$$inline_3+1 };\\n\" +\n         \"}\" +\n         \"var d=JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_2;JSCompiler_inline_result$$1=function(a$$inline_3){return a$$inline_3+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\nResult: var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_3;JSCompiler_inline_result$$1=function(a$$inline_4){return a$$inline_4+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME JSCompiler_temp_const$$0 1 [source_file: expected0]\n                NAME c 1 [source_file: expected0]\n        BLOCK 2 [source_file: expected0]\n            VAR 3 [source_file: expected0]\n                NAME JSCompiler_inline_result$$1 3 [source_file: expected0]\n            VAR 4 [source_file: expected0]\n                NAME x$$inline_2 4 [source_file: expected0]\n            EXPR_RESULT 5 [source_file: expected0]\n                ASSIGN 5 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$1 5 [source_file: expected0]\n                    FUNCTION  5 [source_file: expected0]\n                        NAME  5 [source_file: expected0]\n                        LP 5 [source_file: expected0]\n                            NAME a$$inline_3 5 [source_file: expected0]\n                        BLOCK 5 [source_file: expected0]\n                            RETURN 5 [source_file: expected0]\n                                ADD 5 [source_file: expected0]\n                                    NAME a$$inline_3 5 [source_file: expected0]\n                                    NUMBER 1.0 5 [source_file: expected0]\n        VAR 6 [source_file: expected0]\n            NAME d 6 [source_file: expected0]\n                ADD 6 [source_file: expected0]\n                    NAME JSCompiler_temp_const$$0 6 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$1 6 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                NAME c 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_3 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                            NAME a$$inline_4 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            RETURN 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    NAME a$$inline_4 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_2 4 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_3 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15b(InlineFunctionsTest.java:246)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_2;JSCompiler_inline_result$$1=function(a$$inline_3){return a$$inline_3+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\nResult: var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_3;JSCompiler_inline_result$$1=function(a$$inline_4){return a$$inline_4+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME JSCompiler_temp_const$$0 1 [source_file: expected0]\n                NAME c 1 [source_file: expected0]\n        BLOCK 2 [source_file: expected0]\n            VAR 3 [source_file: expected0]\n                NAME JSCompiler_inline_result$$1 3 [source_file: expected0]\n            VAR 4 [source_file: expected0]\n                NAME x$$inline_2 4 [source_file: expected0]\n            EXPR_RESULT 5 [source_file: expected0]\n                ASSIGN 5 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$1 5 [source_file: expected0]\n                    FUNCTION  5 [source_file: expected0]\n                        NAME  5 [source_file: expected0]\n                        LP 5 [source_file: expected0]\n                            NAME a$$inline_3 5 [source_file: expected0]\n                        BLOCK 5 [source_file: expected0]\n                            RETURN 5 [source_file: expected0]\n                                ADD 5 [source_file: expected0]\n                                    NAME a$$inline_3 5 [source_file: expected0]\n                                    NUMBER 1.0 5 [source_file: expected0]\n        VAR 6 [source_file: expected0]\n            NAME d 6 [source_file: expected0]\n                ADD 6 [source_file: expected0]\n                    NAME JSCompiler_temp_const$$0 6 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$1 6 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                NAME c 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_3 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                            NAME a$$inline_4 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            RETURN 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    NAME a$$inline_4 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_2 4 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_3 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15b(InlineFunctionsTest.java:246)  test(\"function foo(){var x;return function(a){return a+1}}\" +         \"var b=function(){return c};\" +         \"var d=b()+foo()\",         \"var JSCompiler_temp_const$$0 = c;\\n\" +         \"{\\n\" +         \"var JSCompiler_inline_result$$1;\\n\" +         \"var x$$inline_2;\\n\" +         \"JSCompiler_inline_result$$1 = \" +         \"    function(a$$inline_3){ return a$$inline_3+1 };\\n\" +         \"}\" +         \"var d=JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15d": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions15d",
                "src": "  public void testInlineFunctions15d() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function foo(){var x; return function(a){return a+1}}\" +\n         \"function _x(){ var d=c+foo() }\");\n\n    assumeMinimumCapture = true;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function _x() { \\n\" +\n         \"  var JSCompiler_temp_const$$0 = c;\\n\" +\n         \"  {\\n\" +\n         \"  var JSCompiler_inline_result$$1;\\n\" +\n         \"  var x$$inline_2;\\n\" +\n         \"  JSCompiler_inline_result$$1 = \" +\n         \"      function(a$$inline_3) {return a$$inline_3+1};\\n\" +\n         \"  }\\n\" +\n         \"  var d = JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\\n\" +\n         \"}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: function _x(){var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_2;JSCompiler_inline_result$$1=function(a$$inline_3){return a$$inline_3+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1}\nResult: function _x(){var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_3;JSCompiler_inline_result$$1=function(a$$inline_4){return a$$inline_4+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _x 1 [source_file: expected0]\n            NAME _x 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME JSCompiler_temp_const$$0 2 [source_file: expected0]\n                        NAME c 2 [source_file: expected0]\n                BLOCK 3 [source_file: expected0]\n                    VAR 4 [source_file: expected0]\n                        NAME JSCompiler_inline_result$$1 4 [source_file: expected0]\n                    VAR 5 [source_file: expected0]\n                        NAME x$$inline_2 5 [source_file: expected0]\n                    EXPR_RESULT 6 [source_file: expected0]\n                        ASSIGN 6 [source_file: expected0]\n                            NAME JSCompiler_inline_result$$1 6 [source_file: expected0]\n                            FUNCTION  6 [source_file: expected0]\n                                NAME  6 [source_file: expected0]\n                                LP 6 [source_file: expected0]\n                                    NAME a$$inline_3 6 [source_file: expected0]\n                                BLOCK 6 [source_file: expected0]\n                                    RETURN 6 [source_file: expected0]\n                                        ADD 6 [source_file: expected0]\n                                            NAME a$$inline_3 6 [source_file: expected0]\n                                            NUMBER 1.0 6 [source_file: expected0]\n                VAR 8 [source_file: expected0]\n                    NAME d 8 [source_file: expected0]\n                        ADD 8 [source_file: expected0]\n                            NAME JSCompiler_temp_const$$0 8 [source_file: expected0]\n                            NAME JSCompiler_inline_result$$1 8 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _x 1 [source_file: testcode]\n            NAME _x 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                        NAME c 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME x$$inline_3 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n                            FUNCTION  1 [source_file: testcode]\n                                NAME  1 [source_file: testcode]\n                                LP 1 [source_file: testcode]\n                                    NAME a$$inline_4 1 [source_file: testcode]\n                                BLOCK 1 [source_file: testcode]\n                                    RETURN 1 [source_file: testcode]\n                                        ADD 1 [source_file: testcode]\n                                            NAME a$$inline_4 1 [source_file: testcode]\n                                            NUMBER 1.0 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME d 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                            NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_2 5 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_3 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15d(InlineFunctionsTest.java:296)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: function _x(){var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_2;JSCompiler_inline_result$$1=function(a$$inline_3){return a$$inline_3+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1}\nResult: function _x(){var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_3;JSCompiler_inline_result$$1=function(a$$inline_4){return a$$inline_4+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _x 1 [source_file: expected0]\n            NAME _x 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME JSCompiler_temp_const$$0 2 [source_file: expected0]\n                        NAME c 2 [source_file: expected0]\n                BLOCK 3 [source_file: expected0]\n                    VAR 4 [source_file: expected0]\n                        NAME JSCompiler_inline_result$$1 4 [source_file: expected0]\n                    VAR 5 [source_file: expected0]\n                        NAME x$$inline_2 5 [source_file: expected0]\n                    EXPR_RESULT 6 [source_file: expected0]\n                        ASSIGN 6 [source_file: expected0]\n                            NAME JSCompiler_inline_result$$1 6 [source_file: expected0]\n                            FUNCTION  6 [source_file: expected0]\n                                NAME  6 [source_file: expected0]\n                                LP 6 [source_file: expected0]\n                                    NAME a$$inline_3 6 [source_file: expected0]\n                                BLOCK 6 [source_file: expected0]\n                                    RETURN 6 [source_file: expected0]\n                                        ADD 6 [source_file: expected0]\n                                            NAME a$$inline_3 6 [source_file: expected0]\n                                            NUMBER 1.0 6 [source_file: expected0]\n                VAR 8 [source_file: expected0]\n                    NAME d 8 [source_file: expected0]\n                        ADD 8 [source_file: expected0]\n                            NAME JSCompiler_temp_const$$0 8 [source_file: expected0]\n                            NAME JSCompiler_inline_result$$1 8 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _x 1 [source_file: testcode]\n            NAME _x 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                        NAME c 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME x$$inline_3 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n                            FUNCTION  1 [source_file: testcode]\n                                NAME  1 [source_file: testcode]\n                                LP 1 [source_file: testcode]\n                                    NAME a$$inline_4 1 [source_file: testcode]\n                                BLOCK 1 [source_file: testcode]\n                                    RETURN 1 [source_file: testcode]\n                                        ADD 1 [source_file: testcode]\n                                            NAME a$$inline_4 1 [source_file: testcode]\n                                            NUMBER 1.0 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME d 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                            NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_2 5 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_3 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15d(InlineFunctionsTest.java:296)  test(\"function foo(){var x; return function(a){return a+1}}\" +         \"var b=function(){return c};\" +         \"function _x(){ var d=b()+foo() }\",         \"function _x() { \\n\" +         \"  var JSCompiler_temp_const$$0 = c;\\n\" +         \"  {\\n\" +         \"  var JSCompiler_inline_result$$1;\\n\" +         \"  var x$$inline_2;\\n\" +         \"  JSCompiler_inline_result$$1 = \" +         \"      function(a$$inline_3) {return a$$inline_3+1};\\n\" +         \"  }\\n\" +         \"  var d = JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\\n\" +         \"}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions16a": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions16a",
                "src": "  public void testInlineFunctions16a() {\n    assumeMinimumCapture = false;\n\n    testSame(\"function foo(b){return window.bar(function(){c(b)})}\" +\n         \"var d=foo(e)\");\n\n    assumeMinimumCapture = true;\n\n    test(\n        \"function foo(b){return window.bar(function(){c(b)})}\" +\n        \"var d=foo(e)\",\n        \"var d;{var b$$inline_0=e;\" +\n        \"d=window.bar(function(){c(b$$inline_0)})}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var d;var b$$inline_0=e;d=window.bar(function(){c(b$$inline_0)})\nResult: var d;var b$$inline_1=e;d=window.bar(function(){c(b$$inline_1)})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME d 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME b$$inline_0 1 [source_file: expected0]\n                    NAME e 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME d 1 [source_file: expected0]\n                    CALL 1 [source_file: expected0]\n                        GETPROP 1 [source_file: expected0]\n                            NAME window 1 [source_file: expected0]\n                            STRING bar 1 [source_file: expected0]\n                        FUNCTION  1 [source_file: expected0]\n                            NAME  1 [source_file: expected0]\n                            LP 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                                EXPR_RESULT 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME c 1 [source_file: expected0]\n                                        NAME b$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME b$$inline_1 1 [source_file: testcode]\n                    NAME e 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME d 1 [source_file: testcode]\n                    CALL 1 [source_file: testcode]\n                        GETPROP 1 [source_file: testcode]\n                            NAME window 1 [source_file: testcode]\n                            STRING bar 1 [source_file: testcode]\n                        FUNCTION  1 [source_file: testcode]\n                            NAME  1 [source_file: testcode]\n                            LP 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                                EXPR_RESULT 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME c 1 [source_file: testcode]\n                                        NAME b$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME b$$inline_0 1 [source_file: expected0]\n    NAME e 1 [source_file: expected0]\n\n\nSubtree2: NAME b$$inline_1 1 [source_file: testcode]\n    NAME e 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions16a(InlineFunctionsTest.java:320)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var d;var b$$inline_0=e;d=window.bar(function(){c(b$$inline_0)})\nResult: var d;var b$$inline_1=e;d=window.bar(function(){c(b$$inline_1)})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME d 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME b$$inline_0 1 [source_file: expected0]\n                    NAME e 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME d 1 [source_file: expected0]\n                    CALL 1 [source_file: expected0]\n                        GETPROP 1 [source_file: expected0]\n                            NAME window 1 [source_file: expected0]\n                            STRING bar 1 [source_file: expected0]\n                        FUNCTION  1 [source_file: expected0]\n                            NAME  1 [source_file: expected0]\n                            LP 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                                EXPR_RESULT 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME c 1 [source_file: expected0]\n                                        NAME b$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME b$$inline_1 1 [source_file: testcode]\n                    NAME e 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME d 1 [source_file: testcode]\n                    CALL 1 [source_file: testcode]\n                        GETPROP 1 [source_file: testcode]\n                            NAME window 1 [source_file: testcode]\n                            STRING bar 1 [source_file: testcode]\n                        FUNCTION  1 [source_file: testcode]\n                            NAME  1 [source_file: testcode]\n                            LP 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                                EXPR_RESULT 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME c 1 [source_file: testcode]\n                                        NAME b$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME b$$inline_0 1 [source_file: expected0]\n    NAME e 1 [source_file: expected0]\n\n\nSubtree2: NAME b$$inline_1 1 [source_file: testcode]\n    NAME e 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions16a(InlineFunctionsTest.java:320)  test(        \"function foo(b){return window.bar(function(){c(b)})}\" +        \"var d=foo(e)\",        \"var d;{var b$$inline_0=e;\" +        \"d=window.bar(function(){c(b$$inline_0)})}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testBug4944818",
                "src": "  public void testBug4944818() {\n    test(\n        \"var getDomServices_ = function(self) {\\n\" +\n        \"  if (!self.domServices_) {\\n\" +\n        \"    self.domServices_ = goog$component$DomServices.get(\" +\n        \"        self.appContext_);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  return self.domServices_;\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"var getOwnerWin_ = function(self) {\\n\" +\n        \"  return getDomServices_(self).getDomHelper().getWindow();\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"HangoutStarter.prototype.launchHangout = function() {\\n\" +\n        \"  var self = a.b;\\n\" +\n        \"  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\\n\" +\n        \"};\",\n        \"HangoutStarter.prototype.launchHangout = function() { \" +\n        \"  var self$$2 = a.b;\" +\n        \"  var JSCompiler_temp_const$$0 = goog.Uri;\" +\n        \"  {\" +\n        \"  var JSCompiler_inline_result$$1;\" +\n        \"  var self$$inline_2 = self$$2;\" +\n        \"  if (!self$$inline_2.domServices_) {\" +\n        \"    self$$inline_2.domServices_ = goog$component$DomServices.get(\" +\n        \"        self$$inline_2.appContext_);\" +\n        \"  }\" +\n        \"  JSCompiler_inline_result$$1=self$$inline_2.domServices_;\" +\n        \"  }\" +\n        \"  var myUrl = new JSCompiler_temp_const$$0(\" +\n        \"      JSCompiler_inline_result$$1.getDomHelper().\" +\n        \"          getWindow().location.href)\" +\n        \"}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: HangoutStarter.prototype.launchHangout=function(){var self$$2=a.b;var JSCompiler_temp_const$$0=goog.Uri;var JSCompiler_inline_result$$1;var self$$inline_2=self$$2;if(!self$$inline_2.domServices_)self$$inline_2.domServices_=goog$component$DomServices.get(self$$inline_2.appContext_);JSCompiler_inline_result$$1=self$$inline_2.domServices_;var myUrl=new JSCompiler_temp_const$$0(JSCompiler_inline_result$$1.getDomHelper().getWindow().location.href)}\nResult: HangoutStarter.prototype.launchHangout=function(){var self$$2=a.b;var JSCompiler_temp_const$$0=goog.Uri;var JSCompiler_inline_result$$1;var self$$inline_3=self$$2;if(!self$$inline_3.domServices_)self$$inline_3.domServices_=goog$component$DomServices.get(self$$inline_3.appContext_);JSCompiler_inline_result$$1=self$$inline_3.domServices_;var myUrl=new JSCompiler_temp_const$$0(JSCompiler_inline_result$$1.getDomHelper().getWindow().location.href)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    GETPROP 1 [source_file: expected0]\n                        NAME HangoutStarter 1 [source_file: expected0]\n                        STRING prototype 1 [source_file: expected0]\n                    STRING launchHangout 1 [source_file: expected0]\n                FUNCTION  1 [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    LP 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME self$$2 1 [source_file: expected0]\n                                GETPROP 1 [source_file: expected0]\n                                    NAME a 1 [source_file: expected0]\n                                    STRING b 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME JSCompiler_temp_const$$0 1 [source_file: expected0]\n                                GETPROP 1 [source_file: expected0]\n                                    NAME goog 1 [source_file: expected0]\n                                    STRING Uri 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            VAR 1 [source_file: expected0]\n                                NAME JSCompiler_inline_result$$1 1 [source_file: expected0]\n                            VAR 1 [source_file: expected0]\n                                NAME self$$inline_2 1 [source_file: expected0]\n                                    NAME self$$2 1 [source_file: expected0]\n                            IF 1 [source_file: expected0]\n                                NOT 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME self$$inline_2 1 [source_file: expected0]\n                                        STRING domServices_ 1 [source_file: expected0]\n                                BLOCK 1 [source_file: expected0]\n                                    EXPR_RESULT 1 [source_file: expected0]\n                                        ASSIGN 1 [source_file: expected0]\n                                            GETPROP 1 [source_file: expected0]\n                                                NAME self$$inline_2 1 [source_file: expected0]\n                                                STRING domServices_ 1 [source_file: expected0]\n                                            CALL 1 [source_file: expected0]\n                                                GETPROP 1 [source_file: expected0]\n                                                    NAME goog$component$DomServices 1 [source_file: expected0]\n                                                    STRING get 1 [source_file: expected0]\n                                                GETPROP 1 [source_file: expected0]\n                                                    NAME self$$inline_2 1 [source_file: expected0]\n                                                    STRING appContext_ 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME JSCompiler_inline_result$$1 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME self$$inline_2 1 [source_file: expected0]\n                                        STRING domServices_ 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME myUrl 1 [source_file: expected0]\n                                NEW 1 [source_file: expected0]\n                                    NAME JSCompiler_temp_const$$0 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        GETPROP 1 [source_file: expected0]\n                                            CALL 1 [source_file: expected0]\n                                                GETPROP 1 [source_file: expected0]\n                                                    CALL 1 [source_file: expected0]\n                                                        GETPROP 1 [source_file: expected0]\n                                                            NAME JSCompiler_inline_result$$1 1 [source_file: expected0]\n                                                            STRING getDomHelper 1 [source_file: expected0]\n                                                    STRING getWindow 1 [source_file: expected0]\n                                            STRING location 1 [source_file: expected0]\n                                        STRING href 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        EXPR_RESULT 13 [source_file: testcode]\n            ASSIGN 13 [source_file: testcode]\n                GETPROP 13 [source_file: testcode]\n                    GETPROP 13 [source_file: testcode]\n                        NAME HangoutStarter 13 [source_file: testcode]\n                        STRING prototype 13 [source_file: testcode]\n                    STRING launchHangout 13 [source_file: testcode]\n                FUNCTION  13 [source_file: testcode]\n                    NAME  13 [source_file: testcode]\n                    LP 13 [source_file: testcode]\n                    BLOCK 13 [source_file: testcode]\n                        VAR 14 [source_file: testcode]\n                            NAME self$$2 14 [source_file: testcode]\n                                GETPROP 14 [source_file: testcode]\n                                    NAME a 14 [source_file: testcode]\n                                    STRING b 14 [source_file: testcode]\n                        VAR 15 [source_file: testcode]\n                            NAME JSCompiler_temp_const$$0 15 [source_file: testcode]\n                                GETPROP 15 [source_file: testcode]\n                                    NAME goog 15 [source_file: testcode]\n                                    STRING Uri 15 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            VAR 10 [source_file: testcode]\n                                NAME JSCompiler_inline_result$$1 10 [source_file: testcode]\n                            VAR 15 [source_file: testcode]\n                                NAME self$$inline_3 15 [source_file: testcode]\n                                    NAME self$$2 15 [source_file: testcode]\n                            IF 2 [source_file: testcode]\n                                NOT 2 [source_file: testcode]\n                                    GETPROP 2 [source_file: testcode]\n                                        NAME self$$inline_3 2 [source_file: testcode]\n                                        STRING domServices_ 2 [source_file: testcode]\n                                BLOCK 2 [source_file: testcode]\n                                    EXPR_RESULT 3 [source_file: testcode]\n                                        ASSIGN 3 [source_file: testcode]\n                                            GETPROP 3 [source_file: testcode]\n                                                NAME self$$inline_3 3 [source_file: testcode]\n                                                STRING domServices_ 3 [source_file: testcode]\n                                            CALL 3 [source_file: testcode]\n                                                GETPROP 3 [source_file: testcode]\n                                                    NAME goog$component$DomServices 3 [source_file: testcode]\n                                                    STRING get 3 [source_file: testcode]\n                                                GETPROP 3 [source_file: testcode]\n                                                    NAME self$$inline_3 3 [source_file: testcode]\n                                                    STRING appContext_ 3 [source_file: testcode]\n                            EXPR_RESULT 6 [source_file: testcode]\n                                ASSIGN 6 [source_file: testcode]\n                                    NAME JSCompiler_inline_result$$1 6 [source_file: testcode]\n                                    GETPROP 6 [source_file: testcode]\n                                        NAME self$$inline_3 6 [source_file: testcode]\n                                        STRING domServices_ 6 [source_file: testcode]\n                        VAR 15 [source_file: testcode]\n                            NAME myUrl 15 [source_file: testcode]\n                                NEW 15 [source_file: testcode]\n                                    NAME JSCompiler_temp_const$$0 15 [source_file: testcode]\n                                    GETPROP 15 [source_file: testcode]\n                                        GETPROP 15 [source_file: testcode]\n                                            CALL 10 [source_file: testcode]\n                                                GETPROP 10 [source_file: testcode]\n                                                    CALL 10 [source_file: testcode]\n                                                        GETPROP 10 [source_file: testcode]\n                                                            NAME JSCompiler_inline_result$$1 10 [source_file: testcode]\n                                                            STRING getDomHelper 10 [source_file: testcode]\n                                                    STRING getWindow 10 [source_file: testcode]\n                                            STRING location 15 [source_file: testcode]\n                                        STRING href 15 [source_file: testcode]\n\n\nSubtree1: NAME self$$inline_2 1 [source_file: expected0]\n    NAME self$$2 1 [source_file: expected0]\n\n\nSubtree2: NAME self$$inline_3 15 [source_file: testcode]\n    NAME self$$2 15 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testBug4944818(InlineFunctionsTest.java:2077)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: HangoutStarter.prototype.launchHangout=function(){var self$$2=a.b;var JSCompiler_temp_const$$0=goog.Uri;var JSCompiler_inline_result$$1;var self$$inline_2=self$$2;if(!self$$inline_2.domServices_)self$$inline_2.domServices_=goog$component$DomServices.get(self$$inline_2.appContext_);JSCompiler_inline_result$$1=self$$inline_2.domServices_;var myUrl=new JSCompiler_temp_const$$0(JSCompiler_inline_result$$1.getDomHelper().getWindow().location.href)}\nResult: HangoutStarter.prototype.launchHangout=function(){var self$$2=a.b;var JSCompiler_temp_const$$0=goog.Uri;var JSCompiler_inline_result$$1;var self$$inline_3=self$$2;if(!self$$inline_3.domServices_)self$$inline_3.domServices_=goog$component$DomServices.get(self$$inline_3.appContext_);JSCompiler_inline_result$$1=self$$inline_3.domServices_;var myUrl=new JSCompiler_temp_const$$0(JSCompiler_inline_result$$1.getDomHelper().getWindow().location.href)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    GETPROP 1 [source_file: expected0]\n                        NAME HangoutStarter 1 [source_file: expected0]\n                        STRING prototype 1 [source_file: expected0]\n                    STRING launchHangout 1 [source_file: expected0]\n                FUNCTION  1 [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    LP 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME self$$2 1 [source_file: expected0]\n                                GETPROP 1 [source_file: expected0]\n                                    NAME a 1 [source_file: expected0]\n                                    STRING b 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME JSCompiler_temp_const$$0 1 [source_file: expected0]\n                                GETPROP 1 [source_file: expected0]\n                                    NAME goog 1 [source_file: expected0]\n                                    STRING Uri 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            VAR 1 [source_file: expected0]\n                                NAME JSCompiler_inline_result$$1 1 [source_file: expected0]\n                            VAR 1 [source_file: expected0]\n                                NAME self$$inline_2 1 [source_file: expected0]\n                                    NAME self$$2 1 [source_file: expected0]\n                            IF 1 [source_file: expected0]\n                                NOT 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME self$$inline_2 1 [source_file: expected0]\n                                        STRING domServices_ 1 [source_file: expected0]\n                                BLOCK 1 [source_file: expected0]\n                                    EXPR_RESULT 1 [source_file: expected0]\n                                        ASSIGN 1 [source_file: expected0]\n                                            GETPROP 1 [source_file: expected0]\n                                                NAME self$$inline_2 1 [source_file: expected0]\n                                                STRING domServices_ 1 [source_file: expected0]\n                                            CALL 1 [source_file: expected0]\n                                                GETPROP 1 [source_file: expected0]\n                                                    NAME goog$component$DomServices 1 [source_file: expected0]\n                                                    STRING get 1 [source_file: expected0]\n                                                GETPROP 1 [source_file: expected0]\n                                                    NAME self$$inline_2 1 [source_file: expected0]\n                                                    STRING appContext_ 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME JSCompiler_inline_result$$1 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME self$$inline_2 1 [source_file: expected0]\n                                        STRING domServices_ 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME myUrl 1 [source_file: expected0]\n                                NEW 1 [source_file: expected0]\n                                    NAME JSCompiler_temp_const$$0 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        GETPROP 1 [source_file: expected0]\n                                            CALL 1 [source_file: expected0]\n                                                GETPROP 1 [source_file: expected0]\n                                                    CALL 1 [source_file: expected0]\n                                                        GETPROP 1 [source_file: expected0]\n                                                            NAME JSCompiler_inline_result$$1 1 [source_file: expected0]\n                                                            STRING getDomHelper 1 [source_file: expected0]\n                                                    STRING getWindow 1 [source_file: expected0]\n                                            STRING location 1 [source_file: expected0]\n                                        STRING href 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        EXPR_RESULT 13 [source_file: testcode]\n            ASSIGN 13 [source_file: testcode]\n                GETPROP 13 [source_file: testcode]\n                    GETPROP 13 [source_file: testcode]\n                        NAME HangoutStarter 13 [source_file: testcode]\n                        STRING prototype 13 [source_file: testcode]\n                    STRING launchHangout 13 [source_file: testcode]\n                FUNCTION  13 [source_file: testcode]\n                    NAME  13 [source_file: testcode]\n                    LP 13 [source_file: testcode]\n                    BLOCK 13 [source_file: testcode]\n                        VAR 14 [source_file: testcode]\n                            NAME self$$2 14 [source_file: testcode]\n                                GETPROP 14 [source_file: testcode]\n                                    NAME a 14 [source_file: testcode]\n                                    STRING b 14 [source_file: testcode]\n                        VAR 15 [source_file: testcode]\n                            NAME JSCompiler_temp_const$$0 15 [source_file: testcode]\n                                GETPROP 15 [source_file: testcode]\n                                    NAME goog 15 [source_file: testcode]\n                                    STRING Uri 15 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            VAR 10 [source_file: testcode]\n                                NAME JSCompiler_inline_result$$1 10 [source_file: testcode]\n                            VAR 15 [source_file: testcode]\n                                NAME self$$inline_3 15 [source_file: testcode]\n                                    NAME self$$2 15 [source_file: testcode]\n                            IF 2 [source_file: testcode]\n                                NOT 2 [source_file: testcode]\n                                    GETPROP 2 [source_file: testcode]\n                                        NAME self$$inline_3 2 [source_file: testcode]\n                                        STRING domServices_ 2 [source_file: testcode]\n                                BLOCK 2 [source_file: testcode]\n                                    EXPR_RESULT 3 [source_file: testcode]\n                                        ASSIGN 3 [source_file: testcode]\n                                            GETPROP 3 [source_file: testcode]\n                                                NAME self$$inline_3 3 [source_file: testcode]\n                                                STRING domServices_ 3 [source_file: testcode]\n                                            CALL 3 [source_file: testcode]\n                                                GETPROP 3 [source_file: testcode]\n                                                    NAME goog$component$DomServices 3 [source_file: testcode]\n                                                    STRING get 3 [source_file: testcode]\n                                                GETPROP 3 [source_file: testcode]\n                                                    NAME self$$inline_3 3 [source_file: testcode]\n                                                    STRING appContext_ 3 [source_file: testcode]\n                            EXPR_RESULT 6 [source_file: testcode]\n                                ASSIGN 6 [source_file: testcode]\n                                    NAME JSCompiler_inline_result$$1 6 [source_file: testcode]\n                                    GETPROP 6 [source_file: testcode]\n                                        NAME self$$inline_3 6 [source_file: testcode]\n                                        STRING domServices_ 6 [source_file: testcode]\n                        VAR 15 [source_file: testcode]\n                            NAME myUrl 15 [source_file: testcode]\n                                NEW 15 [source_file: testcode]\n                                    NAME JSCompiler_temp_const$$0 15 [source_file: testcode]\n                                    GETPROP 15 [source_file: testcode]\n                                        GETPROP 15 [source_file: testcode]\n                                            CALL 10 [source_file: testcode]\n                                                GETPROP 10 [source_file: testcode]\n                                                    CALL 10 [source_file: testcode]\n                                                        GETPROP 10 [source_file: testcode]\n                                                            NAME JSCompiler_inline_result$$1 10 [source_file: testcode]\n                                                            STRING getDomHelper 10 [source_file: testcode]\n                                                    STRING getWindow 10 [source_file: testcode]\n                                            STRING location 15 [source_file: testcode]\n                                        STRING href 15 [source_file: testcode]\n\n\nSubtree1: NAME self$$inline_2 1 [source_file: expected0]\n    NAME self$$2 1 [source_file: expected0]\n\n\nSubtree2: NAME self$$inline_3 15 [source_file: testcode]\n    NAME self$$2 15 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testBug4944818(InlineFunctionsTest.java:2077)  test(        \"var getDomServices_ = function(self) {\\n\" +        \"  if (!self.domServices_) {\\n\" +        \"    self.domServices_ = goog$component$DomServices.get(\" +        \"        self.appContext_);\\n\" +        \"  }\\n\" +        \"\\n\" +        \"  return self.domServices_;\\n\" +        \"};\\n\" +        \"\\n\" +        \"var getOwnerWin_ = function(self) {\\n\" +        \"  return getDomServices_(self).getDomHelper().getWindow();\\n\" +        \"};\\n\" +        \"\\n\" +        \"HangoutStarter.prototype.launchHangout = function() {\\n\" +        \"  var self = a.b;\\n\" +        \"  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\\n\" +        \"};\",        \"HangoutStarter.prototype.launchHangout = function() { \" +        \"  var self$$2 = a.b;\" +        \"  var JSCompiler_temp_const$$0 = goog.Uri;\" +        \"  {\" +        \"  var JSCompiler_inline_result$$1;\" +        \"  var self$$inline_2 = self$$2;\" +        \"  if (!self$$inline_2.domServices_) {\" +        \"    self$$inline_2.domServices_ = goog$component$DomServices.get(\" +        \"        self$$inline_2.appContext_);\" +        \"  }\" +        \"  JSCompiler_inline_result$$1=self$$inline_2.domServices_;\" +        \"  }\" +        \"  var myUrl = new JSCompiler_temp_const$$0(\" +        \"      JSCompiler_inline_result$$1.getDomHelper().\" +        \"          getWindow().location.href)\" +        \"}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexSample": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexSample",
                "src": "  public void testComplexSample() {\n    String result = \"\" +\n      \"{{\" +\n      \"var styleSheet$$inline_2=null;\" +\n      \"if(goog$userAgent$IE)\" +\n        \"styleSheet$$inline_2=0;\" +\n      \"else \" +\n        \"var head$$inline_3=0;\" +\n      \"{\" +\n        \"var element$$inline_4=\" +\n            \"styleSheet$$inline_2;\" +\n        \"var stylesString$$inline_5=a;\" +\n        \"if(goog$userAgent$IE)\" +\n          \"element$$inline_4.cssText=\" +\n              \"stylesString$$inline_5;\" +\n        \"else \" +\n        \"{\" +\n          \"var propToSet$$inline_6=\" +\n              \"\\\"innerText\\\";\" +\n          \"element$$inline_4[\" +\n              \"propToSet$$inline_6]=\" +\n                  \"stylesString$$inline_5\" +\n        \"}\" +\n      \"}\" +\n      \"styleSheet$$inline_2\" +\n      \"}}\";\n\n    test(\"var foo = function(stylesString, opt_element) { \" +\n        \"var styleSheet = null;\" +\n        \"if (goog$userAgent$IE)\" +\n          \"styleSheet = 0;\" +\n        \"else \" +\n          \"var head = 0;\" +\n        \"\" +\n        \"goo$zoo(styleSheet, stylesString);\" +\n        \"return styleSheet;\" +\n     \" };\\n \" +\n\n     \"var goo$zoo = function(element, stylesString) {\" +\n        \"if (goog$userAgent$IE)\" +\n          \"element.cssText = stylesString;\" +\n        \"else {\" +\n          \"var propToSet = 'innerText';\" +\n          \"element[propToSet] = stylesString;\" +\n        \"}\" +\n      \"};\" +\n      \"(function(){foo(a,b);})();\",\n     result);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var styleSheet$$inline_2=null;if(goog$userAgent$IE)styleSheet$$inline_2=0;else var head$$inline_3=0;var element$$inline_4=styleSheet$$inline_2;var stylesString$$inline_5=a;if(goog$userAgent$IE)element$$inline_4.cssText=stylesString$$inline_5;else{var propToSet$$inline_6=\"innerText\";element$$inline_4[propToSet$$inline_6]=stylesString$$inline_5}styleSheet$$inline_2\nResult: var styleSheet$$inline_9=null;if(goog$userAgent$IE)styleSheet$$inline_9=0;else var head$$inline_10=0;var element$$inline_11=styleSheet$$inline_9;var stylesString$$inline_12=a;if(goog$userAgent$IE)element$$inline_11.cssText=stylesString$$inline_12;else{var propToSet$$inline_13=\"innerText\";element$$inline_11[propToSet$$inline_13]=stylesString$$inline_12}styleSheet$$inline_9\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME styleSheet$$inline_2 1 [source_file: expected0]\n                        NULL 1 [source_file: expected0]\n                IF 1 [source_file: expected0]\n                    NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME styleSheet$$inline_2 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME head$$inline_3 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME element$$inline_4 1 [source_file: expected0]\n                            NAME styleSheet$$inline_2 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME stylesString$$inline_5 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME element$$inline_4 1 [source_file: expected0]\n                                        STRING cssText 1 [source_file: expected0]\n                                    NAME stylesString$$inline_5 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            VAR 1 [source_file: expected0]\n                                NAME propToSet$$inline_6 1 [source_file: expected0]\n                                    STRING innerText 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    GETELEM 1 [source_file: expected0]\n                                        NAME element$$inline_4 1 [source_file: expected0]\n                                        NAME propToSet$$inline_6 1 [source_file: expected0]\n                                    NAME stylesString$$inline_5 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    NAME styleSheet$$inline_2 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 2 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME styleSheet$$inline_9 1 [source_file: testcode]\n                        NULL 1 [source_file: testcode]\n                IF 1 [source_file: testcode]\n                    NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        EXPR_RESULT 1 [source_file: testcode]\n                            ASSIGN 1 [source_file: testcode]\n                                NAME styleSheet$$inline_9 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        VAR 1 [source_file: testcode]\n                            NAME head$$inline_10 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n                BLOCK 2 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME element$$inline_11 1 [source_file: testcode]\n                            NAME styleSheet$$inline_9 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME stylesString$$inline_12 1 [source_file: testcode]\n                            NAME a 2 [source_file: testcode]\n                    IF 2 [source_file: testcode]\n                        NAME goog$userAgent$IE 2 [is_constant_name: 1] [source_file: testcode]\n                        BLOCK 2 [source_file: testcode]\n                            EXPR_RESULT 2 [source_file: testcode]\n                                ASSIGN 2 [source_file: testcode]\n                                    GETPROP 2 [source_file: testcode]\n                                        NAME element$$inline_11 2 [source_file: testcode]\n                                        STRING cssText 2 [source_file: testcode]\n                                    NAME stylesString$$inline_12 2 [source_file: testcode]\n                        BLOCK 2 [source_file: testcode]\n                            VAR 2 [source_file: testcode]\n                                NAME propToSet$$inline_13 2 [source_file: testcode]\n                                    STRING innerText 2 [source_file: testcode]\n                            EXPR_RESULT 2 [source_file: testcode]\n                                ASSIGN 2 [source_file: testcode]\n                                    GETELEM 2 [source_file: testcode]\n                                        NAME element$$inline_11 2 [source_file: testcode]\n                                        NAME propToSet$$inline_13 2 [source_file: testcode]\n                                    NAME stylesString$$inline_12 2 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    NAME styleSheet$$inline_9 1 [source_file: testcode]\n\n\nSubtree1: NAME styleSheet$$inline_2 1 [source_file: expected0]\n    NULL 1 [source_file: expected0]\n\n\nSubtree2: NAME styleSheet$$inline_9 1 [source_file: testcode]\n    NULL 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexSample(InlineFunctionsTest.java:1418)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var styleSheet$$inline_2=null;if(goog$userAgent$IE)styleSheet$$inline_2=0;else var head$$inline_3=0;var element$$inline_4=styleSheet$$inline_2;var stylesString$$inline_5=a;if(goog$userAgent$IE)element$$inline_4.cssText=stylesString$$inline_5;else{var propToSet$$inline_6=\"innerText\";element$$inline_4[propToSet$$inline_6]=stylesString$$inline_5}styleSheet$$inline_2\nResult: var styleSheet$$inline_9=null;if(goog$userAgent$IE)styleSheet$$inline_9=0;else var head$$inline_10=0;var element$$inline_11=styleSheet$$inline_9;var stylesString$$inline_12=a;if(goog$userAgent$IE)element$$inline_11.cssText=stylesString$$inline_12;else{var propToSet$$inline_13=\"innerText\";element$$inline_11[propToSet$$inline_13]=stylesString$$inline_12}styleSheet$$inline_9\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME styleSheet$$inline_2 1 [source_file: expected0]\n                        NULL 1 [source_file: expected0]\n                IF 1 [source_file: expected0]\n                    NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME styleSheet$$inline_2 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME head$$inline_3 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME element$$inline_4 1 [source_file: expected0]\n                            NAME styleSheet$$inline_2 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME stylesString$$inline_5 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME element$$inline_4 1 [source_file: expected0]\n                                        STRING cssText 1 [source_file: expected0]\n                                    NAME stylesString$$inline_5 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            VAR 1 [source_file: expected0]\n                                NAME propToSet$$inline_6 1 [source_file: expected0]\n                                    STRING innerText 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    GETELEM 1 [source_file: expected0]\n                                        NAME element$$inline_4 1 [source_file: expected0]\n                                        NAME propToSet$$inline_6 1 [source_file: expected0]\n                                    NAME stylesString$$inline_5 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    NAME styleSheet$$inline_2 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 2 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME styleSheet$$inline_9 1 [source_file: testcode]\n                        NULL 1 [source_file: testcode]\n                IF 1 [source_file: testcode]\n                    NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        EXPR_RESULT 1 [source_file: testcode]\n                            ASSIGN 1 [source_file: testcode]\n                                NAME styleSheet$$inline_9 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        VAR 1 [source_file: testcode]\n                            NAME head$$inline_10 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n                BLOCK 2 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME element$$inline_11 1 [source_file: testcode]\n                            NAME styleSheet$$inline_9 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME stylesString$$inline_12 1 [source_file: testcode]\n                            NAME a 2 [source_file: testcode]\n                    IF 2 [source_file: testcode]\n                        NAME goog$userAgent$IE 2 [is_constant_name: 1] [source_file: testcode]\n                        BLOCK 2 [source_file: testcode]\n                            EXPR_RESULT 2 [source_file: testcode]\n                                ASSIGN 2 [source_file: testcode]\n                                    GETPROP 2 [source_file: testcode]\n                                        NAME element$$inline_11 2 [source_file: testcode]\n                                        STRING cssText 2 [source_file: testcode]\n                                    NAME stylesString$$inline_12 2 [source_file: testcode]\n                        BLOCK 2 [source_file: testcode]\n                            VAR 2 [source_file: testcode]\n                                NAME propToSet$$inline_13 2 [source_file: testcode]\n                                    STRING innerText 2 [source_file: testcode]\n                            EXPR_RESULT 2 [source_file: testcode]\n                                ASSIGN 2 [source_file: testcode]\n                                    GETELEM 2 [source_file: testcode]\n                                        NAME element$$inline_11 2 [source_file: testcode]\n                                        NAME propToSet$$inline_13 2 [source_file: testcode]\n                                    NAME stylesString$$inline_12 2 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    NAME styleSheet$$inline_9 1 [source_file: testcode]\n\n\nSubtree1: NAME styleSheet$$inline_2 1 [source_file: expected0]\n    NULL 1 [source_file: expected0]\n\n\nSubtree2: NAME styleSheet$$inline_9 1 [source_file: testcode]\n    NULL 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexSample(InlineFunctionsTest.java:1418)  test(\"var foo = function(stylesString, opt_element) { \" +        \"var styleSheet = null;\" +        \"if (goog$userAgent$IE)\" +          \"styleSheet = 0;\" +        \"else \" +          \"var head = 0;\" +        \"\" +        \"goo$zoo(styleSheet, stylesString);\" +        \"return styleSheet;\" +     \" };\\n \" +     \"var goo$zoo = function(element, stylesString) {\" +        \"if (goog$userAgent$IE)\" +          \"element.cssText = stylesString;\" +        \"else {\" +          \"var propToSet = 'innerText';\" +          \"element[propToSet] = stylesString;\" +        \"}\" +      \"};\" +      \"(function(){foo(a,b);})();\",     result);"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified1": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified1",
                "src": "  public void testNoInlineIfParametersModified1() {\n    // Assignment\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=undefined;x$$inline_0=1\nResult: var x$$inline_1=undefined;x$$inline_1=1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME undefined 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME undefined 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME undefined 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME undefined 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified1(InlineFunctionsTest.java:549)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=undefined;x$$inline_0=1\nResult: var x$$inline_1=undefined;x$$inline_1=1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME undefined 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME undefined 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME undefined 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME undefined 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified1(InlineFunctionsTest.java:549)  test(\"function f(x){return x=1}f(undefined)\",         \"{var x$$inline_0=undefined;\" +         \"x$$inline_0=1}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified2": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified2",
                "src": "  public void testNoInlineIfParametersModified2() {\n    test(\"function f(x){return (x)=1;}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0=1}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=2;x$$inline_0=1\nResult: var x$$inline_1=2;x$$inline_1=1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [parenthesized: true] [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified2(InlineFunctionsTest.java:555)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=2;x$$inline_0=1\nResult: var x$$inline_1=2;x$$inline_1=1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [parenthesized: true] [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified2(InlineFunctionsTest.java:555)  test(\"function f(x){return (x)=1;}f(2)\",         \"{var x$$inline_0=2;\" +         \"x$$inline_0=1}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified3",
                "src": "  public void testNoInlineIfParametersModified3() {\n    // Assignment variant.\n    test(\"function f(x){return x*=2}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0*=2}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=2;x$$inline_0*=2\nResult: var x$$inline_1=2;x$$inline_1*=2\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN_MUL 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN_MUL 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified3(InlineFunctionsTest.java:562)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=2;x$$inline_0*=2\nResult: var x$$inline_1=2;x$$inline_1*=2\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN_MUL 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN_MUL 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified3(InlineFunctionsTest.java:562)  test(\"function f(x){return x*=2}f(2)\",         \"{var x$$inline_0=2;\" +         \"x$$inline_0*=2}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified4": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified4",
                "src": "  public void testNoInlineIfParametersModified4() {\n    // Assignment in if.\n    test(\"function f(x){return x?(x=2):0}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0?(\" +\n         \"x$$inline_0=2):0}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=2;x$$inline_0?x$$inline_0=2:0\nResult: var x$$inline_1=2;x$$inline_1?x$$inline_1=2:0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                HOOK 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    ASSIGN 1 [parenthesized: true] [source_file: expected0]\n                        NAME x$$inline_0 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                HOOK 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    ASSIGN 1 [parenthesized: true] [source_file: testcode]\n                        NAME x$$inline_1 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified4(InlineFunctionsTest.java:569)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=2;x$$inline_0?x$$inline_0=2:0\nResult: var x$$inline_1=2;x$$inline_1?x$$inline_1=2:0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                HOOK 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    ASSIGN 1 [parenthesized: true] [source_file: expected0]\n                        NAME x$$inline_0 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                HOOK 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    ASSIGN 1 [parenthesized: true] [source_file: testcode]\n                        NAME x$$inline_1 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified4(InlineFunctionsTest.java:569)  test(\"function f(x){return x?(x=2):0}f(2)\",         \"{var x$$inline_0=2;\" +         \"x$$inline_0?(\" +         \"x$$inline_0=2):0}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified5": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified5",
                "src": "  public void testNoInlineIfParametersModified5() {\n    // Assignment in if, multiple params\n    test(\"function f(x,y){return x?(y=2):0}f(2,undefined)\",\n         \"{var y$$inline_1=undefined;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var y$$inline_1=undefined;2?y$$inline_1=2:0\nResult: var y$$inline_3=undefined;2?y$$inline_3=2:0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME y$$inline_1 1 [source_file: expected0]\n                    NAME undefined 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                HOOK 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n                    ASSIGN 1 [parenthesized: true] [source_file: expected0]\n                        NAME y$$inline_1 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME y$$inline_3 1 [source_file: testcode]\n                    NAME undefined 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                HOOK 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n                    ASSIGN 1 [parenthesized: true] [source_file: testcode]\n                        NAME y$$inline_3 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME y$$inline_1 1 [source_file: expected0]\n    NAME undefined 1 [source_file: expected0]\n\n\nSubtree2: NAME y$$inline_3 1 [source_file: testcode]\n    NAME undefined 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified5(InlineFunctionsTest.java:577)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var y$$inline_1=undefined;2?y$$inline_1=2:0\nResult: var y$$inline_3=undefined;2?y$$inline_3=2:0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME y$$inline_1 1 [source_file: expected0]\n                    NAME undefined 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                HOOK 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n                    ASSIGN 1 [parenthesized: true] [source_file: expected0]\n                        NAME y$$inline_1 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME y$$inline_3 1 [source_file: testcode]\n                    NAME undefined 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                HOOK 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n                    ASSIGN 1 [parenthesized: true] [source_file: testcode]\n                        NAME y$$inline_3 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME y$$inline_1 1 [source_file: expected0]\n    NAME undefined 1 [source_file: expected0]\n\n\nSubtree2: NAME y$$inline_3 1 [source_file: testcode]\n    NAME undefined 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified5(InlineFunctionsTest.java:577)  test(\"function f(x,y){return x?(y=2):0}f(2,undefined)\",         \"{var y$$inline_1=undefined;2?(\" +         \"y$$inline_1=2):0}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified6": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified6",
                "src": "  public void testNoInlineIfParametersModified6() {\n    test(\"function f(x,y){return x?(y=2):0}f(2)\",\n         \"{var y$$inline_1=void 0;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var y$$inline_1=void 0;2?y$$inline_1=2:0\nResult: var y$$inline_3=void 0;2?y$$inline_3=2:0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME y$$inline_1 1 [source_file: expected0]\n                    VOID 1 [source_file: expected0]\n                        NUMBER 0.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                HOOK 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n                    ASSIGN 1 [parenthesized: true] [source_file: expected0]\n                        NAME y$$inline_1 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME y$$inline_3 1 [source_file: testcode]\n                    VOID 1 [source_file: testcode]\n                        NUMBER 0.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                HOOK 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n                    ASSIGN 1 [parenthesized: true] [source_file: testcode]\n                        NAME y$$inline_3 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME y$$inline_1 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME y$$inline_3 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified6(InlineFunctionsTest.java:583)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var y$$inline_1=void 0;2?y$$inline_1=2:0\nResult: var y$$inline_3=void 0;2?y$$inline_3=2:0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME y$$inline_1 1 [source_file: expected0]\n                    VOID 1 [source_file: expected0]\n                        NUMBER 0.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                HOOK 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n                    ASSIGN 1 [parenthesized: true] [source_file: expected0]\n                        NAME y$$inline_1 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME y$$inline_3 1 [source_file: testcode]\n                    VOID 1 [source_file: testcode]\n                        NUMBER 0.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                HOOK 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n                    ASSIGN 1 [parenthesized: true] [source_file: testcode]\n                        NAME y$$inline_3 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME y$$inline_1 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME y$$inline_3 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified6(InlineFunctionsTest.java:583)  test(\"function f(x,y){return x?(y=2):0}f(2)\",         \"{var y$$inline_1=void 0;2?(\" +         \"y$$inline_1=2):0}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified7": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified7",
                "src": "  public void testNoInlineIfParametersModified7() {\n    // Increment\n    test(\"function f(a){return++a<++a}f(1)\",\n         \"{var a$$inline_0=1;\" +\n         \"++a$$inline_0<\" +\n         \"++a$$inline_0}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=1;++a$$inline_0<++a$$inline_0\nResult: var a$$inline_1=1;++a$$inline_1<++a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                LT 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                LT 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 1.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified7(InlineFunctionsTest.java:590)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=1;++a$$inline_0<++a$$inline_0\nResult: var a$$inline_1=1;++a$$inline_1<++a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                LT 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                LT 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 1.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified7(InlineFunctionsTest.java:590)  test(\"function f(a){return++a<++a}f(1)\",         \"{var a$$inline_0=1;\" +         \"++a$$inline_0<\" +         \"++a$$inline_0}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testIssue423": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testIssue423",
                "src": "  public void testIssue423() {\n    assumeMinimumCapture = false;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"(function($){\" +\n        \"  $.fn.multicheck=function(options$$1){\" +\n        \"    {\" +\n        \"     options$$1.checkboxes=$(this).siblings(\\\":checkbox\\\");\" +\n        \"     {\" +\n        \"       $(this).data(\\\"checkboxes\\\")\" +\n        \"     }\" +\n        \"    }\" +\n        \"  }\" +\n        \"})(jQuery)\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"{var $$$inline_0=jQuery;\\n\" +\n        \"$$$inline_0.fn.multicheck=function(options$$inline_4){\\n\" +\n        \"  {options$$inline_4.checkboxes=\" +\n            \"$$$inline_0(this).siblings(\\\":checkbox\\\");\\n\" +\n        \"  {$$$inline_0(this).data(\\\"checkboxes\\\")}\" +\n        \"  }\\n\" +\n        \"}\\n\" +\n        \"}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var $$$inline_0=jQuery;$$$inline_0.fn.multicheck=function(options$$inline_4){options$$inline_4.checkboxes=$$$inline_0(this).siblings(\":checkbox\");$$$inline_0(this).data(\"checkboxes\")}\nResult: var $$$inline_3=jQuery;$$$inline_3.fn.multicheck=function(options$$inline_7){options$$inline_7.checkboxes=$$$inline_3(this).siblings(\":checkbox\");$$$inline_3(this).data(\"checkboxes\")}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME $$$inline_0 1 [source_file: expected0]\n                    NAME jQuery 1 [source_file: expected0]\n            EXPR_RESULT 2 [source_file: expected0]\n                ASSIGN 2 [source_file: expected0]\n                    GETPROP 2 [source_file: expected0]\n                        GETPROP 2 [source_file: expected0]\n                            NAME $$$inline_0 2 [source_file: expected0]\n                            STRING fn 2 [source_file: expected0]\n                        STRING multicheck 2 [source_file: expected0]\n                    FUNCTION  2 [source_file: expected0]\n                        NAME  2 [source_file: expected0]\n                        LP 2 [source_file: expected0]\n                            NAME options$$inline_4 2 [source_file: expected0]\n                        BLOCK 2 [source_file: expected0]\n                            BLOCK 3 [source_file: expected0]\n                                EXPR_RESULT 3 [source_file: expected0]\n                                    ASSIGN 3 [source_file: expected0]\n                                        GETPROP 3 [source_file: expected0]\n                                            NAME options$$inline_4 3 [source_file: expected0]\n                                            STRING checkboxes 3 [source_file: expected0]\n                                        CALL 3 [source_file: expected0]\n                                            GETPROP 3 [source_file: expected0]\n                                                CALL 3 [free_call: 1] [source_file: expected0]\n                                                    NAME $$$inline_0 3 [source_file: expected0]\n                                                    THIS 3 [source_file: expected0]\n                                                STRING siblings 3 [source_file: expected0]\n                                            STRING :checkbox 3 [source_file: expected0]\n                                BLOCK 4 [source_file: expected0]\n                                    EXPR_RESULT 4 [source_file: expected0]\n                                        CALL 4 [source_file: expected0]\n                                            GETPROP 4 [source_file: expected0]\n                                                CALL 4 [free_call: 1] [source_file: expected0]\n                                                    NAME $$$inline_0 4 [source_file: expected0]\n                                                    THIS 4 [source_file: expected0]\n                                                STRING data 4 [source_file: expected0]\n                                            STRING checkboxes 4 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 14 [source_file: testcode]\n                NAME $$$inline_3 14 [source_file: testcode]\n                    NAME jQuery 14 [source_file: testcode]\n            EXPR_RESULT 2 [source_file: testcode]\n                ASSIGN 2 [source_file: testcode]\n                    GETPROP 2 [source_file: testcode]\n                        GETPROP 2 [source_file: testcode]\n                            NAME $$$inline_3 2 [source_file: testcode]\n                            STRING fn 2 [source_file: testcode]\n                        STRING multicheck 2 [source_file: testcode]\n                    FUNCTION  2 [source_file: testcode]\n                        NAME  2 [source_file: testcode]\n                        LP 2 [source_file: testcode]\n                            NAME options$$inline_7 2 [source_file: testcode]\n                        BLOCK 2 [source_file: testcode]\n                            BLOCK 6 [source_file: testcode]\n                                EXPR_RESULT 7 [source_file: testcode]\n                                    ASSIGN 7 [source_file: testcode]\n                                        GETPROP 7 [source_file: testcode]\n                                            NAME options$$inline_7 3 [source_file: testcode]\n                                            STRING checkboxes 7 [source_file: testcode]\n                                        CALL 7 [source_file: testcode]\n                                            GETPROP 7 [source_file: testcode]\n                                                CALL 7 [free_call: 1] [source_file: testcode]\n                                                    NAME $$$inline_3 7 [source_file: testcode]\n                                                    THIS 7 [source_file: testcode]\n                                                STRING siblings 7 [source_file: testcode]\n                                            STRING :checkbox 7 [source_file: testcode]\n                                BLOCK 11 [source_file: testcode]\n                                    EXPR_RESULT 12 [source_file: testcode]\n                                        CALL 12 [source_file: testcode]\n                                            GETPROP 12 [source_file: testcode]\n                                                CALL 12 [free_call: 1] [source_file: testcode]\n                                                    NAME $$$inline_3 12 [source_file: testcode]\n                                                    THIS 12 [source_file: testcode]\n                                                STRING data 12 [source_file: testcode]\n                                            STRING checkboxes 12 [source_file: testcode]\n\n\nSubtree1: NAME $$$inline_0 1 [source_file: expected0]\n    NAME jQuery 1 [source_file: expected0]\n\n\nSubtree2: NAME $$$inline_3 14 [source_file: testcode]\n    NAME jQuery 14 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testIssue423(InlineFunctionsTest.java:2142)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var $$$inline_0=jQuery;$$$inline_0.fn.multicheck=function(options$$inline_4){options$$inline_4.checkboxes=$$$inline_0(this).siblings(\":checkbox\");$$$inline_0(this).data(\"checkboxes\")}\nResult: var $$$inline_3=jQuery;$$$inline_3.fn.multicheck=function(options$$inline_7){options$$inline_7.checkboxes=$$$inline_3(this).siblings(\":checkbox\");$$$inline_3(this).data(\"checkboxes\")}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME $$$inline_0 1 [source_file: expected0]\n                    NAME jQuery 1 [source_file: expected0]\n            EXPR_RESULT 2 [source_file: expected0]\n                ASSIGN 2 [source_file: expected0]\n                    GETPROP 2 [source_file: expected0]\n                        GETPROP 2 [source_file: expected0]\n                            NAME $$$inline_0 2 [source_file: expected0]\n                            STRING fn 2 [source_file: expected0]\n                        STRING multicheck 2 [source_file: expected0]\n                    FUNCTION  2 [source_file: expected0]\n                        NAME  2 [source_file: expected0]\n                        LP 2 [source_file: expected0]\n                            NAME options$$inline_4 2 [source_file: expected0]\n                        BLOCK 2 [source_file: expected0]\n                            BLOCK 3 [source_file: expected0]\n                                EXPR_RESULT 3 [source_file: expected0]\n                                    ASSIGN 3 [source_file: expected0]\n                                        GETPROP 3 [source_file: expected0]\n                                            NAME options$$inline_4 3 [source_file: expected0]\n                                            STRING checkboxes 3 [source_file: expected0]\n                                        CALL 3 [source_file: expected0]\n                                            GETPROP 3 [source_file: expected0]\n                                                CALL 3 [free_call: 1] [source_file: expected0]\n                                                    NAME $$$inline_0 3 [source_file: expected0]\n                                                    THIS 3 [source_file: expected0]\n                                                STRING siblings 3 [source_file: expected0]\n                                            STRING :checkbox 3 [source_file: expected0]\n                                BLOCK 4 [source_file: expected0]\n                                    EXPR_RESULT 4 [source_file: expected0]\n                                        CALL 4 [source_file: expected0]\n                                            GETPROP 4 [source_file: expected0]\n                                                CALL 4 [free_call: 1] [source_file: expected0]\n                                                    NAME $$$inline_0 4 [source_file: expected0]\n                                                    THIS 4 [source_file: expected0]\n                                                STRING data 4 [source_file: expected0]\n                                            STRING checkboxes 4 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 14 [source_file: testcode]\n                NAME $$$inline_3 14 [source_file: testcode]\n                    NAME jQuery 14 [source_file: testcode]\n            EXPR_RESULT 2 [source_file: testcode]\n                ASSIGN 2 [source_file: testcode]\n                    GETPROP 2 [source_file: testcode]\n                        GETPROP 2 [source_file: testcode]\n                            NAME $$$inline_3 2 [source_file: testcode]\n                            STRING fn 2 [source_file: testcode]\n                        STRING multicheck 2 [source_file: testcode]\n                    FUNCTION  2 [source_file: testcode]\n                        NAME  2 [source_file: testcode]\n                        LP 2 [source_file: testcode]\n                            NAME options$$inline_7 2 [source_file: testcode]\n                        BLOCK 2 [source_file: testcode]\n                            BLOCK 6 [source_file: testcode]\n                                EXPR_RESULT 7 [source_file: testcode]\n                                    ASSIGN 7 [source_file: testcode]\n                                        GETPROP 7 [source_file: testcode]\n                                            NAME options$$inline_7 3 [source_file: testcode]\n                                            STRING checkboxes 7 [source_file: testcode]\n                                        CALL 7 [source_file: testcode]\n                                            GETPROP 7 [source_file: testcode]\n                                                CALL 7 [free_call: 1] [source_file: testcode]\n                                                    NAME $$$inline_3 7 [source_file: testcode]\n                                                    THIS 7 [source_file: testcode]\n                                                STRING siblings 7 [source_file: testcode]\n                                            STRING :checkbox 7 [source_file: testcode]\n                                BLOCK 11 [source_file: testcode]\n                                    EXPR_RESULT 12 [source_file: testcode]\n                                        CALL 12 [source_file: testcode]\n                                            GETPROP 12 [source_file: testcode]\n                                                CALL 12 [free_call: 1] [source_file: testcode]\n                                                    NAME $$$inline_3 12 [source_file: testcode]\n                                                    THIS 12 [source_file: testcode]\n                                                STRING data 12 [source_file: testcode]\n                                            STRING checkboxes 12 [source_file: testcode]\n\n\nSubtree1: NAME $$$inline_0 1 [source_file: expected0]\n    NAME jQuery 1 [source_file: expected0]\n\n\nSubtree2: NAME $$$inline_3 14 [source_file: testcode]\n    NAME jQuery 14 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testIssue423(InlineFunctionsTest.java:2142)  test(        \"(function($) {\\n\" +        \"  $.fn.multicheck = function(options) {\\n\" +        \"    initialize.call(this, options);\\n\" +        \"  };\\n\" +        \"\\n\" +        \"  function initialize(options) {\\n\" +        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +        \"    preload_check_all.call(this);\\n\" +        \"  }\\n\" +        \"\\n\" +        \"  function preload_check_all() {\\n\" +        \"    $(this).data('checkboxes');\\n\" +        \"  }\\n\" +        \"})(jQuery)\",        \"{var $$$inline_0=jQuery;\\n\" +        \"$$$inline_0.fn.multicheck=function(options$$inline_4){\\n\" +        \"  {options$$inline_4.checkboxes=\" +            \"$$$inline_0(this).siblings(\\\":checkbox\\\");\\n\" +        \"  {$$$inline_0(this).data(\\\"checkboxes\\\")}\" +        \"  }\\n\" +        \"}\\n\" +        \"}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexFunctionWithFunctionDefinition2",
                "src": "  public void testComplexFunctionWithFunctionDefinition2() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"function f(a){call(function(){return})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=void 0;call(function(){return a$$inline_0})\nResult: var a$$inline_1=void 0;call(function(){return a$$inline_1})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a$$inline_0 1 [source_file: expected0]\n                        VOID 1 [source_file: expected0]\n                            NUMBER 0.0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME call 1 [source_file: expected0]\n                        FUNCTION  1 [source_file: expected0]\n                            NAME  1 [source_file: expected0]\n                            LP 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                                RETURN 1 [source_file: expected0]\n                                    NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a$$inline_1 1 [source_file: testcode]\n                        VOID 1 [source_file: testcode]\n                            NUMBER 0.0 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME call 1 [source_file: testcode]\n                        FUNCTION  1 [source_file: testcode]\n                            NAME  1 [source_file: testcode]\n                            LP 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                                RETURN 1 [source_file: testcode]\n                                    NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2(InlineFunctionsTest.java:1511)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=void 0;call(function(){return a$$inline_0})\nResult: var a$$inline_1=void 0;call(function(){return a$$inline_1})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a$$inline_0 1 [source_file: expected0]\n                        VOID 1 [source_file: expected0]\n                            NUMBER 0.0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME call 1 [source_file: expected0]\n                        FUNCTION  1 [source_file: expected0]\n                            NAME  1 [source_file: expected0]\n                            LP 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                                RETURN 1 [source_file: expected0]\n                                    NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a$$inline_1 1 [source_file: testcode]\n                        VOID 1 [source_file: testcode]\n                            NUMBER 0.0 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME call 1 [source_file: testcode]\n                        FUNCTION  1 [source_file: testcode]\n                            NAME  1 [source_file: testcode]\n                            LP 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                                RETURN 1 [source_file: testcode]\n                                    NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2(InlineFunctionsTest.java:1511)  test(\"(function(){\" +         \"var f = function(a){call(function(){return a})};f()})()\",         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexFunctionWithFunctionDefinition3",
                "src": "  public void testComplexFunctionWithFunctionDefinition3() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might need to be captured.\n    testSame(\"function f(){var a; call(function(){return a})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function f(){var a; call(function(){return a})}f()\",\n         \"{var a$$inline_0;call(function(){return a$$inline_0})}\");\n\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0;call(function(){return a$$inline_0})\nResult: var a$$inline_1;call(function(){return a$$inline_1})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                CALL 1 [free_call: 1] [source_file: expected0]\n                    NAME call 1 [source_file: expected0]\n                    FUNCTION  1 [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            RETURN 1 [source_file: expected0]\n                                NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                CALL 1 [free_call: 1] [source_file: testcode]\n                    NAME call 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            RETURN 1 [source_file: testcode]\n                                NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition3(InlineFunctionsTest.java:1538)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0;call(function(){return a$$inline_0})\nResult: var a$$inline_1;call(function(){return a$$inline_1})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                CALL 1 [free_call: 1] [source_file: expected0]\n                    NAME call 1 [source_file: expected0]\n                    FUNCTION  1 [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            RETURN 1 [source_file: expected0]\n                                NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                CALL 1 [free_call: 1] [source_file: testcode]\n                    NAME call 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            RETURN 1 [source_file: testcode]\n                                NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition3(InlineFunctionsTest.java:1538)  test(\"function f(){var a; call(function(){return a})}f()\",         \"{var a$$inline_0;call(function(){return a$$inline_0})}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeFunctionExpressionInCall": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testDecomposeFunctionExpressionInCall",
                "src": "  public void testDecomposeFunctionExpressionInCall() {\n    test(\n        \"(function(map){descriptions_=map})(\\n\" +\n           \"function(){\\n\" +\n              \"var ret={};\\n\" +\n              \"ret[ONE]='a';\\n\" +\n              \"ret[TWO]='b';\\n\" +\n              \"return ret\\n\" +\n           \"}()\\n\" +\n        \");\",\n        \"{\" +\n        \"var JSCompiler_inline_result$$0;\" +\n        \"var ret$$inline_1={};\\n\" +\n        \"ret$$inline_1[ONE]='a';\\n\" +\n        \"ret$$inline_1[TWO]='b';\\n\" +\n        \"JSCompiler_inline_result$$0 = ret$$inline_1;\\n\" +\n        \"}\" +\n        \"{\" +\n        \"descriptions_=JSCompiler_inline_result$$0;\" +\n        \"}\"\n        );\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var JSCompiler_inline_result$$0;var ret$$inline_1={};ret$$inline_1[ONE]=\"a\";ret$$inline_1[TWO]=\"b\";JSCompiler_inline_result$$0=ret$$inline_1;descriptions_=JSCompiler_inline_result$$0\nResult: var JSCompiler_inline_result$$0;var ret$$inline_2={};ret$$inline_2[ONE]=\"a\";ret$$inline_2[TWO]=\"b\";JSCompiler_inline_result$$0=ret$$inline_2;descriptions_=JSCompiler_inline_result$$0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME ret$$inline_1 1 [source_file: expected0]\n                    OBJECTLIT 1 [source_file: expected0]\n            EXPR_RESULT 2 [source_file: expected0]\n                ASSIGN 2 [source_file: expected0]\n                    GETELEM 2 [source_file: expected0]\n                        NAME ret$$inline_1 2 [source_file: expected0]\n                        NAME ONE 2 [is_constant_name: 1] [source_file: expected0]\n                    STRING a 2 [source_file: expected0]\n            EXPR_RESULT 3 [source_file: expected0]\n                ASSIGN 3 [source_file: expected0]\n                    GETELEM 3 [source_file: expected0]\n                        NAME ret$$inline_1 3 [source_file: expected0]\n                        NAME TWO 3 [is_constant_name: 1] [source_file: expected0]\n                    STRING b 3 [source_file: expected0]\n            EXPR_RESULT 4 [source_file: expected0]\n                ASSIGN 4 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$0 4 [source_file: expected0]\n                    NAME ret$$inline_1 4 [source_file: expected0]\n        BLOCK 5 [source_file: expected0]\n            EXPR_RESULT 5 [source_file: expected0]\n                ASSIGN 5 [source_file: expected0]\n                    NAME descriptions_ 5 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$0 5 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 2 [source_file: testcode]\n            VAR 7 [source_file: testcode]\n                NAME JSCompiler_inline_result$$0 7 [source_file: testcode]\n            VAR 3 [source_file: testcode]\n                NAME ret$$inline_2 3 [source_file: testcode]\n                    OBJECTLIT 3 [source_file: testcode]\n            EXPR_RESULT 4 [source_file: testcode]\n                ASSIGN 4 [source_file: testcode]\n                    GETELEM 4 [source_file: testcode]\n                        NAME ret$$inline_2 4 [source_file: testcode]\n                        NAME ONE 4 [is_constant_name: 1] [source_file: testcode]\n                    STRING a 4 [source_file: testcode]\n            EXPR_RESULT 5 [source_file: testcode]\n                ASSIGN 5 [source_file: testcode]\n                    GETELEM 5 [source_file: testcode]\n                        NAME ret$$inline_2 5 [source_file: testcode]\n                        NAME TWO 5 [is_constant_name: 1] [source_file: testcode]\n                    STRING b 5 [source_file: testcode]\n            EXPR_RESULT 6 [source_file: testcode]\n                ASSIGN 6 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$0 6 [source_file: testcode]\n                    NAME ret$$inline_2 6 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME descriptions_ 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$0 7 [source_file: testcode]\n\n\nSubtree1: NAME ret$$inline_1 1 [source_file: expected0]\n    OBJECTLIT 1 [source_file: expected0]\n\n\nSubtree2: NAME ret$$inline_2 3 [source_file: testcode]\n    OBJECTLIT 3 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testDecomposeFunctionExpressionInCall(InlineFunctionsTest.java:1553)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var JSCompiler_inline_result$$0;var ret$$inline_1={};ret$$inline_1[ONE]=\"a\";ret$$inline_1[TWO]=\"b\";JSCompiler_inline_result$$0=ret$$inline_1;descriptions_=JSCompiler_inline_result$$0\nResult: var JSCompiler_inline_result$$0;var ret$$inline_2={};ret$$inline_2[ONE]=\"a\";ret$$inline_2[TWO]=\"b\";JSCompiler_inline_result$$0=ret$$inline_2;descriptions_=JSCompiler_inline_result$$0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME ret$$inline_1 1 [source_file: expected0]\n                    OBJECTLIT 1 [source_file: expected0]\n            EXPR_RESULT 2 [source_file: expected0]\n                ASSIGN 2 [source_file: expected0]\n                    GETELEM 2 [source_file: expected0]\n                        NAME ret$$inline_1 2 [source_file: expected0]\n                        NAME ONE 2 [is_constant_name: 1] [source_file: expected0]\n                    STRING a 2 [source_file: expected0]\n            EXPR_RESULT 3 [source_file: expected0]\n                ASSIGN 3 [source_file: expected0]\n                    GETELEM 3 [source_file: expected0]\n                        NAME ret$$inline_1 3 [source_file: expected0]\n                        NAME TWO 3 [is_constant_name: 1] [source_file: expected0]\n                    STRING b 3 [source_file: expected0]\n            EXPR_RESULT 4 [source_file: expected0]\n                ASSIGN 4 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$0 4 [source_file: expected0]\n                    NAME ret$$inline_1 4 [source_file: expected0]\n        BLOCK 5 [source_file: expected0]\n            EXPR_RESULT 5 [source_file: expected0]\n                ASSIGN 5 [source_file: expected0]\n                    NAME descriptions_ 5 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$0 5 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 2 [source_file: testcode]\n            VAR 7 [source_file: testcode]\n                NAME JSCompiler_inline_result$$0 7 [source_file: testcode]\n            VAR 3 [source_file: testcode]\n                NAME ret$$inline_2 3 [source_file: testcode]\n                    OBJECTLIT 3 [source_file: testcode]\n            EXPR_RESULT 4 [source_file: testcode]\n                ASSIGN 4 [source_file: testcode]\n                    GETELEM 4 [source_file: testcode]\n                        NAME ret$$inline_2 4 [source_file: testcode]\n                        NAME ONE 4 [is_constant_name: 1] [source_file: testcode]\n                    STRING a 4 [source_file: testcode]\n            EXPR_RESULT 5 [source_file: testcode]\n                ASSIGN 5 [source_file: testcode]\n                    GETELEM 5 [source_file: testcode]\n                        NAME ret$$inline_2 5 [source_file: testcode]\n                        NAME TWO 5 [is_constant_name: 1] [source_file: testcode]\n                    STRING b 5 [source_file: testcode]\n            EXPR_RESULT 6 [source_file: testcode]\n                ASSIGN 6 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$0 6 [source_file: testcode]\n                    NAME ret$$inline_2 6 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME descriptions_ 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$0 7 [source_file: testcode]\n\n\nSubtree1: NAME ret$$inline_1 1 [source_file: expected0]\n    OBJECTLIT 1 [source_file: expected0]\n\n\nSubtree2: NAME ret$$inline_2 3 [source_file: testcode]\n    OBJECTLIT 3 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testDecomposeFunctionExpressionInCall(InlineFunctionsTest.java:1553)  test(        \"(function(map){descriptions_=map})(\\n\" +           \"function(){\\n\" +              \"var ret={};\\n\" +              \"ret[ONE]='a';\\n\" +              \"ret[TWO]='b';\\n\" +              \"return ret\\n\" +           \"}()\\n\" +        \");\",        \"{\" +        \"var JSCompiler_inline_result$$0;\" +        \"var ret$$inline_1={};\\n\" +        \"ret$$inline_1[ONE]='a';\\n\" +        \"ret$$inline_1[TWO]='b';\\n\" +        \"JSCompiler_inline_result$$0 = ret$$inline_1;\\n\" +        \"}\" +        \"{\" +        \"descriptions_=JSCompiler_inline_result$$0;\" +        \"}\"        );"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverOverrideNewValues": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineNeverOverrideNewValues",
                "src": "  public void testInlineNeverOverrideNewValues() {\n    test(\"function f(a){return++a<++a}f(1)\",\n        \"{var a$$inline_0=1;\" +\n        \"++a$$inline_0<++a$$inline_0}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=1;++a$$inline_0<++a$$inline_0\nResult: var a$$inline_1=1;++a$$inline_1<++a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                LT 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                LT 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 1.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverOverrideNewValues(InlineFunctionsTest.java:623)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=1;++a$$inline_0<++a$$inline_0\nResult: var a$$inline_1=1;++a$$inline_1<++a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                LT 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                LT 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 1.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverOverrideNewValues(InlineFunctionsTest.java:623)  test(\"function f(a){return++a<++a}f(1)\",        \"{var a$$inline_0=1;\" +        \"++a$$inline_0<++a$$inline_0}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs1": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineBlockMutableArgs1",
                "src": "  public void testInlineBlockMutableArgs1() {\n    test(\"function foo(x){x+x}foo([])\",\n         \"{var x$$inline_0=[];\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=[];x$$inline_0+x$$inline_0\nResult: var x$$inline_1=[];x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    ARRAYLIT 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    ARRAYLIT 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    ARRAYLIT 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    ARRAYLIT 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs1(InlineFunctionsTest.java:653)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=[];x$$inline_0+x$$inline_0\nResult: var x$$inline_1=[];x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    ARRAYLIT 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    ARRAYLIT 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    ARRAYLIT 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    ARRAYLIT 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs1(InlineFunctionsTest.java:653)  test(\"function foo(x){x+x}foo([])\",         \"{var x$$inline_0=[];\" +         \"x$$inline_0+x$$inline_0}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs2": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineBlockMutableArgs2",
                "src": "  public void testInlineBlockMutableArgs2() {\n    test(\"function foo(x){x+x}foo(new Date)\",\n         \"{var x$$inline_0=new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=new Date;x$$inline_0+x$$inline_0\nResult: var x$$inline_1=new Date;x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NEW 1 [source_file: expected0]\n                        NAME Date 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NEW 1 [source_file: testcode]\n                        NAME Date 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NEW 1 [source_file: expected0]\n        NAME Date 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NEW 1 [source_file: testcode]\n        NAME Date 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs2(InlineFunctionsTest.java:659)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=new Date;x$$inline_0+x$$inline_0\nResult: var x$$inline_1=new Date;x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NEW 1 [source_file: expected0]\n                        NAME Date 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NEW 1 [source_file: testcode]\n                        NAME Date 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NEW 1 [source_file: expected0]\n        NAME Date 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NEW 1 [source_file: testcode]\n        NAME Date 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs2(InlineFunctionsTest.java:659)  test(\"function foo(x){x+x}foo(new Date)\",         \"{var x$$inline_0=new Date;\" +         \"x$$inline_0+x$$inline_0}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineBlockMutableArgs3",
                "src": "  public void testInlineBlockMutableArgs3() {\n    test(\"function foo(x){x+x}foo(true&&new Date)\",\n         \"{var x$$inline_0=true&&new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=true&&new Date;x$$inline_0+x$$inline_0\nResult: var x$$inline_1=true&&new Date;x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    AND 1 [source_file: expected0]\n                        TRUE 1 [source_file: expected0]\n                        NEW 1 [source_file: expected0]\n                            NAME Date 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    AND 1 [source_file: testcode]\n                        TRUE 1 [source_file: testcode]\n                        NEW 1 [source_file: testcode]\n                            NAME Date 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    AND 1 [source_file: expected0]\n        TRUE 1 [source_file: expected0]\n        NEW 1 [source_file: expected0]\n            NAME Date 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    AND 1 [source_file: testcode]\n        TRUE 1 [source_file: testcode]\n        NEW 1 [source_file: testcode]\n            NAME Date 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs3(InlineFunctionsTest.java:665)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=true&&new Date;x$$inline_0+x$$inline_0\nResult: var x$$inline_1=true&&new Date;x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    AND 1 [source_file: expected0]\n                        TRUE 1 [source_file: expected0]\n                        NEW 1 [source_file: expected0]\n                            NAME Date 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    AND 1 [source_file: testcode]\n                        TRUE 1 [source_file: testcode]\n                        NEW 1 [source_file: testcode]\n                            NAME Date 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    AND 1 [source_file: expected0]\n        TRUE 1 [source_file: expected0]\n        NEW 1 [source_file: expected0]\n            NAME Date 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    AND 1 [source_file: testcode]\n        TRUE 1 [source_file: testcode]\n        NEW 1 [source_file: testcode]\n            NAME Date 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs3(InlineFunctionsTest.java:665)  test(\"function foo(x){x+x}foo(true&&new Date)\",         \"{var x$$inline_0=true&&new Date;\" +         \"x$$inline_0+x$$inline_0}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs4": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineBlockMutableArgs4",
                "src": "  public void testInlineBlockMutableArgs4() {\n    test(\"function foo(x){x+x}foo({})\",\n         \"{var x$$inline_0={};\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0={};x$$inline_0+x$$inline_0\nResult: var x$$inline_1={};x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    OBJECTLIT 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    OBJECTLIT 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    OBJECTLIT 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    OBJECTLIT 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs4(InlineFunctionsTest.java:671)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0={};x$$inline_0+x$$inline_0\nResult: var x$$inline_1={};x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    OBJECTLIT 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    OBJECTLIT 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    OBJECTLIT 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    OBJECTLIT 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs4(InlineFunctionsTest.java:671)  test(\"function foo(x){x+x}foo({})\",         \"{var x$$inline_0={};\" +         \"x$$inline_0+x$$inline_0}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions10": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions10",
                "src": "  public void testInlineFunctions10() {\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i);y=INC(i)\",\n         \"var y;\" +\n         \"{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\" +\n         \"{var x$$inline_2=i;\" +\n         \"y=x$$inline_2++}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var y;var x$$inline_0=i;y=x$$inline_0++;var x$$inline_2=i;y=x$$inline_2++\nResult: var y;var x$$inline_1=i;y=x$$inline_1++;var x$$inline_4=i;y=x$$inline_4++\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME y 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME x$$inline_0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_2 1 [source_file: expected0]\n                    NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME x$$inline_2 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME y 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME x$$inline_1 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_4 1 [source_file: testcode]\n                    NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME x$$inline_4 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME i 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME i 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions10(InlineFunctionsTest.java:183)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var y;var x$$inline_0=i;y=x$$inline_0++;var x$$inline_2=i;y=x$$inline_2++\nResult: var y;var x$$inline_1=i;y=x$$inline_1++;var x$$inline_4=i;y=x$$inline_4++\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME y 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME x$$inline_0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_2 1 [source_file: expected0]\n                    NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME x$$inline_2 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME y 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME x$$inline_1 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_4 1 [source_file: testcode]\n                    NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME x$$inline_4 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME i 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME i 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions10(InlineFunctionsTest.java:183)  test(\"function INC(x){return x++}\" +         \"var y=INC(i);y=INC(i)\",         \"var y;\" +         \"{var x$$inline_0=i;\" +         \"y=x$$inline_0++}\" +         \"{var x$$inline_2=i;\" +         \"y=x$$inline_2++}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions13": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions13",
                "src": "  public void testInlineFunctions13() {\n    // inline as block if the input parameter has side-effects.\n    test(\"function f(x){return x}\" +\n         \"var y=f(i++)\",\n         \"var y;{var x$$inline_0=i++;y=x$$inline_0}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var y;var x$$inline_0=i++;y=x$$inline_0\nResult: var y;var x$$inline_1=i++;y=x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME y 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME y 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    INC 1 [incrdecr: 1] [source_file: expected0]\n        NAME i 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    INC 1 [incrdecr: 1] [source_file: testcode]\n        NAME i 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions13(InlineFunctionsTest.java:210)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var y;var x$$inline_0=i++;y=x$$inline_0\nResult: var y;var x$$inline_1=i++;y=x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME y 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME y 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    INC 1 [incrdecr: 1] [source_file: expected0]\n        NAME i 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    INC 1 [incrdecr: 1] [source_file: testcode]\n        NAME i 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions13(InlineFunctionsTest.java:210)  test(\"function f(x){return x}\" +         \"var y=f(i++)\",         \"var y;{var x$$inline_0=i++;y=x$$inline_0}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions22": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions22",
                "src": "  public void testInlineFunctions22() {\n    // Another tricky case ... test nested compiler inlines\n    test(\"function plex(a){if(a) return 0;else return 1;}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"function bar(d){return plex(d)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_plex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_plex_1}\" +\n         \"else{\" +\n         \"d=1;break JSCompiler_inline_label_plex_1}d=void 0}}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var d;JSCompiler_inline_label_plex_1:{if(1+2){d=0;break JSCompiler_inline_label_plex_1}else{d=1;break JSCompiler_inline_label_plex_1}d=void 0}\nResult: var d;JSCompiler_inline_label_plex_2:{if(1+2){d=0;break JSCompiler_inline_label_plex_2}else{d=1;break JSCompiler_inline_label_plex_2}d=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME d 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 0.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 1.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME d 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 0.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME d 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions22(InlineFunctionsTest.java:375)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var d;JSCompiler_inline_label_plex_1:{if(1+2){d=0;break JSCompiler_inline_label_plex_1}else{d=1;break JSCompiler_inline_label_plex_1}d=void 0}\nResult: var d;JSCompiler_inline_label_plex_2:{if(1+2){d=0;break JSCompiler_inline_label_plex_2}else{d=1;break JSCompiler_inline_label_plex_2}d=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME d 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 0.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 1.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME d 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 0.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME d 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions22(InlineFunctionsTest.java:375)  test(\"function plex(a){if(a) return 0;else return 1;}\" +         \"function foo(a, b){return bar(a+b)}\" +         \"function bar(d){return plex(d)}\" +         \"var d=foo(1,2)\",         \"var d;{JSCompiler_inline_label_plex_1:{\" +         \"if(1+2){\" +         \"d=0;break JSCompiler_inline_label_plex_1}\" +         \"else{\" +         \"d=1;break JSCompiler_inline_label_plex_1}d=void 0}}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions23": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions23",
                "src": "  public void testInlineFunctions23() {\n    // Test both orderings again\n    test(\"function complex(a){if(a) return 0;else return 1;}\" +\n         \"function bar(d){return complex(d)}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_complex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_complex_1\" +\n         \"}else{\" +\n         \"d=1;break JSCompiler_inline_label_complex_1\" +\n         \"}d=void 0}}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var d;JSCompiler_inline_label_complex_1:{if(1+2){d=0;break JSCompiler_inline_label_complex_1}else{d=1;break JSCompiler_inline_label_complex_1}d=void 0}\nResult: var d;JSCompiler_inline_label_complex_2:{if(1+2){d=0;break JSCompiler_inline_label_complex_2}else{d=1;break JSCompiler_inline_label_complex_2}d=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME d 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 0.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 1.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME d 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 0.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME d 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions23(InlineFunctionsTest.java:389)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var d;JSCompiler_inline_label_complex_1:{if(1+2){d=0;break JSCompiler_inline_label_complex_1}else{d=1;break JSCompiler_inline_label_complex_1}d=void 0}\nResult: var d;JSCompiler_inline_label_complex_2:{if(1+2){d=0;break JSCompiler_inline_label_complex_2}else{d=1;break JSCompiler_inline_label_complex_2}d=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME d 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 0.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 1.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME d 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 0.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME d 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions23(InlineFunctionsTest.java:389)  test(\"function complex(a){if(a) return 0;else return 1;}\" +         \"function bar(d){return complex(d)}\" +         \"function foo(a, b){return bar(a+b)}\" +         \"var d=foo(1,2)\",         \"var d;{JSCompiler_inline_label_complex_1:{\" +         \"if(1+2){\" +         \"d=0;break JSCompiler_inline_label_complex_1\" +         \"}else{\" +         \"d=1;break JSCompiler_inline_label_complex_1\" +         \"}d=void 0}}\");"
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions9": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions9",
                "src": "  public void testInlineFunctions9() {\n    // don't inline if the input parameter is modified.\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i)\",\n         \"var y;{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var y;var x$$inline_0=i;y=x$$inline_0++\nResult: var y;var x$$inline_1=i;y=x$$inline_1++\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME y 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME y 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME i 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME i 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions9(InlineFunctionsTest.java:176)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var y;var x$$inline_0=i;y=x$$inline_0++\nResult: var y;var x$$inline_1=i;y=x$$inline_1++\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME y 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME y 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME i 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME i 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions9(InlineFunctionsTest.java:176)  test(\"function INC(x){return x++}\" +         \"var y=INC(i)\",         \"var y;{var x$$inline_0=i;\" +         \"y=x$$inline_0++}\");"
            },
            "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testMakeLocalNamesUniqueWithContext5": {
                "path": "test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java",
                "function_name": "testMakeLocalNamesUniqueWithContext5",
                "src": "  public void testMakeLocalNamesUniqueWithContext5() {\n    // Set the test type\n    this.useDefaultRenamer = true;\n\n    testWithInversion(\n        \"function f(){var f; f = 1}\",\n        \"function f(){var f$$1; f$$1 = 1}\");\n    testWithInversion(\n        \"function f(f){f = 1}\",\n        \"function f(f$$1){f$$1 = 1}\");\n    testWithInversion(\n        \"function f(f){var f; f = 1}\",\n        \"function f(f$$1){var f$$1; f$$1 = 1}\");\n\n    test(\n        \"var fn = function f(){var f; f = 1}\",\n        \"var fn = function f(){var f$$1; f$$1 = 1}\");\n    test(\n        \"var fn = function f(f){f = 1}\",\n        \"var fn = function f(f$$1){f$$1 = 1}\");\n    test(\n        \"var fn = function f(f){var f; f = 1}\",\n        \"var fn = function f(f$$1){var f$$1; f$$1 = 1}\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var fn=function f(){var f$$1;f$$1=1}\nResult: var fn=function f$$1(){var f$$1;f$$1=1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME fn 1 [source_file: expected0]\n                FUNCTION f 1 [source_file: expected0]\n                    NAME f 1 [source_file: expected0]\n                    LP 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME f$$1 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME f$$1 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME fn 1 [source_file: testcode]\n                FUNCTION f$$1 1 [source_file: testcode]\n                    NAME f$$1 1 [source_file: testcode]\n                    LP 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        VAR 1 [source_file: testcode]\n                            NAME f$$1 1 [source_file: testcode]\n                        EXPR_RESULT 1 [source_file: testcode]\n                            ASSIGN 1 [source_file: testcode]\n                                NAME f$$1 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME f 1 [source_file: expected0]\n\n\nSubtree2: NAME f$$1 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest.testMakeLocalNamesUniqueWithContext5(MakeDeclaredNamesUniqueTest.java:222)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var fn=function f(){var f$$1;f$$1=1}\nResult: var fn=function f$$1(){var f$$1;f$$1=1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME fn 1 [source_file: expected0]\n                FUNCTION f 1 [source_file: expected0]\n                    NAME f 1 [source_file: expected0]\n                    LP 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME f$$1 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME f$$1 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME fn 1 [source_file: testcode]\n                FUNCTION f$$1 1 [source_file: testcode]\n                    NAME f$$1 1 [source_file: testcode]\n                    LP 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        VAR 1 [source_file: testcode]\n                            NAME f$$1 1 [source_file: testcode]\n                        EXPR_RESULT 1 [source_file: testcode]\n                            ASSIGN 1 [source_file: testcode]\n                                NAME f$$1 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME f 1 [source_file: expected0]\n\n\nSubtree2: NAME f$$1 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest.testMakeLocalNamesUniqueWithContext5(MakeDeclaredNamesUniqueTest.java:222)  test(        \"var fn = function f(){var f; f = 1}\",        \"var fn = function f(){var f$$1; f$$1 = 1}\");"
            }
        },
        "evaluation_done": true
    }
}