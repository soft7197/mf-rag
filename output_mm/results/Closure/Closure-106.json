{
    "Closure-106": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
                "start_loc": 899,
                "end_loc": 913,
                "buggy_function": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n\n      if (isClassOrEnum) {\n        return true;\n      }\n      return (type == Type.FUNCTION || aliasingGets == 0) &&\n          (parent == null || parent.canCollapseUnannotatedChildNames());\n    }\n",
                "fixed_function": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n      Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n\n      if (isClassOrEnum) {\n        return true;\n      }\n      return (type == Type.FUNCTION || aliasingGets == 0) &&\n          (parent == null || parent.canCollapseUnannotatedChildNames());\n    }\n",
                "comment": "",
                "normalized_body": [
                    "boolean canCollapseUnannotatedChildNames() { if (type == Type.OTHER || globalSets != 1 || localSets != 0) { return false; } if (isClassOrEnum) { return true; } return (type == Type.FUNCTION || aliasingGets == 0) && (parent == null || parent.canCollapseUnannotatedChildNames()); }"
                ],
                "top_similar_methods": [
                    [
                        1.0,
                        "boolean canCollapseUnannotatedChildNames() { if (type == Type.OTHER || globalSets != 1 || localSets != 0) { return false; } if (isClassOrEnum) { return true; } return (type == Type.FUNCTION || aliasingGets == 0) && (parent == null || parent.canCollapseUnannotatedChildNames()); }"
                    ],
                    [
                        0.9657899737358093,
                        "private static Node findNonconditionalParent(Node subExpression, Node expressionRoot) { Node result = subExpression; for (Node child = subExpression, parent = child.getParent(); parent != expressionRoot; child = parent, parent = child.getParent()) { if (isConditionalOp(parent)) { if (child != parent.getFirstChild()) { result = parent; } } } return result; }"
                    ],
                    [
                        0.9639654159545898,
                        "public void visit(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.NAME) { Var v = t.getScope().getVar(n.getString()); if (v != null && varFilter.apply(v)) { addReference(t, v, new Reference(n, parent, t, blockStack.peek())); } } if (isBlockBoundary(n, parent)) { blockStack.pop(); } }"
                    ],
                    [
                        0.9638804793357849,
                        "@Override public TernaryValue testForEquality(JSType that) { if (UNKNOWN.equals(super.testForEquality(that))) { return UNKNOWN; } if (that.isNullType() || that.isVoidType()) { return TRUE; } if (that.isUnknownType() || that.isNullable()) { return UNKNOWN; } return FALSE; }"
                    ],
                    [
                        0.9628174304962158,
                        "private boolean readQuotedString(int quote) throws IOException { for (int c = getChar(); c != EOF_CHAR; c = getChar()) { addToString(c); if (c == quote) return true; } stringBufferTop = 0; this.string = null; parser.addError(\\\"msg.XML.bad.form\\\"); return false; }"
                    ],
                    [
                        0.9603718519210815,
                        "boolean isDirectCallNodeReplacementPossible(Node fnNode) { Node block = NodeUtil.getFunctionBody(fnNode); if (!block.hasChildren()) { return true; } else if (block.hasOneChild()) { if (block.getFirstChild().getType() == Token.RETURN && block.getFirstChild().getFirstChild() != null) { return true; } } return false; }"
                    ],
                    [
                        0.9584176540374756,
                        "@Override public boolean isSubtype(JSType that) { if (JSType.isSubtype(this, that)) { return true; } if (that instanceof RecordType) { return RecordType.isSubtype(this, (RecordType) that); } if (that instanceof ObjectType) { if (isUnknownType() || implicitPrototypeChainIsUnknown()) { return true; } return this.isImplicitPrototype((ObjectType) that); } return false; }"
                    ]
                ],
                "directly_related_tests": [
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testTwinReferenceCancelsChildCollapsing",
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInNestedAssign",
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInCommaOperator"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n\n    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n\n      if (isClassOrEnum) {\n        return true;\n      }\n      return (type == Type.FUNCTION || aliasingGets == 0) &&\n          (parent == null || parent.canCollapseUnannotatedChildNames());\n    }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n  public void testTwinReferenceCancelsChildCollapsing() {\n    test(\"var a = {}; if (a.b = function() {}) { a.b.c = 3; a.b(a.b.c); }\",\n         \"var a$b; if (a$b = function() {}) { a$b.c = 3; a$b(a$b.c); }\");\n  }\n```\n#Error message: junit.framework.AssertionFailedError: \nExpected: var a$b;if(a$b=function(){}){a$b.c=3;a$b(a$b.c)}\nResult: var a$b=function(){}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1\n            NAME a$b 1\n        IF 1\n            ASSIGN 1\n                NAME a$b 1\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n            BLOCK 1\n                EXPR_RESULT 1\n                    ASSIGN 1\n                        GETPROP 1\n                            NAME a$b 1\n                            STRING c 1\n                        NUMBER 3.0 1\n                EXPR_RESULT 1\n                    CALL 1\n                        NAME a$b 1\n                        GETPROP 1\n                            NAME a$b 1\n                            STRING c 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1\n            NAME a$b 1 [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:720)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testTwinReferenceCancelsChildCollapsing(CollapsePropertiesTest.java:1111)  test(\"var a = {}; if (a.b = function() {}) { a.b.c = 3; a.b(a.b.c); }\",         \"var a$b; if (a$b = function() {}) { a$b.c = 3; a$b(a$b.c); }\");\n \n#Test method 2:\n```java\n  public void testCrashInNestedAssign() {\n    test(\"var a = {}; if (a.b = function() {}) a.b();\",\n         \"var a$b; if (a$b=function() {}) { a$b(); }\");\n  }\n```\n#Error message: junit.framework.AssertionFailedError: \nExpected: var a$b;if(a$b=function(){})a$b()\nResult: var a$b=function(){}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1\n            NAME a$b 1\n        IF 1\n            ASSIGN 1\n                NAME a$b 1\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n            BLOCK 1\n                EXPR_RESULT 1\n                    CALL 1\n                        NAME a$b 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1\n            NAME a$b 1 [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:720)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testCrashInNestedAssign(CollapsePropertiesTest.java:1106)  test(\"var a = {}; if (a.b = function() {}) a.b();\",         \"var a$b; if (a$b=function() {}) { a$b(); }\");\n \n#Test method 3:\n```java\n  public void testCrashInCommaOperator() {\n    test(\"var a = {}; a.b = function() {},a.b();\",\n         \"var a$b; a$b=function() {},a$b();\");\n  }\n```\n#Error message: java.lang.IllegalArgumentException\n\tat com.google.javascript.jscomp.CollapseProperties.addStubsForUndeclaredProperties(CollapseProperties.java:813)  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));\n\tat com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode(CollapseProperties.java:617)  addStubsForUndeclaredProperties(n, alias, varParent, varNode);\n\tat com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclaration(CollapseProperties.java:550)  updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);\n\tat com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(CollapseProperties.java:445)  updateObjLitOrFunctionDeclaration(n, alias);\n\tat com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(CollapseProperties.java:451)  collapseDeclarationOfNameAndDescendants(p, alias + '$' + p.name);\n\tat com.google.javascript.jscomp.CollapseProperties.process(CollapseProperties.java:143)  collapseDeclarationOfNameAndDescendants(n, n.name);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:644)  getProcessor(compiler).process(externsRoot, mainRoot);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testCrashInCommaOperator(CollapsePropertiesTest.java:1101)  test(\"var a = {}; a.b = function() {},a.b();\",         \"var a$b; a$b=function() {},a$b();\");\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0 || twinRefs != 0) {\n    return false;\n  }\n\n  if (isClassOrEnum) {\n    return true;\n  }\n  return (type == Type.FUNCTION || aliasingGets == 0) &&\n      (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n    if (type == Type.OTHER || globalSets != 1 || localSets != 0 || twinReferences > 0) {\n        return false;\n    }\n\n    if (isClassOrEnum) {\n        return true;\n    }\n    \n    return (type == Type.FUNCTION || aliasingGets == 0) &&\n        (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n    if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n    }\n\n    // Don't try to collapse if the one global set is a twin reference.\n    if (isTwin) {\n        return false;\n    }\n\n    if (isClassOrEnum) {\n        return true;\n    }\n    return (type == Type.FUNCTION || aliasingGets == 0) &&\n        (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0 || twinReferences != 0) {\n    return false;\n  }\n\n  if (isClassOrEnum) {\n    return true;\n  }\n  return (type == Type.FUNCTION || aliasingGets == 0) &&\n      (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0 || isTwin) {\n    return false;\n  }\n\n  if (isClassOrEnum) {\n    return true;\n  }\n  \n  return (type == Type.FUNCTION || aliasingGets == 0) &&\n      (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n    return false;\n  }\n\n  // Don't try to collapse if the one global set is a twin reference.\n  // We could theoretically handle this case in CollapseProperties, but\n  // it's probably not worth the effort.\n\n  if (isClassOrEnum || aliasingGets > 0) {\n    return false;\n  }\n  return (type == Type.FUNCTION) &&\n      (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n    if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n    }\n\n    // Don't try to collapse if the one global set is a twin reference.\n    // We could theoretically handle this case in CollapseProperties, but\n    // it's probably not worth the effort.\n\n    if (isClassOrEnum) {\n        return true;\n    }\n    // Check for twin references by confirming there are no aliasing gets\n    // and there is only one global set which is expected to be isolated.\n    return type == Type.FUNCTION && aliasingGets == 0 &&\n        (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0 || aliasingGets != 0) {\n    return false;\n  }\n\n  // Don't try to collapse if the one global set is a twin reference.\n  // We could theoretically handle this case in CollapseProperties, but\n  // it's probably not worth the effort.\n\n  if (isClassOrEnum) {\n    return true;\n  }\n  return (type == Type.FUNCTION) && (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n    if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n    }\n\n    // Don't try to collapse if the one global set is a twin reference.\n    // We could theoretically handle this case in CollapseProperties, but\n    // it's probably not worth the effort.\n    if (twinReferenceCount > 0) {\n        return false;\n    }\n\n    if (isClassOrEnum) {\n        return true;\n    }\n    return (type == Type.FUNCTION || aliasingGets == 0) &&\n        (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0 || twinReferences != 0) {\n    return false;\n  }\n\n  if (isClassOrEnum) {\n    return true;\n  }\n  return (type == Type.FUNCTION || aliasingGets == 0) &&\n      (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n"
                        ],
                        "evaluation_done": true
                    },
                    "2": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) and relevant context to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n\n    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n\n      if (isClassOrEnum) {\n        return true;\n      }\n      return (type == Type.FUNCTION || aliasingGets == 0) &&\n          (parent == null || parent.canCollapseUnannotatedChildNames());\n    }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n  public void testTwinReferenceCancelsChildCollapsing() {\n    test(\"var a = {}; if (a.b = function() {}) { a.b.c = 3; a.b(a.b.c); }\",\n         \"var a$b; if (a$b = function() {}) { a$b.c = 3; a$b(a$b.c); }\");\n  }\n```\n#Error message: junit.framework.AssertionFailedError: \nExpected: var a$b;if(a$b=function(){}){a$b.c=3;a$b(a$b.c)}\nResult: var a$b=function(){}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1\n            NAME a$b 1\n        IF 1\n            ASSIGN 1\n                NAME a$b 1\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n            BLOCK 1\n                EXPR_RESULT 1\n                    ASSIGN 1\n                        GETPROP 1\n                            NAME a$b 1\n                            STRING c 1\n                        NUMBER 3.0 1\n                EXPR_RESULT 1\n                    CALL 1\n                        NAME a$b 1\n                        GETPROP 1\n                            NAME a$b 1\n                            STRING c 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1\n            NAME a$b 1 [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:720)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testTwinReferenceCancelsChildCollapsing(CollapsePropertiesTest.java:1111)  test(\"var a = {}; if (a.b = function() {}) { a.b.c = 3; a.b(a.b.c); }\",         \"var a$b; if (a$b = function() {}) { a$b.c = 3; a$b(a$b.c); }\");\n \n#Test method 2:\n```java\n  public void testCrashInNestedAssign() {\n    test(\"var a = {}; if (a.b = function() {}) a.b();\",\n         \"var a$b; if (a$b=function() {}) { a$b(); }\");\n  }\n```\n#Error message: junit.framework.AssertionFailedError: \nExpected: var a$b;if(a$b=function(){})a$b()\nResult: var a$b=function(){}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1\n            NAME a$b 1\n        IF 1\n            ASSIGN 1\n                NAME a$b 1\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n            BLOCK 1\n                EXPR_RESULT 1\n                    CALL 1\n                        NAME a$b 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1\n            NAME a$b 1 [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:720)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testCrashInNestedAssign(CollapsePropertiesTest.java:1106)  test(\"var a = {}; if (a.b = function() {}) a.b();\",         \"var a$b; if (a$b=function() {}) { a$b(); }\");\n \n#Test method 3:\n```java\n  public void testCrashInCommaOperator() {\n    test(\"var a = {}; a.b = function() {},a.b();\",\n         \"var a$b; a$b=function() {},a$b();\");\n  }\n```\n#Error message: java.lang.IllegalArgumentException\n\tat com.google.javascript.jscomp.CollapseProperties.addStubsForUndeclaredProperties(CollapseProperties.java:813)  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));\n\tat com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode(CollapseProperties.java:617)  addStubsForUndeclaredProperties(n, alias, varParent, varNode);\n\tat com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclaration(CollapseProperties.java:550)  updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);\n\tat com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(CollapseProperties.java:445)  updateObjLitOrFunctionDeclaration(n, alias);\n\tat com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(CollapseProperties.java:451)  collapseDeclarationOfNameAndDescendants(p, alias + '$' + p.name);\n\tat com.google.javascript.jscomp.CollapseProperties.process(CollapseProperties.java:143)  collapseDeclarationOfNameAndDescendants(n, n.name);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:644)  getProcessor(compiler).process(externsRoot, mainRoot);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testCrashInCommaOperator(CollapsePropertiesTest.java:1101)  test(\"var a = {}; a.b = function() {},a.b();\",         \"var a$b; a$b=function() {},a$b();\");\n\n\n## \ud83d\udca1 Context from Project\n\n            \n```java\nprivate static Node findNonconditionalParent(Node subExpression, Node expressionRoot) { Node result = subExpression; for (Node child = subExpression, parent = child.getParent(); parent != expressionRoot; child = parent, parent = child.getParent()) { if (isConditionalOp(parent)) { if (child != parent.getFirstChild()) { result = parent; } } } return result; }\n```\n\n            \n```java\npublic void visit(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.NAME) { Var v = t.getScope().getVar(n.getString()); if (v != null && varFilter.apply(v)) { addReference(t, v, new Reference(n, parent, t, blockStack.peek())); } } if (isBlockBoundary(n, parent)) { blockStack.pop(); } }\n```\n\n            \n```java\n@Override public TernaryValue testForEquality(JSType that) { if (UNKNOWN.equals(super.testForEquality(that))) { return UNKNOWN; } if (that.isNullType() || that.isVoidType()) { return TRUE; } if (that.isUnknownType() || that.isNullable()) { return UNKNOWN; } return FALSE; }\n```\n\n            \n```java\nprivate boolean readQuotedString(int quote) throws IOException { for (int c = getChar(); c != EOF_CHAR; c = getChar()) { addToString(c); if (c == quote) return true; } stringBufferTop = 0; this.string = null; parser.addError(\\\"msg.XML.bad.form\\\"); return false; }\n```\n\n            \n```java\nboolean isDirectCallNodeReplacementPossible(Node fnNode) { Node block = NodeUtil.getFunctionBody(fnNode); if (!block.hasChildren()) { return true; } else if (block.hasOneChild()) { if (block.getFirstChild().getType() == Token.RETURN && block.getFirstChild().getFirstChild() != null) { return true; } } return false; }\n```\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\nboolean canCollapseUnannotatedChildNames() {\n    if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n    }\n\n    // Don't try to collapse if the one global set is a twin reference or a direct assignment.\n    // We could theoretically handle this case in CollapseProperties, but\n    // it's probably not worth the effort.\n\n    if (twinReference || isDirectAssignment) {\n        return false;\n    }\n\n    if (isClassOrEnum) {\n        return true;\n    }\n    return (type == Type.FUNCTION || aliasingGets == 0) &&\n        (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0 || aliasingGets != 0) {\n    return false;\n  }\n\n  // Don't try to collapse if the one global set is a twin reference.\n  if (isClassOrEnum) {\n    return true;\n  }\n  return (type == Type.FUNCTION) &&\n      (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0 || aliasingGets != 0) {\n    return false;\n  }\n\n  // Don't try to collapse if the one global set is a twin reference.\n  // We could theoretically handle this case in CollapseProperties, but\n  // it's probably not worth the effort.\n\n  if (isClassOrEnum) {\n    return true;\n  }\n  return (type == Type.FUNCTION) &&\n      (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0 || isTwinReference) {\n    return false;\n  }\n\n  // Don't try to collapse if the one global set is a twin reference.\n  // We could theoretically handle this case in CollapseProperties, but\n  // it's probably not worth the effort.\n\n  if (isClassOrEnum) {\n    return true;\n  }\n  return (type == Type.FUNCTION || aliasingGets == 0) && \n      (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0 || twinReferences) {\n    return false;\n  }\n\n  if (isClassOrEnum) {\n    return true;\n  }\n\n  return (type == Type.FUNCTION || aliasingGets == 0) && \n      (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n    return false;\n  }\n\n  // Don't try to collapse if the one global set is a twin reference.\n  // We could theoretically handle this case in CollapseProperties, but\n  // it's probably not worth the effort.\n  if (twinReferences > 0) {\n    return false;\n  }\n  \n  if (isClassOrEnum) {\n    return true;\n  }\n  return (type == Type.FUNCTION || aliasingGets == 0) &&\n      (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n    return false;\n  }\n\n  // Don't try to collapse if the one global set is a twin reference.\n  // We could theoretically handle this case in CollapseProperties, but\n  // it's probably not worth the effort.\n\n  if (isClassOrEnum || !isTwinReference) {\n    return true;\n  }\n  return (type == Type.FUNCTION || aliasingGets == 0) &&\n      (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n  if (type == Type.OTHER || globalSets != 1 || localSets != 0 || twinReferences == 1) {\n    return false;\n  }\n\n  if (isClassOrEnum) {\n    return true;\n  }\n  return (type == Type.FUNCTION || aliasingGets == 0) &&\n      (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n    if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n    }\n\n    // Don't try to collapse if the one global set is a twin reference.\n    if (globalSets == 1 && localSets == 0 && aliasingGets > 0) {\n        return false;\n    }\n\n    if (isClassOrEnum) {\n        return true;\n    }\n    \n    return (type == Type.FUNCTION || aliasingGets == 0) &&\n        (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n",
                            "\nboolean canCollapseUnannotatedChildNames() {\n    if (type == Type.OTHER || globalSets != 1 || localSets != 0 || twinReferences > 1) {\n        return false;\n    }\n\n    if (isClassOrEnum) {\n        return true;\n    }\n    \n    return (type == Type.FUNCTION || aliasingGets == 0) &&\n        (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n"
                        ],
                        "plausible_patches": [
                            "\nboolean canCollapseUnannotatedChildNames() {\n    if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n    }\n\n    // Don't try to collapse if the one global set is a twin reference.\n    if (globalSets == 1 && localSets == 0 && aliasingGets > 0) {\n        return false;\n    }\n\n    if (isClassOrEnum) {\n        return true;\n    }\n    \n    return (type == Type.FUNCTION || aliasingGets == 0) &&\n        (parent == null || parent.canCollapseUnannotatedChildNames());\n}\n"
                        ],
                        "evaluation_done": true
                    }
                }
            },
            {
                "path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
                "start_loc": 188,
                "end_loc": 193,
                "buggy_function": "  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation) {\n    populated = true;\n    }\n    return currentInfo.documentBlock(description);\n  }\n",
                "fixed_function": "  public boolean recordBlockDescription(String description) {\n    populated = true;\n    return currentInfo.documentBlock(description);\n  }\n",
                "comment": "  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n",
                "normalized_body": [
                    "public boolean recordBlockDescription(String description) { if (parseDocumentation) { populated = true; } return currentInfo.documentBlock(description); }"
                ],
                "top_similar_methods": [
                    [
                        1.0,
                        "public boolean recordBlockDescription(String description) { if (parseDocumentation) { populated = true; } return currentInfo.documentBlock(description); }"
                    ],
                    [
                        0.9846843481063843,
                        "public boolean recordVersion(String version) { if (currentInfo.documentVersion(version)) { populated = true; return true; } else { return false; } }"
                    ],
                    [
                        0.9826653003692627,
                        "public boolean recordTemplateTypeName(String name) { if (currentInfo.declareTemplateTypeName(name)) { populated = true; return true; } else { return false; } }"
                    ],
                    [
                        0.9814064502716064,
                        "public boolean recordReturnDescription(String description) { if (currentInfo.documentReturn(description)) { populated = true; return true; } else { return false; } }"
                    ],
                    [
                        0.9804609417915344,
                        "public void process(Node externs, Node root) { requiresLineNumbers = false; NodeTraversal.traverse(compiler, root, this); }"
                    ],
                    [
                        0.9804378151893616,
                        "public boolean recordFileOverview(String description) { if (currentInfo.documentFileOverview(description)) { populated = true; return true; } else { return false; } }"
                    ],
                    [
                        0.980385422706604,
                        "public boolean addAuthor(String author) { if (currentInfo.documentAuthor(author)) { populated = true; return true; } else { return false; } }"
                    ]
                ],
                "directly_related_tests": [
                    "com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n\n  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation) {\n    populated = true;\n    }\n    return currentInfo.documentBlock(description);\n  }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n  public void testJSDocComments() {\n    test(\"function A() { /** This is a jsdoc comment */ this.foo; }\", ok);\n    test(\"function A() { /* This is a normal comment */ this.foo; }\", e);\n  }\n```\n#Error message: junit.framework.AssertionFailedError: Unexpected error(s): JSC_USELESS_CODE. Suspicious code. This code lacks side-effects. Is there a bug? at testcode line 1 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:659)  assertEquals(          \"Unexpected error(s): \" + Join.join(\"\\n\", compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CheckSideEffectsTest.test(CheckSideEffectsTest.java:33)  test(js, error == null ? js : null, error);\n\tat com.google.javascript.jscomp.CheckSideEffectsTest.testJSDocComments(CheckSideEffectsTest.java:86)  test(\"function A() { /** This is a jsdoc comment */ this.foo; }\", ok);\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n  \n  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation && description.startsWith(\"/**\")) {\n      populated = true;\n      return currentInfo.documentBlock(description);\n    }\n    return false;\n  }\n",
                            "\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n\n  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation) {\n      populated = true;\n      return currentInfo.documentBlock(description);\n    }\n    return false;\n  }\n",
                            "\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n\n  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation) {\n      populated = true;\n      return currentInfo.documentBlock(description);\n    }\n    return false;\n  }\n",
                            "\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n\n  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation && isJSDocComment(description)) {\n      populated = true;\n      return currentInfo.documentBlock(description);\n    }\n    return false;\n  }\n\n  private boolean isJSDocComment(String comment) {\n    return comment.trim().startsWith(\"/**\");\n  }\n",
                            "\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n\n  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation) {\n      populated = true;\n      return currentInfo.documentBlock(description);\n    }\n    return false;\n  }\n",
                            "\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation && description.trim().startsWith(\"/**\")) {\n      populated = true;\n    }\n    return currentInfo.documentBlock(description);\n  }\n",
                            "\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n\n  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation) {\n      populated = true;\n      return currentInfo.documentBlock(description);\n    }\n    return false;\n  }\n",
                            "\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n\n  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation && description.startsWith(\"/**\")) {\n      populated = true;\n    }\n    return currentInfo.documentBlock(description);\n  }\n",
                            "\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n\n  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation && description.startsWith(\"/**\")) {\n      populated = true;\n    }\n    return currentInfo.documentBlock(description);\n  }\n",
                            "\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n\n  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation && description.startsWith(\"/**\")) {\n      populated = true;\n    }\n    return currentInfo.documentBlock(description);\n  }\n"
                        ],
                        "evaluation_done": true
                    },
                    "2": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) and relevant context to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n\n  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation) {\n    populated = true;\n    }\n    return currentInfo.documentBlock(description);\n  }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n  public void testJSDocComments() {\n    test(\"function A() { /** This is a jsdoc comment */ this.foo; }\", ok);\n    test(\"function A() { /* This is a normal comment */ this.foo; }\", e);\n  }\n```\n#Error message: junit.framework.AssertionFailedError: Unexpected error(s): JSC_USELESS_CODE. Suspicious code. This code lacks side-effects. Is there a bug? at testcode line 1 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:659)  assertEquals(          \"Unexpected error(s): \" + Join.join(\"\\n\", compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CheckSideEffectsTest.test(CheckSideEffectsTest.java:33)  test(js, error == null ? js : null, error);\n\tat com.google.javascript.jscomp.CheckSideEffectsTest.testJSDocComments(CheckSideEffectsTest.java:86)  test(\"function A() { /** This is a jsdoc comment */ this.foo; }\", ok);\n\n\n## \ud83d\udca1 Context from Project\n\n            \n```java\npublic boolean recordVersion(String version) { if (currentInfo.documentVersion(version)) { populated = true; return true; } else { return false; } }\n```\n\n            \n```java\npublic boolean recordTemplateTypeName(String name) { if (currentInfo.declareTemplateTypeName(name)) { populated = true; return true; } else { return false; } }\n```\n\n            \n```java\npublic boolean recordReturnDescription(String description) { if (currentInfo.documentReturn(description)) { populated = true; return true; } else { return false; } }\n```\n\n            \n```java\npublic void process(Node externs, Node root) { requiresLineNumbers = false; NodeTraversal.traverse(compiler, root, this); }\n```\n\n            \n```java\npublic boolean recordFileOverview(String description) { if (currentInfo.documentFileOverview(description)) { populated = true; return true; } else { return false; } }\n```\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\n/**\n * Records a block-level description.\n *\n * @return {@code true} if the description was recorded.\n */\npublic boolean recordBlockDescription(String description) {\n  if (currentInfo.documentBlock(description)) {\n    populated = parseDocumentation;\n    return true;\n  } else {\n    return false;\n  }\n}\n",
                            "\n/**\n * Records a block-level description.\n *\n * @return {@code true} if the description was recorded.\n */\npublic boolean recordBlockDescription(String description) {\n  if (currentInfo.documentBlock(description)) {\n    populated = true;\n    return true;\n  }\n  return false;\n}\n",
                            "\n/**\n * Records a block-level description.\n *\n * @return {@code true} if the description was recorded.\n */\n\npublic boolean recordBlockDescription(String description) {\n  if (currentInfo.documentBlock(description)) {\n    if (parseDocumentation) {\n      populated = true;\n    }\n    return true;\n  }\n  return false;\n}\n",
                            "\n  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n\n  public boolean recordBlockDescription(String description) {\n    if (currentInfo.documentBlock(description)) {\n      if (parseDocumentation) {\n        populated = true;\n      }\n      return true;\n    }\n    return false;\n  }\n",
                            "\npublic boolean recordBlockDescription(String description) {\n    if (currentInfo.documentBlock(description)) {\n        if (parseDocumentation) {\n            populated = true;\n        }\n        return true;\n    }\n    return false;\n}\n",
                            "\n/**\n * Records a block-level description.\n *\n * @return {@code true} if the description was recorded.\n */\npublic boolean recordBlockDescription(String description) {\n  if (!parseDocumentation) {\n    return false;\n  }\n  if (currentInfo.documentBlock(description)) {\n    populated = true;\n    return true;\n  }\n  return false;\n}\n",
                            "\n/**\n * Records a block-level description.\n *\n * @return {@code true} if the description was recorded.\n */\npublic boolean recordBlockDescription(String description) {\n    if (currentInfo.documentBlock(description)) {\n        if (parseDocumentation) {\n            populated = true;\n        }\n        return true;\n    }\n    return false;\n}\n",
                            "\n/**\n * Records a block-level description.\n *\n * @return {@code true} if the description was recorded.\n */\n\npublic boolean recordBlockDescription(String description) {\n    if (currentInfo.documentBlock(description)) {\n        populated = true;\n        return true;\n    } else {\n        return false;\n    }\n}\n",
                            "\n/**\n * Records a block-level description.\n *\n * @return {@code true} if the description was recorded.\n */\npublic boolean recordBlockDescription(String description) {\n  if (currentInfo.documentBlock(description)) {\n    populated = true;\n    return true;\n  } else {\n    return false;\n  }\n}\n",
                            "\n/**\n * Records a block-level description.\n *\n * @return {@code true} if the description was recorded.\n */\npublic boolean recordBlockDescription(String description) {\n  if (currentInfo.documentBlock(description)) {\n    populated = true;\n    return true;\n  } else {\n    return false;\n  }\n}\n"
                        ],
                        "plausible_patches": [
                            "\n/**\n * Records a block-level description.\n *\n * @return {@code true} if the description was recorded.\n */\npublic boolean recordBlockDescription(String description) {\n  if (currentInfo.documentBlock(description)) {\n    populated = true;\n    return true;\n  }\n  return false;\n}\n",
                            "\n/**\n * Records a block-level description.\n *\n * @return {@code true} if the description was recorded.\n */\n\npublic boolean recordBlockDescription(String description) {\n    if (currentInfo.documentBlock(description)) {\n        populated = true;\n        return true;\n    } else {\n        return false;\n    }\n}\n"
                        ],
                        "evaluation_done": true
                    }
                }
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments": {
                "path": "test/com/google/javascript/jscomp/CheckSideEffectsTest.java",
                "function_name": "testJSDocComments",
                "src": "  public void testJSDocComments() {\n    test(\"function A() { /** This is a jsdoc comment */ this.foo; }\", ok);\n    test(\"function A() { /* This is a normal comment */ this.foo; }\", e);\n  }",
                "error_msg": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USELESS_CODE. Suspicious code. This code lacks side-effects. Is there a bug? at testcode line 1 expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:659)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)\n\tat com.google.javascript.jscomp.CheckSideEffectsTest.test(CheckSideEffectsTest.java:33)\n\tat com.google.javascript.jscomp.CheckSideEffectsTest.testJSDocComments(CheckSideEffectsTest.java:86)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USELESS_CODE. Suspicious code. This code lacks side-effects. Is there a bug? at testcode line 1 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:659)  assertEquals(          \"Unexpected error(s): \" + Join.join(\"\\n\", compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CheckSideEffectsTest.test(CheckSideEffectsTest.java:33)  test(js, error == null ? js : null, error);\n\tat com.google.javascript.jscomp.CheckSideEffectsTest.testJSDocComments(CheckSideEffectsTest.java:86)  test(\"function A() { /** This is a jsdoc comment */ this.foo; }\", ok);"
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testTwinReferenceCancelsChildCollapsing": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testTwinReferenceCancelsChildCollapsing",
                "src": "  public void testTwinReferenceCancelsChildCollapsing() {\n    test(\"var a = {}; if (a.b = function() {}) { a.b.c = 3; a.b(a.b.c); }\",\n         \"var a$b; if (a$b = function() {}) { a$b.c = 3; a$b(a$b.c); }\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$b;if(a$b=function(){}){a$b.c=3;a$b(a$b.c)}\nResult: var a$b=function(){}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1\n            NAME a$b 1\n        IF 1\n            ASSIGN 1\n                NAME a$b 1\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n            BLOCK 1\n                EXPR_RESULT 1\n                    ASSIGN 1\n                        GETPROP 1\n                            NAME a$b 1\n                            STRING c 1\n                        NUMBER 3.0 1\n                EXPR_RESULT 1\n                    CALL 1\n                        NAME a$b 1\n                        GETPROP 1\n                            NAME a$b 1\n                            STRING c 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1\n            NAME a$b 1 [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:720)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testTwinReferenceCancelsChildCollapsing(CollapsePropertiesTest.java:1111)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$b;if(a$b=function(){}){a$b.c=3;a$b(a$b.c)}\nResult: var a$b=function(){}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1\n            NAME a$b 1\n        IF 1\n            ASSIGN 1\n                NAME a$b 1\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n            BLOCK 1\n                EXPR_RESULT 1\n                    ASSIGN 1\n                        GETPROP 1\n                            NAME a$b 1\n                            STRING c 1\n                        NUMBER 3.0 1\n                EXPR_RESULT 1\n                    CALL 1\n                        NAME a$b 1\n                        GETPROP 1\n                            NAME a$b 1\n                            STRING c 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1\n            NAME a$b 1 [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:720)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testTwinReferenceCancelsChildCollapsing(CollapsePropertiesTest.java:1111)  test(\"var a = {}; if (a.b = function() {}) { a.b.c = 3; a.b(a.b.c); }\",         \"var a$b; if (a$b = function() {}) { a$b.c = 3; a$b(a$b.c); }\");"
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInNestedAssign": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testCrashInNestedAssign",
                "src": "  public void testCrashInNestedAssign() {\n    test(\"var a = {}; if (a.b = function() {}) a.b();\",\n         \"var a$b; if (a$b=function() {}) { a$b(); }\");\n  }",
                "error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$b;if(a$b=function(){})a$b()\nResult: var a$b=function(){}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1\n            NAME a$b 1\n        IF 1\n            ASSIGN 1\n                NAME a$b 1\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n            BLOCK 1\n                EXPR_RESULT 1\n                    CALL 1\n                        NAME a$b 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1\n            NAME a$b 1 [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:720)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testCrashInNestedAssign(CollapsePropertiesTest.java:1106)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: \nExpected: var a$b;if(a$b=function(){})a$b()\nResult: var a$b=function(){}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1\n            NAME a$b 1\n        IF 1\n            ASSIGN 1\n                NAME a$b 1\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n            BLOCK 1\n                EXPR_RESULT 1\n                    CALL 1\n                        NAME a$b 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1\n            NAME a$b 1 [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:720)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testCrashInNestedAssign(CollapsePropertiesTest.java:1106)  test(\"var a = {}; if (a.b = function() {}) a.b();\",         \"var a$b; if (a$b=function() {}) { a$b(); }\");"
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInCommaOperator": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testCrashInCommaOperator",
                "src": "  public void testCrashInCommaOperator() {\n    test(\"var a = {}; a.b = function() {},a.b();\",\n         \"var a$b; a$b=function() {},a$b();\");\n  }",
                "error_msg": "java.lang.IllegalArgumentException\n\tat com.google.common.base.Preconditions.checkArgument(Preconditions.java:71)\n\tat com.google.javascript.jscomp.CollapseProperties.addStubsForUndeclaredProperties(CollapseProperties.java:813)\n\tat com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode(CollapseProperties.java:617)\n\tat com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclaration(CollapseProperties.java:550)\n\tat com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(CollapseProperties.java:445)\n\tat com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(CollapseProperties.java:451)\n\tat com.google.javascript.jscomp.CollapseProperties.process(CollapseProperties.java:143)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:644)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testCrashInCommaOperator(CollapsePropertiesTest.java:1101)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "java.lang.IllegalArgumentException\n\tat com.google.javascript.jscomp.CollapseProperties.addStubsForUndeclaredProperties(CollapseProperties.java:813)  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));\n\tat com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode(CollapseProperties.java:617)  addStubsForUndeclaredProperties(n, alias, varParent, varNode);\n\tat com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclaration(CollapseProperties.java:550)  updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);\n\tat com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(CollapseProperties.java:445)  updateObjLitOrFunctionDeclaration(n, alias);\n\tat com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(CollapseProperties.java:451)  collapseDeclarationOfNameAndDescendants(p, alias + '$' + p.name);\n\tat com.google.javascript.jscomp.CollapseProperties.process(CollapseProperties.java:143)  collapseDeclarationOfNameAndDescendants(n, n.name);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:644)  getProcessor(compiler).process(externsRoot, mainRoot);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testCrashInCommaOperator(CollapsePropertiesTest.java:1101)  test(\"var a = {}; a.b = function() {},a.b();\",         \"var a$b; a$b=function() {},a$b();\");"
            }
        },
        "evaluation_done": true,
        "context_generation_done": true,
        "evaluation_done2": true
    }
}