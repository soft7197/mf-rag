{
    "Mockito-4": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/org/mockito/exceptions/Reporter.java",
                "start_loc": 417,
                "end_loc": 428,
                "buggy_function": "    public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n        ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n        String scenario = scenarioPrinter.print(invocations);\n\n        throw new NoInteractionsWanted(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                undesired.getLocation(),\n                scenario\n        ));\n    }\n",
                "fixed_function": "    public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n        ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n        String scenario = scenarioPrinter.print(invocations);\n\n        throw new NoInteractionsWanted(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + safelyGetMockName(undesired.getMock()) + \"':\",\n                undesired.getLocation(),\n                scenario\n        ));\n    }\n",
                "comment": "",
                "normalized_body": [
                    "public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) { ScenarioPrinter scenarioPrinter = new ScenarioPrinter(); String scenario = scenarioPrinter.print(invocations); throw new NoInteractionsWanted(join(\\\"No interactions wanted here:\\\", new LocationImpl(), \\\"But found this interaction on mock '\\\" + undesired.getMock() + \\\"':\\\", undesired.getLocation(), scenario)); }"
                ],
                "top_similar_methods": [
                    [
                        1.0,
                        "public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) { ScenarioPrinter scenarioPrinter = new ScenarioPrinter(); String scenario = scenarioPrinter.print(invocations); throw new NoInteractionsWanted(join(\\\"No interactions wanted here:\\\", new LocationImpl(), \\\"But found this interaction on mock '\\\" + undesired.getMock() + \\\"':\\\", undesired.getLocation(), scenario)); }"
                    ],
                    [
                        0.9645490646362305,
                        "public void tooLittleActualInvocationsInOrder(org.mockito.internal.reporting.Discrepancy discrepancy, DescribedInvocation wanted, Location lastActualLocation) { String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation); throw new VerificationInOrderFailure(join(\\\"Verification in order failure:\\\" + message)); }"
                    ],
                    [
                        0.9642764925956726,
                        "public static Object getInternalState(Object target, String field) { Class<?> c = target.getClass(); try { Field f = getFieldFromHierarchy(c, field); f.setAccessible(true); return f.get(target); } catch (Exception e) { throw new RuntimeException(\\\"Unable to get internal state on a private field. Please report to mockito mailing list.\\\", e); } }"
                    ],
                    [
                        0.9602466225624084,
                        "public void foundStubCalledWithDifferentArgs(Invocation unused, InvocationMatcher unstubbed) { logger.log(join(\\\" *** Stubbing warnings from Mockito: *** \\\", \\\"\\\", \\\"stubbed with those args here \\\" + unused.getLocation(), \\\"BUT called with different args \\\" + unstubbed.getInvocation().getLocation(), \\\"\\\")); }"
                    ],
                    [
                        0.9588119983673096,
                        "public void assertValue(Collection value) { assertEquals(elements.length, value.size()); boolean containsSublist = Collections.indexOfSubList((List<?>) value, Arrays.asList(elements)) != -1; assertTrue(\\\"Elements:\\\" + \\\"\\n\\\" + Arrays.toString(elements) + \\\"\\n\\\" + \\\"were not found in collection:\\\" + \\\"\\n\\\" + value, containsSublist); }"
                    ],
                    [
                        0.9586783647537231,
                        "public void moreThanOneAnnotationNotAllowed(String fieldName) { throw new MockitoException(\\\"You cannot have more than one Mockito annotation on a field!\\n\\\" + \\\"The field '\\\" + fieldName + \\\"' has multiple Mockito annotations.\\n\\\" + \\\"For info how to use annotations see examples in javadoc for MockitoAnnotations class.\\\"); }"
                    ],
                    [
                        0.9578500390052795,
                        "public void wantedButNotInvoked(DescribedInvocation wanted, List<? extends DescribedInvocation> invocations) { String allInvocations; if (invocations.isEmpty()) { allInvocations = \\\"Actually, there were zero interactions with this mock.\\n\\\"; } else { StringBuilder sb = new StringBuilder(\\\"\\nHowever, there were other interactions with this mock:\\n\\\"); for (DescribedInvocation i : invocations) { sb.append(i.toString()).append(\\\"\\n\\\").append(i.getLocation()).append(\\\"\\n\\n\\\"); } allInvocations = sb.toString(); } String message = createWantedButNotInvokedMessage(wanted); throw new WantedButNotInvoked(message + allInvocations); }"
                    ],
                    [
                        0.9570634365081787,
                        "public void mocksHaveToBePassedToVerifyNoMoreInteractions() { throw new MockitoException(join(\\\"Method requires argument(s)!\\\", \\\"Pass mocks that should be verified, e.g:\\\", \\\" verifyNoMoreInteractions(mockOne, mockTwo);\\\", \\\" verifyZeroInteractions(mockOne, mockTwo);\\\", \\\"\\\")); }"
                    ]
                ],
                "directly_related_tests": [
                    "org.mockito.exceptions.ReporterTest::can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted",
                    "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest::should_not_throw_a_ClassCastException"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n\n    public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n        ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n        String scenario = scenarioPrinter.print(invocations);\n\n        throw new NoInteractionsWanted(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                undesired.getLocation(),\n                scenario\n        ));\n    }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted() throws Exception {\n        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();\n        new Reporter().noMoreInteractionsWanted(invocation_with_bogus_default_answer, Collections.<VerificationAwareInvocation>emptyList());\n    }\n```\n#Error message: java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.NoInteractionsWanted> but was<java.lang.ClassCastException>\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWanted(Reporter.java:424)  \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n\tat org.mockito.exceptions.ReporterTest.can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted(ReporterTest.java:41)  new Reporter().noMoreInteractionsWanted(invocation_with_bogus_default_answer, Collections.<VerificationAwareInvocation>emptyList());\n\t... 33 more\n \n#Test method 2:\n```java\n    public void should_not_throw_a_ClassCastException() {\n        TestMock test = mock(TestMock.class, new Answer() {\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return false;\n            }\n        });\n        test.m1();\n        verifyZeroInteractions(test);\n    }\n```\n#Error message: java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.NoInteractionsWanted> but was<java.lang.ClassCastException>\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWanted(Reporter.java:424)  \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n\tat org.mockito.internal.verification.NoMoreInteractions.verify(NoMoreInteractions.java:24)  new Reporter().noMoreInteractionsWanted(unverified, (List) data.getAllInvocations());\n\tat org.mockito.internal.MockitoCore.verifyNoMoreInteractions(MockitoCore.java:113)  VerificationModeFactory.noMoreInteractions().verify(data);\n\tat org.mockito.Mockito.verifyZeroInteractions(Mockito.java:1674)  MOCKITO_CORE.verifyNoMoreInteractions(mocks);\n\tat org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest.should_not_throw_a_ClassCastException(ClassCastExOnVerifyZeroInteractionsTest.java:24)  verifyZeroInteractions(test);\n\t... 31 more\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n\n    Object mock = undesired.getMock();\n    String mockName = (mock instanceof String) ? (String) mock : mock.getClass().getSimpleName();\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n\n    Object mockObject = undesired.getMock();\n    String mockName = mockObject != null ? mockObject.toString() : \"null\";\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n    String mockName = undesired.getMock() instanceof String ? (String) undesired.getMock() : \"[unknown]\";\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n\n    Object mock = undesired.getMock();\n    String mockName = (mock instanceof String) ? (String) mock : mock.toString();\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n",
                            "\n    public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n        ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n        String scenario = scenarioPrinter.print(invocations);\n\n        throw new NoInteractionsWanted(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n                undesired.getLocation(),\n                scenario\n        ));\n    }\n",
                            "\n    public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n        ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n        String scenario = scenarioPrinter.print(invocations);\n\n        Object mock = undesired.getMock();\n        String mockName = (mock == null) ? \"null\" : mock.toString();\n\n        throw new NoInteractionsWanted(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + mockName + \"':\",\n                undesired.getLocation(),\n                scenario\n        ));\n    }\n",
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n\n    Object mock = undesired.getMock();\n    String mockName = mock instanceof String ? (String) mock : mock.getClass().getSimpleName();\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n\n    Object mock = undesired.getMock();\n    String mockName = (mock != null) ? mock.toString() : \"Unknown\";\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n\n    Object mock = undesired.getMock();\n    String mockName = (mock != null) ? mock.toString() : \"null\";\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n"
                        ],
                        "plausible_patches": [
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n\n    Object mock = undesired.getMock();\n    String mockName = (mock instanceof String) ? (String) mock : mock.getClass().getSimpleName();\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n    String mockName = undesired.getMock() instanceof String ? (String) undesired.getMock() : \"[unknown]\";\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n\n    Object mock = undesired.getMock();\n    String mockName = mock instanceof String ? (String) mock : mock.getClass().getSimpleName();\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n\n    Object mock = undesired.getMock();\n    String mockName = (mock instanceof String) ? (String) mock : mock.getClass().getSimpleName();\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n    String mockName = undesired.getMock() instanceof String ? (String) undesired.getMock() : \"[unknown]\";\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n    ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n    String scenario = scenarioPrinter.print(invocations);\n\n    Object mock = undesired.getMock();\n    String mockName = mock instanceof String ? (String) mock : mock.getClass().getSimpleName();\n\n    throw new NoInteractionsWanted(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation(),\n            scenario\n    ));\n}\n"
                        ],
                        "evaluation_done": true
                    }
                }
            },
            {
                "path": "src/org/mockito/exceptions/Reporter.java",
                "start_loc": 430,
                "end_loc": 437,
                "buggy_function": "    public void noMoreInteractionsWantedInOrder(Invocation undesired) {\n        throw new VerificationInOrderFailure(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                undesired.getLocation()\n        ));\n    }\n",
                "fixed_function": "    public void noMoreInteractionsWantedInOrder(Invocation undesired) {\n        throw new VerificationInOrderFailure(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + safelyGetMockName(undesired.getMock()) + \"':\",\n                undesired.getLocation()\n        ));\n    }\n",
                "comment": "",
                "normalized_body": [
                    "public void noMoreInteractionsWantedInOrder(Invocation undesired) { throw new VerificationInOrderFailure(join(\\\"No interactions wanted here:\\\", new LocationImpl(), \\\"But found this interaction on mock '\\\" + undesired.getMock() + \\\"':\\\", undesired.getLocation())); }"
                ],
                "top_similar_methods": [
                    [
                        1.0,
                        "public void noMoreInteractionsWantedInOrder(Invocation undesired) { throw new VerificationInOrderFailure(join(\\\"No interactions wanted here:\\\", new LocationImpl(), \\\"But found this interaction on mock '\\\" + undesired.getMock() + \\\"':\\\", undesired.getLocation())); }"
                    ],
                    [
                        0.9758299589157104,
                        "public void validateExtraInterfaces(Class classToMock, Collection<Class> extraInterfaces) { if (extraInterfaces == null) { return; } for (Class i : extraInterfaces) { if (classToMock == i) { new Reporter().extraInterfacesCannotContainMockedType(classToMock); } } }"
                    ],
                    [
                        0.9748026728630066,
                        "public void tooManyActualInvocations(int wantedCount, int actualCount, DescribedInvocation wanted, Location firstUndesired) { String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired); throw new TooManyActualInvocations(message); }"
                    ],
                    [
                        0.9733357429504395,
                        "public void injectMocksOnFields(Set<Field> needingInjection, Set<Object> mocks, Object testClassInstance) { MockInjection.onFields(needingInjection, testClassInstance).withMocks(mocks).tryConstructorInjection().tryPropertyOrFieldInjection().handleSpyAnnotation().apply(); }"
                    ],
                    [
                        0.9725426435470581,
                        "public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) { String message = join(\\\"Argument(s) are different! Wanted:\\\", wanted, new LocationImpl(), \\\"Actual invocation has different arguments:\\\", actual, actualLocation, \\\"\\\"); throw JUnitTool.createArgumentsAreDifferentException(message, wanted, actual); }"
                    ],
                    [
                        0.9724450707435608,
                        "public void getfield(String name) { ClassEmitter.FieldInfo info = ce.getFieldInfo(name); int opcode = TypeUtils.isStatic(info.access) ? Constants.GETSTATIC : Constants.GETFIELD; emit_field(opcode, ce.getClassType(), name, info.type); }"
                    ],
                    [
                        0.9705153107643127,
                        "public Object[] resolveTypeInstances(Class<?>... argTypes) { List<Object> argumentInstances = new ArrayList<Object>(argTypes.length); for (Class<?> argType : argTypes) { argumentInstances.add(objectThatIsAssignableFrom(argType)); } return argumentInstances.toArray(); }"
                    ],
                    [
                        0.9703891277313232,
                        "public void visitFrame(final int type, final int nLocal, final Object[] local, final int nStack, final Object[] stack) { instructions.add(new FrameNode(type, nLocal, local == null ? null : getLabelNodes(local), nStack, stack == null ? null : getLabelNodes(stack))); }"
                    ]
                ],
                "directly_related_tests": [
                    "org.mockito.exceptions.ReporterTest::can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n\n    public void noMoreInteractionsWantedInOrder(Invocation undesired) {\n        throw new VerificationInOrderFailure(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                undesired.getLocation()\n        ));\n    }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order() throws Exception {\n        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();\n        new Reporter().noMoreInteractionsWantedInOrder(invocation_with_bogus_default_answer);\n    }\n```\n#Error message: java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.VerificationInOrderFailure> but was<java.lang.ClassCastException>\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWantedInOrder(Reporter.java:434)  \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n\tat org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order(ReporterTest.java:47)  new Reporter().noMoreInteractionsWantedInOrder(invocation_with_bogus_default_answer);\n\t... 33 more\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\n    public void noMoreInteractionsWantedInOrder(Invocation undesired) {\n        throw new VerificationInOrderFailure(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n                undesired.getLocation()\n        ));\n    }\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    Object mock = undesired.getMock();\n    String mockName = mock instanceof String ? (String) mock : mock.toString();\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation()\n    ));\n}\n"
                        ],
                        "evaluation_done": true
                    },
                    "2": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) and relevant context to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n\n    public void noMoreInteractionsWantedInOrder(Invocation undesired) {\n        throw new VerificationInOrderFailure(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                undesired.getLocation()\n        ));\n    }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order() throws Exception {\n        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();\n        new Reporter().noMoreInteractionsWantedInOrder(invocation_with_bogus_default_answer);\n    }\n```\n#Error message: java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.VerificationInOrderFailure> but was<java.lang.ClassCastException>\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWantedInOrder(Reporter.java:434)  \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n\tat org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order(ReporterTest.java:47)  new Reporter().noMoreInteractionsWantedInOrder(invocation_with_bogus_default_answer);\n\t... 33 more\n\n\n## \ud83d\udca1 Context from Project\n\n            \n```java\npublic void validateExtraInterfaces(Class classToMock, Collection<Class> extraInterfaces) { if (extraInterfaces == null) { return; } for (Class i : extraInterfaces) { if (classToMock == i) { new Reporter().extraInterfacesCannotContainMockedType(classToMock); } } }\n```\n\n            \n```java\npublic void tooManyActualInvocations(int wantedCount, int actualCount, DescribedInvocation wanted, Location firstUndesired) { String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired); throw new TooManyActualInvocations(message); }\n```\n\n            \n```java\npublic void injectMocksOnFields(Set<Field> needingInjection, Set<Object> mocks, Object testClassInstance) { MockInjection.onFields(needingInjection, testClassInstance).withMocks(mocks).tryConstructorInjection().tryPropertyOrFieldInjection().handleSpyAnnotation().apply(); }\n```\n\n            \n```java\npublic void argumentsAreDifferent(String wanted, String actual, Location actualLocation) { String message = join(\\\"Argument(s) are different! Wanted:\\\", wanted, new LocationImpl(), \\\"Actual invocation has different arguments:\\\", actual, actualLocation, \\\"\\\"); throw JUnitTool.createArgumentsAreDifferentException(message, wanted, actual); }\n```\n\n            \n```java\npublic void getfield(String name) { ClassEmitter.FieldInfo info = ce.getFieldInfo(name); int opcode = TypeUtils.isStatic(info.access) ? Constants.GETSTATIC : Constants.GETFIELD; emit_field(opcode, ce.getClassType(), name, info.type); }\n```\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    Object mock = undesired.getMock();\n    String mockName = mock != null ? mock.toString() : \"null\";\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    Object mock = undesired.getMock();\n    String mockName = (mock instanceof String) ? (String) mock : String.valueOf(mock);\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    Object mock = undesired.getMock();\n    String mockName = (mock instanceof String) ? (String) mock : mock.toString();\n\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    try {\n        String mockName = String.valueOf(undesired.getMock());\n        throw new VerificationInOrderFailure(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + mockName + \"':\",\n                undesired.getLocation()\n        ));\n    } catch (ClassCastException e) {\n        throw new VerificationInOrderFailure(\"Failed to cast mock object to String. Please check mock configuration.\");\n    }\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    String mockName;\n    try {\n        mockName = (String) undesired.getMock();\n    } catch (ClassCastException e) {\n        mockName = \"unknown mock\";\n    }\n    \n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    Object mock = undesired.getMock();\n    String mockName = (mock instanceof String) ? (String) mock : mock.toString();\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + String.valueOf(undesired.getMock()) + \"':\",\n            undesired.getLocation()\n    ));\n}\n"
                        ],
                        "evaluation_done": true,
                        "plausible_patches": [
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    try {\n        String mockName = String.valueOf(undesired.getMock());\n        throw new VerificationInOrderFailure(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + mockName + \"':\",\n                undesired.getLocation()\n        ));\n    } catch (ClassCastException e) {\n        throw new VerificationInOrderFailure(\"Failed to cast mock object to String. Please check mock configuration.\");\n    }\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    String mockName;\n    try {\n        mockName = (String) undesired.getMock();\n    } catch (ClassCastException e) {\n        mockName = \"unknown mock\";\n    }\n    \n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation()\n    ));\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    try {\n        String mockName = String.valueOf(undesired.getMock());\n        throw new VerificationInOrderFailure(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + mockName + \"':\",\n                undesired.getLocation()\n        ));\n    } catch (ClassCastException e) {\n        throw new VerificationInOrderFailure(\"Failed to cast mock object to String. Please check mock configuration.\");\n    }\n}\n",
                            "\npublic void noMoreInteractionsWantedInOrder(Invocation undesired) {\n    String mockName;\n    try {\n        mockName = (String) undesired.getMock();\n    } catch (ClassCastException e) {\n        mockName = \"unknown mock\";\n    }\n    \n    throw new VerificationInOrderFailure(join(\n            \"No interactions wanted here:\",\n            new LocationImpl(),\n            \"But found this interaction on mock '\" + mockName + \"':\",\n            undesired.getLocation()\n    ));\n}\n"
                        ]
                    }
                }
            },
            {
                "path": "src/org/mockito/exceptions/Reporter.java",
                "start_loc": 676,
                "end_loc": 678,
                "buggy_function": "    private String exceptionCauseMessageIfAvailable(Exception details) {\n        return details.getCause().getMessage();\n    }\n",
                "fixed_function": "    private String exceptionCauseMessageIfAvailable(Exception details) {\n        if (details.getCause() == null) {\n            return details.getMessage();\n        }\n        return details.getCause().getMessage();\n    }\n",
                "comment": "",
                "normalized_body": [
                    "private String exceptionCauseMessageIfAvailable(Exception details) { return details.getCause().getMessage(); }"
                ],
                "top_similar_methods": [
                    [
                        1.0,
                        "private String exceptionCauseMessageIfAvailable(Exception details) { return details.getCause().getMessage(); }"
                    ],
                    [
                        0.9786797761917114,
                        "private String getMethodProxyField(Signature impl) { return impl.getName() + \\\"$Proxy\\\"; }"
                    ],
                    [
                        0.9786663055419922,
                        "private String getMethodField(Signature impl) { return impl.getName() + \\\"$Method\\\"; }"
                    ],
                    [
                        0.9772458672523499,
                        "private boolean toStringEquals(Matcher m, Object arg) { return StringDescription.toString(m).equals(arg == null ? \\\"null\\\" : arg.toString()); }"
                    ],
                    [
                        0.9756371378898621,
                        "private String[] getNames(Map propertyMap) { return (String[]) propertyMap.keySet().toArray(new String[propertyMap.size()]); }"
                    ],
                    [
                        0.9740543961524963,
                        "private void validateMockingConcreteClass(CallsRealMethods answer, MethodInfo methodInfo) { if (methodInfo.isAbstract()) { reporter.cannotCallAbstractRealMethod(); } }"
                    ],
                    [
                        0.9732391834259033,
                        "private void validateDoNothing(DoesNothing answer, MethodInfo methodInfo) { if (!methodInfo.isVoid()) { reporter.onlyVoidMethodsCanBeSetToDoNothing(); } }"
                    ],
                    [
                        0.970944344997406,
                        "private void reinitCaptors(IInvokedMethod method, ITestResult testResult) { if (method.isConfigurationMethod()) { return; } initializeCaptors(testResult.getInstance()); }"
                    ]
                ],
                "directly_related_tests": [
                    "org.mockito.exceptions.ReporterTest::can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n\n    private String exceptionCauseMessageIfAvailable(Exception details) {\n        return details.getCause().getMessage();\n    }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure() throws Exception {\n        IMethods mock_with_bogus_default_answer = mock(IMethods.class, new Returns(false));\n        new Reporter().cannotInjectDependency(someField(), mock_with_bogus_default_answer, new Exception());\n    }\n```\n#Error message: java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.base.MockitoException> but was<java.lang.NullPointerException>\nCaused by: java.lang.NullPointerException\n\tat org.mockito.exceptions.Reporter.exceptionCauseMessageIfAvailable(Reporter.java:677)  return details.getCause().getMessage();\n\tat org.mockito.exceptions.Reporter.cannotInjectDependency(Reporter.java:671)  \"Also I failed because: \" + exceptionCauseMessageIfAvailable(details),\n\tat org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure(ReporterTest.java:79)  new Reporter().cannotInjectDependency(someField(), mock_with_bogus_default_answer, new Exception());\n\t... 33 more\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return (cause != null) ? cause.getMessage() : null;\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return (cause != null) ? cause.getMessage() : \"No cause available\";\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return (cause != null) ? cause.getMessage() : null;\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return (cause != null) ? cause.getMessage() : \"No cause available\";\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    if (details.getCause() != null) {\n        return details.getCause().getMessage();\n    } else {\n        return \"No cause available\";\n    }\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return cause != null ? cause.getMessage() : null;\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return (cause != null) ? cause.getMessage() : \"No cause available\";\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return (cause != null) ? cause.getMessage() : \"No cause available\";\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return (cause != null) ? cause.getMessage() : null;\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    return (details.getCause() != null) ? details.getCause().getMessage() : \"No cause available\";\n}\n"
                        ],
                        "plausible_patches": [
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return (cause != null) ? cause.getMessage() : null;\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return (cause != null) ? cause.getMessage() : \"No cause available\";\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    if (details.getCause() != null) {\n        return details.getCause().getMessage();\n    } else {\n        return \"No cause available\";\n    }\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return cause != null ? cause.getMessage() : null;\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    return (details.getCause() != null) ? details.getCause().getMessage() : \"No cause available\";\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return (cause != null) ? cause.getMessage() : null;\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return (cause != null) ? cause.getMessage() : \"No cause available\";\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    if (details.getCause() != null) {\n        return details.getCause().getMessage();\n    } else {\n        return \"No cause available\";\n    }\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    Throwable cause = details.getCause();\n    return cause != null ? cause.getMessage() : null;\n}\n",
                            "\nprivate String exceptionCauseMessageIfAvailable(Exception details) {\n    return (details.getCause() != null) ? details.getCause().getMessage() : \"No cause available\";\n}\n"
                        ],
                        "evaluation_done": true
                    }
                }
            }
        ],
        "trigger_test": {
            "org.mockito.exceptions.ReporterTest::can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order": {
                "path": "test/org/mockito/exceptions/ReporterTest.java",
                "function_name": "can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order",
                "src": "    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order() throws Exception {\n        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();\n        new Reporter().noMoreInteractionsWantedInOrder(invocation_with_bogus_default_answer);\n    }",
                "error_msg": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.VerificationInOrderFailure> but was<java.lang.ClassCastException>\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockitousage.IMethods$$EnhancerByMockitoWithCGLIB$$de235dc2.toString(<generated>)\n\tat java.lang.String.valueOf(String.java:2994)\n\tat java.lang.StringBuilder.append(StringBuilder.java:131)\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWantedInOrder(Reporter.java:434)\n\tat org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order(ReporterTest.java:47)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)\n\t... 33 more",
                "clean_error_msg": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.VerificationInOrderFailure> but was<java.lang.ClassCastException>\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWantedInOrder(Reporter.java:434)  \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n\tat org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order(ReporterTest.java:47)  new Reporter().noMoreInteractionsWantedInOrder(invocation_with_bogus_default_answer);\n\t... 33 more"
            },
            "org.mockito.exceptions.ReporterTest::can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure": {
                "path": "test/org/mockito/exceptions/ReporterTest.java",
                "function_name": "can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure",
                "src": "    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure() throws Exception {\n        IMethods mock_with_bogus_default_answer = mock(IMethods.class, new Returns(false));\n        new Reporter().cannotInjectDependency(someField(), mock_with_bogus_default_answer, new Exception());\n    }",
                "error_msg": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.base.MockitoException> but was<java.lang.NullPointerException>\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)\nCaused by: java.lang.NullPointerException\n\tat org.mockito.exceptions.Reporter.exceptionCauseMessageIfAvailable(Reporter.java:677)\n\tat org.mockito.exceptions.Reporter.cannotInjectDependency(Reporter.java:671)\n\tat org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure(ReporterTest.java:79)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)\n\t... 33 more",
                "clean_error_msg": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.base.MockitoException> but was<java.lang.NullPointerException>\nCaused by: java.lang.NullPointerException\n\tat org.mockito.exceptions.Reporter.exceptionCauseMessageIfAvailable(Reporter.java:677)  return details.getCause().getMessage();\n\tat org.mockito.exceptions.Reporter.cannotInjectDependency(Reporter.java:671)  \"Also I failed because: \" + exceptionCauseMessageIfAvailable(details),\n\tat org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure(ReporterTest.java:79)  new Reporter().cannotInjectDependency(someField(), mock_with_bogus_default_answer, new Exception());\n\t... 33 more"
            },
            "org.mockito.exceptions.ReporterTest::can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted": {
                "path": "test/org/mockito/exceptions/ReporterTest.java",
                "function_name": "can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted",
                "src": "    public void can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted() throws Exception {\n        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();\n        new Reporter().noMoreInteractionsWanted(invocation_with_bogus_default_answer, Collections.<VerificationAwareInvocation>emptyList());\n    }",
                "error_msg": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.NoInteractionsWanted> but was<java.lang.ClassCastException>\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockitousage.IMethods$$EnhancerByMockitoWithCGLIB$$de235dc2.toString(<generated>)\n\tat java.lang.String.valueOf(String.java:2994)\n\tat java.lang.StringBuilder.append(StringBuilder.java:131)\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWanted(Reporter.java:424)\n\tat org.mockito.exceptions.ReporterTest.can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted(ReporterTest.java:41)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)\n\t... 33 more",
                "clean_error_msg": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.NoInteractionsWanted> but was<java.lang.ClassCastException>\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWanted(Reporter.java:424)  \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n\tat org.mockito.exceptions.ReporterTest.can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted(ReporterTest.java:41)  new Reporter().noMoreInteractionsWanted(invocation_with_bogus_default_answer, Collections.<VerificationAwareInvocation>emptyList());\n\t... 33 more"
            },
            "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest::should_not_throw_a_ClassCastException": {
                "path": "test/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java",
                "function_name": "should_not_throw_a_ClassCastException",
                "src": "    public void should_not_throw_a_ClassCastException() {\n        TestMock test = mock(TestMock.class, new Answer() {\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return false;\n            }\n        });\n        test.m1();\n        verifyZeroInteractions(test);\n    }",
                "error_msg": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.NoInteractionsWanted> but was<java.lang.ClassCastException>\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest$TestMock$$EnhancerByMockitoWithCGLIB$$9b036b99.toString(<generated>)\n\tat java.lang.String.valueOf(String.java:2994)\n\tat java.lang.StringBuilder.append(StringBuilder.java:131)\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWanted(Reporter.java:424)\n\tat org.mockito.internal.verification.NoMoreInteractions.verify(NoMoreInteractions.java:24)\n\tat org.mockito.internal.MockitoCore.verifyNoMoreInteractions(MockitoCore.java:113)\n\tat org.mockito.Mockito.verifyZeroInteractions(Mockito.java:1674)\n\tat org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest.should_not_throw_a_ClassCastException(ClassCastExOnVerifyZeroInteractionsTest.java:24)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)\n\t... 31 more",
                "clean_error_msg": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.NoInteractionsWanted> but was<java.lang.ClassCastException>\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWanted(Reporter.java:424)  \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n\tat org.mockito.internal.verification.NoMoreInteractions.verify(NoMoreInteractions.java:24)  new Reporter().noMoreInteractionsWanted(unverified, (List) data.getAllInvocations());\n\tat org.mockito.internal.MockitoCore.verifyNoMoreInteractions(MockitoCore.java:113)  VerificationModeFactory.noMoreInteractions().verify(data);\n\tat org.mockito.Mockito.verifyZeroInteractions(Mockito.java:1674)  MOCKITO_CORE.verifyNoMoreInteractions(mocks);\n\tat org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest.should_not_throw_a_ClassCastException(ClassCastExOnVerifyZeroInteractionsTest.java:24)  verifyZeroInteractions(test);\n\t... 31 more"
            }
        },
        "evaluation_done": true,
        "context_generation_done": true,
        "evaluation_done2": true
    }
}