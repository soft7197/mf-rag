{
    "Lang-30": {
        "function_num": 6,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 1371,
                "end_loc": 1387,
                "buggy_function": "    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                "fixed_function": "    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int csLast = csLen - 1;\n        int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                        // ch is a supplementary character\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return i;\n                        }\n                    } else {\n                        return i;\n                    }\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                "comment": "    // IndexOfAny chars\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n",
                "normalized_body": [
                    "public static int indexOfAny(CharSequence cs, char[] searchChars) { if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) { return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { return i; } } } return INDEX_NOT_FOUND; }"
                ],
                "top_similar_methods": [
                    [
                        0.9999998807907104,
                        "public static int indexOfAny(CharSequence cs, char[] searchChars) { if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) { return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { return i; } } } return INDEX_NOT_FOUND; }"
                    ],
                    [
                        0.9804965257644653,
                        "public static double max(double[] array) { if (array == null) { throw new IllegalArgumentException(\\\"The Array must not be null\\\"); } else if (array.length == 0) { throw new IllegalArgumentException(\\\"Array cannot be empty.\\\"); } double max = array[0]; for (int j = 1; j < array.length; j++) { if (Double.isNaN(array[j])) { return Double.NaN; } if (array[j] > max) { max = array[j]; } } return max; }"
                    ],
                    [
                        0.9804462194442749,
                        "public static float max(float[] array) { if (array == null) { throw new IllegalArgumentException(\\\"The Array must not be null\\\"); } else if (array.length == 0) { throw new IllegalArgumentException(\\\"Array cannot be empty.\\\"); } float max = array[0]; for (int j = 1; j < array.length; j++) { if (Float.isNaN(array[j])) { return Float.NaN; } if (array[j] > max) { max = array[j]; } } return max; }"
                    ],
                    [
                        0.9785820841789246,
                        "public static float min(float[] array) { if (array == null) { throw new IllegalArgumentException(\\\"The Array must not be null\\\"); } else if (array.length == 0) { throw new IllegalArgumentException(\\\"Array cannot be empty.\\\"); } float min = array[0]; for (int i = 1; i < array.length; i++) { if (Float.isNaN(array[i])) { return Float.NaN; } if (array[i] < min) { min = array[i]; } } return min; }"
                    ],
                    [
                        0.9785687923431396,
                        "public boolean equalsIgnoreCase(StrBuilder other) { if (this == other) { return true; } if (this.size != other.size) { return false; } char[] thisBuf = this.buffer; char[] otherBuf = other.buffer; for (int i = size - 1; i >= 0; i--) { char c1 = thisBuf[i]; char c2 = otherBuf[i]; if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) { return false; } } return true; }"
                    ],
                    [
                        0.9781736135482788,
                        "public static double min(double[] array) { if (array == null) { throw new IllegalArgumentException(\\\"The Array must not be null\\\"); } else if (array.length == 0) { throw new IllegalArgumentException(\\\"Array cannot be empty.\\\"); } double min = array[0]; for (int i = 1; i < array.length; i++) { if (Double.isNaN(array[i])) { return Double.NaN; } if (array[i] < min) { min = array[i]; } } return min; }"
                    ],
                    [
                        0.975829005241394,
                        "private StrBuilder replaceImpl(StrMatcher matcher, String replaceStr, int from, int to, int replaceCount) { if (matcher == null || size == 0) { return this; } int replaceLen = (replaceStr == null ? 0 : replaceStr.length()); char[] buf = buffer; for (int i = from; i < to && replaceCount != 0; i++) { int removeLen = matcher.isMatch(buf, i, from, to); if (removeLen > 0) { replaceImpl(i, i + removeLen, removeLen, replaceStr, replaceLen); to = to - removeLen + replaceLen; i = i + replaceLen - 1; if (replaceCount > 0) { replaceCount--; } } } return this; }"
                    ],
                    [
                        0.973844587802887,
                        "protected List<String> tokenize(char[] chars, int offset, int count) { if (chars == null || count == 0) { return Collections.emptyList(); } StrBuilder buf = new StrBuilder(); List<String> tokens = new ArrayList<String>(); int pos = offset; while (pos >= 0 && pos < count) { pos = readNextToken(chars, pos, count, buf, tokens); if (pos >= count) { addToken(tokens, \\\"\\\"); } } return tokens; }"
                    ],
                    [
                        0.9715582728385925,
                        "public static int indexOfAnyBut(CharSequence cs, char[] searchChars) { if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) { return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; outer: for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { continue outer; } } return i; } return INDEX_NOT_FOUND; }"
                    ],
                    [
                        0.9711026549339294,
                        "public static int count(String str, String[] set) { if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) { return 0; } CharSet chars = CharSet.getInstance(set); int count = 0; char[] chrs = str.toCharArray(); int sz = chrs.length; for (int i = 0; i < sz; i++) { if (chars.contains(chrs[i])) { count++; } } return count; }"
                    ],
                    [
                        0.9689178466796875,
                        "public static char[] addAll(char[] array1, char... array2) { if (array1 == null) { return clone(array2); } else if (array2 == null) { return clone(array1); } char[] joinedArray = new char[array1.length + array2.length]; System.arraycopy(array1, 0, joinedArray, 0, array1.length); System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); return joinedArray; }"
                    ]
                ],
                "directly_related_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringCharArrayWithSupplementaryChars",
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringStringWithSupplementaryChars"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n    // IndexOfAny chars\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));    \n    }\n```\n#Error message: junit.framework.AssertionFailedError: expected:<2> but was:<0>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:528)  assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n \n#Test method 2:\n```java\n    public void testIndexOfAny_StringStringWithSupplementaryChars() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));    \n    }\n```\n#Error message: junit.framework.AssertionFailedError: expected:<2> but was:<0>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:571)  assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == codePoint) {\n                return i;\n            }\n        }\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            i++; // skip the next char for supplementary character\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == codePoint) {\n                return i;\n            }\n        }\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            i++; // skip the next char as it's part of the current supplementary character\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == codePoint) {\n                return i;\n            }\n        }\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            i++;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == codePoint) {\n                return i;\n            }\n        }\n        if (Character.charCount(codePoint) == 2) {\n            i++;  // Skip the additional index for supplementary character\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i += Character.charCount(cs.charAt(i))) {\n        int cp = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == cp) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLen; j++) {\n            if (Character.charCount(codePoint) > 1) {\n                i++;\n            }\n            if (searchChars[j] == codePoint) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == codePoint) {\n                return i;\n            }\n        }\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            i++; // skip the next character as it's part of the current code point\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null || searchChars.length == 0) {\n        return -1;  // INDEX_NOT_FOUND\n    }\n    int csLength = cs.length();\n    int csCodePoints = cs.codePointCount(0, csLength);\n    for (int i = 0, cpIndex = 0; cpIndex < csCodePoints; cpIndex++) {\n        int codepoint = Character.codePointAt(cs, i);\n        for (char searchChar : searchChars) {\n            if (codepoint == searchChar) {\n                return i;\n            }\n        }\n        i += Character.charCount(codepoint);\n    }\n    return -1;  // INDEX_NOT_FOUND\n}\n",
                            "\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i += Character.charCount(cs.codePointAt(i))) {\n            int ch = cs.codePointAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                            "\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        int charCount = Character.charCount(codePoint);\n        if (charCount == 2) {\n            i++;\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == codePoint) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n"
                        ],
                        "evaluation_done": true
                    }
                }
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 1443,
                "end_loc": 1468,
                "buggy_function": "    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n",
                "fixed_function": "    public static boolean containsAny(String cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                            return true;\n                        }\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n",
                "comment": "    // ContainsAny\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n",
                "normalized_body": [
                    "public static boolean containsAny(CharSequence cs, char[] searchChars) { if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) { return false; } int csLength = cs.length(); int searchLength = searchChars.length; int csLast = csLength - 1; int searchLast = searchLength - 1; for (int i = 0; i < csLength; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLength; j++) { if (searchChars[j] == ch) { if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) { if (searchChars[j + 1] == cs.charAt(i + 1)) { return true; } } else { return true; } } } } return false; }"
                ],
                "top_similar_methods": [
                    [
                        0.9999999403953552,
                        "public static boolean containsAny(CharSequence cs, char[] searchChars) { if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) { return false; } int csLength = cs.length(); int searchLength = searchChars.length; int csLast = csLength - 1; int searchLast = searchLength - 1; for (int i = 0; i < csLength; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLength; j++) { if (searchChars[j] == ch) { if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) { if (searchChars[j + 1] == cs.charAt(i + 1)) { return true; } } else { return true; } } } } return false; }"
                    ],
                    [
                        0.9639354348182678,
                        "public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { return INDEX_NOT_FOUND; } else if (startIndex >= array.length) { startIndex = array.length - 1; } if (objectToFind == null) { for (int i = startIndex; i >= 0; i--) { if (array[i] == null) { return i; } } } else if (array.getClass().getComponentType().isInstance(objectToFind)) { for (int i = startIndex; i >= 0; i--) { if (objectToFind.equals(array[i])) { return i; } } } return INDEX_NOT_FOUND; }"
                    ],
                    [
                        0.9584915041923523,
                        "private static float getPrimitivePromotionCost(final Class<?> srcClass, final Class<?> destClass) { float cost = 0.0f; Class<?> cls = srcClass; if (!cls.isPrimitive()) { cost += 0.1f; cls = ClassUtils.wrapperToPrimitive(cls); } for (int i = 0; cls != destClass && i < ORDERED_PRIMITIVE_TYPES.length; i++) { if (cls == ORDERED_PRIMITIVE_TYPES[i]) { cost += 0.1f; if (i < ORDERED_PRIMITIVE_TYPES.length - 1) { cls = ORDERED_PRIMITIVE_TYPES[i + 1]; } } } return cost; }"
                    ],
                    [
                        0.9559817314147949,
                        "private static int ordinalIndexOf(String str, String searchStr, int ordinal, boolean lastIndex) { if (str == null || searchStr == null || ordinal <= 0) { return INDEX_NOT_FOUND; } if (searchStr.length() == 0) { return lastIndex ? str.length() : 0; } int found = 0; int index = lastIndex ? str.length() : INDEX_NOT_FOUND; do { if (lastIndex) { index = str.lastIndexOf(searchStr, index - 1); } else { index = str.indexOf(searchStr, index + 1); } if (index < 0) { return index; } found++; } while (found < ordinal); return index; }"
                    ],
                    [
                        0.9558524489402771,
                        "public static String replace(String text, String searchString, String replacement, int max) { if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) { return text; } int start = 0; int end = text.indexOf(searchString, start); if (end == INDEX_NOT_FOUND) { return text; } int replLength = searchString.length(); int increase = replacement.length() - replLength; increase = (increase < 0 ? 0 : increase); increase *= (max < 0 ? 16 : (max > 64 ? 64 : max)); StringBuilder buf = new StringBuilder(text.length() + increase); while (end != INDEX_NOT_FOUND) { buf.append(text.substring(start, end)).append(replacement); start = end + replLength; if (--max == 0) { break; } end = text.indexOf(searchString, start); } buf.append(text.substring(start)); return buf.toString(); }"
                    ],
                    [
                        0.9553631544113159,
                        "private static Method getAccessibleMethodFromInterfaceNest(Class<?> cls, String methodName, Class<?>[] parameterTypes) { Method method = null; for (; cls != null; cls = cls.getSuperclass()) { Class<?>[] interfaces = cls.getInterfaces(); for (int i = 0; i < interfaces.length; i++) { if (!Modifier.isPublic(interfaces[i].getModifiers())) { continue; } try { method = interfaces[i].getDeclaredMethod(methodName, parameterTypes); } catch (NoSuchMethodException e) { } if (method != null) { break; } method = getAccessibleMethodFromInterfaceNest(interfaces[i], methodName, parameterTypes); if (method != null) { break; } } } return method; }"
                    ],
                    [
                        0.9550894498825073,
                        "public void testGetRootCauseStackTrace_Throwable() throws Exception { assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); Throwable withCause = createExceptionWithCause(); String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); boolean match = false; for (int i = 0; i < stackTrace.length; i++) { if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) { match = true; break; } } assertEquals(true, match); stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); match = false; for (int i = 0; i < stackTrace.length; i++) { if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) { match = true; break; } } assertEquals(false, match); }"
                    ],
                    [
                        0.9541391134262085,
                        "public int lastIndexOf(String str, int startIndex) { startIndex = (startIndex >= size ? size - 1 : startIndex); if (str == null || startIndex < 0) { return -1; } int strLen = str.length(); if (strLen > 0 && strLen <= size) { if (strLen == 1) { return lastIndexOf(str.charAt(0), startIndex); } outer: for (int i = startIndex - strLen + 1; i >= 0; i--) { for (int j = 0; j < strLen; j++) { if (str.charAt(j) != buffer[i + j]) { continue outer; } } return i; } } else if (strLen == 0) { return startIndex; } return -1; }"
                    ],
                    [
                        0.9527711868286133,
                        "@Override public int translate(CharSequence input, int index, Writer out) throws IOException { if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') { int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); if (firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; while (input.charAt(end) != ';') { end++; } int entityValue; try { if (isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch (NumberFormatException nfe) { return 0; } out.write(entityValue); return 2 + (end - start) + (isHex ? 1 : 0) + 1; } return 0; }"
                    ],
                    [
                        0.9519859552383423,
                        "public static int indexOf(Object[] array, Object objectToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { startIndex = 0; } if (objectToFind == null) { for (int i = startIndex; i < array.length; i++) { if (array[i] == null) { return i; } } } else if (array.getClass().getComponentType().isInstance(objectToFind)) { for (int i = startIndex; i < array.length; i++) { if (objectToFind.equals(array[i])) { return i; } } } return INDEX_NOT_FOUND; }"
                    ],
                    [
                        0.9519436359405518,
                        "public static String join(Object[] array, String separator, int startIndex, int endIndex) { if (array == null) { return null; } if (separator == null) { separator = EMPTY; } int bufSize = (endIndex - startIndex); if (bufSize <= 0) { return EMPTY; } bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length()); StringBuilder buf = new StringBuilder(bufSize); for (int i = startIndex; i < endIndex; i++) { if (i > startIndex) { buf.append(separator); } if (array[i] != null) { buf.append(array[i]); } } return buf.toString(); }"
                    ]
                ],
                "Compiling error!": true,
                "non_directly_related_tests": [],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below are buggy method(s) from a large Java project. These methods cause one or more test failures.\nYour task is to fix the bugs in these methods. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Methods\n\n\n```java\n    // ContainsAny\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n```\n\n```java\n    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n\n```\n\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testContainsNone_CharArrayWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\n    }\n```\n#Error message from the test method 1: junit.framework.AssertionFailedError: expected:<true> but was:<false>\n \n#Test method 2:\n```java\n    public void testContainsNone_StringWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));\n    }\n```\n#Error message from the test method 2: junit.framework.AssertionFailedError: expected:<true> but was:<false>\n \n#Test method 3:\n```java\n    public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));\n    }\n```\n#Error message from the test method 3: junit.framework.AssertionFailedError: expected:<false> but was:<true>\n \n#Test method 4:\n```java\n    public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));        \n    }\n```\n#Error message from the test method 4: junit.framework.AssertionFailedError: expected:<2> but was:<3>\n \n#Test method 5:\n```java\n    public void testContainsAny_StringWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));\n    }\n```\n#Error message from the test method 5: junit.framework.AssertionFailedError: expected:<false> but was:<true>\n \n#Test method 6:\n```java\n    public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));    \n    }\n```\n#Error message from the test method 6: junit.framework.AssertionFailedError: expected:<2> but was:<0>\n \n#Test method 7:\n```java\n    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));        \n    }\n```\n#Error message from the test method 7: junit.framework.AssertionFailedError: expected:<2> but was:<3>\n \n#Test method 8:\n```java\n    public void testContainsNone_StringWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));        \n    }\n```\n#Error message from the test method 8: junit.framework.AssertionFailedError: expected:<true> but was:<false>\n \n#Test method 9:\n```java\n    public void testIndexOfAny_StringStringWithSupplementaryChars() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));    \n    }\n```\n#Error message from the test method 9: junit.framework.AssertionFailedError: expected:<2> but was:<0>\n \n#Test method 10:\n```java\n    public void testContainsNone_CharArrayWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));\n    }\n```\n#Error message from the test method 10: junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\n---\n\n## Your Goal\n\nFix the buggy methods. Return only the fixed Java methods. Do not include explanations or other text.\n",
                        "patches": [
                            "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            if (Character.isHighSurrogate(ch) && i < csLast) {\n                char nextCh = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(nextCh)) {\n                    int codePoint = Character.toCodePoint(ch, nextCh);\n                    if (containsCodePoint(searchChars, codePoint)) {\n                        return true;\n                    }\n                    i++; // Skip the low surrogate\n                }\n            } else {\n                if (containsChar(searchChars, ch)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private static boolean containsChar(char[] searchChars, char ch) {\n        for (char searchChar : searchChars) {\n            if (searchChar == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static boolean containsCodePoint(char[] searchChars, int codePoint) {\n        for (int i = 0; i < searchChars.length; i++) {\n            char ch = searchChars[i];\n            if (Character.isHighSurrogate(ch) && (i < searchChars.length - 1)) {\n                char nextCh = searchChars[i + 1];\n                if (Character.isLowSurrogate(nextCh)) {\n                    if (codePoint == Character.toCodePoint(ch, nextCh)) {\n                        return true;\n                    }\n                    i++; // Skip the low surrogate\n                }\n            } else if (ch == codePoint) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n",
                            "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            if (Character.isHighSurrogate(ch) && i < csLength - 1) {\n                char nextCh = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(nextCh)) {\n                    int codePoint = Character.toCodePoint(ch, nextCh);\n                    for (char searchChar : searchChars) {\n                        if (searchChar == codePoint) {\n                            return true;\n                        }\n                    }\n                    i++; // Skip the low surrogate\n                    continue;\n                }\n            }\n            for (char searchChar : searchChars) {\n                if (searchChar == ch) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n",
                            "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            if (Character.isHighSurrogate(ch) && i < csLength - 1) {\n                char nextCh = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(nextCh)) {\n                    int codePoint = Character.toCodePoint(ch, nextCh);\n                    for (int j = 0; j < searchLength - 1; j++) {\n                        if (Character.isHighSurrogate(searchChars[j]) && Character.isLowSurrogate(searchChars[j + 1])) {\n                            int searchCodePoint = Character.toCodePoint(searchChars[j], searchChars[j + 1]);\n                            if (searchCodePoint == codePoint) {\n                                return true;\n                            }\n                        }\n                    }\n                    i++;\n                    continue;\n                }\n            }\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n",
                            "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null || cs.length() == 0 || searchChars.length == 0) {\n            return false;\n        }\n\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n            // Handle surrogate pairs\n            if (Character.isHighSurrogate(ch) && i < csLength - 1) {\n                char nextCh = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(nextCh)) {\n                    int codePoint = Character.toCodePoint(ch, nextCh);\n                    for (int j = 0; j < searchLength; j++) {\n                        if (Character.codePointAt(searchChars, j) == codePoint) {\n                            return true;\n                        }\n                    }\n                    i++; // Skip the low surrogate\n                }\n            }\n        }\n        return false;\n    }\n\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n",
                            "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            if (Character.isHighSurrogate(ch) && i < csLength - 1) {\n                char ch2 = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    int codePoint = Character.toCodePoint(ch, ch2);\n                    for (int j = 0; j < searchLength; j++) {\n                        if (Character.isHighSurrogate(searchChars[j]) && j < searchLength - 1) {\n                            if (Character.isLowSurrogate(searchChars[j + 1])) {\n                                int searchCodePoint = Character.toCodePoint(searchChars[j], searchChars[j + 1]);\n                                if (codePoint == searchCodePoint) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                    i++;\n                }\n            } else {\n                for (int j = 0; j < searchLength; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n",
                            "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n\n        for (int i = 0; i < csLength; i++) {\n            int codePoint = Character.codePointAt(cs, i);\n            for (int j = 0; j < searchLength; j++) {\n                int searchCodePoint = Character.codePointAt(searchChars, j);\n                if (searchCodePoint == codePoint) {\n                    return true;\n                }\n            }\n            i += Character.charCount(codePoint) - 1;\n        }\n        return false;\n    }\n",
                            "\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch) && i < csLength - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n            int codePoint = Character.toCodePoint(ch, cs.charAt(i + 1));\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch && j < searchLength - 1 && searchChars[j + 1] == cs.charAt(i + 1)) {\n                    return true;\n                }\n            }\n            i++;  // Skip next character as it is part of the current code point.\n        } else {\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n",
                            "\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (isEmpty(cs) || isEmpty(searchChars)) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\npublic static boolean isEmpty(CharSequence cs) {\n    return cs == null || cs.length() == 0;\n}\n",
                            "\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            if (Character.isHighSurrogate(ch) && i < csLength - 1) {\n                char nextCh = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(nextCh)) {\n                    int codePoint = Character.toCodePoint(ch, nextCh);\n                    for (int j = 0; j < searchLength; j++) {\n                        if (searchChars[j] == ch && j < searchLength - 1 && searchChars[j + 1] == nextCh) {\n                            return true;\n                        }\n                    }\n                    i++; // skip the low surrogate\n                    continue;\n                }\n            }\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n",
                            "\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLength; j++) {\n            int searchCodePoint = Character.codePointAt(searchChars, j);\n            if (searchCodePoint == codePoint) {\n                return true;\n            }\n        }\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            i++;\n        }\n    }\n    return false;\n}\n\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n"
                        ]
                    }
                }
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 1497,
                "end_loc": 1502,
                "buggy_function": "    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n",
                "fixed_function": "    public static boolean containsAny(String cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n",
                "comment": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n",
                "normalized_body": [
                    "public static boolean containsAny(CharSequence cs, String searchChars) { if (searchChars == null) { return false; } return containsAny(cs, searchChars.toCharArray()); }"
                ],
                "top_similar_methods": [
                    [
                        1.0000001192092896,
                        "public static boolean containsAny(CharSequence cs, String searchChars) { if (searchChars == null) { return false; } return containsAny(cs, searchChars.toCharArray()); }"
                    ],
                    [
                        0.9937013387680054,
                        "public static boolean containsOnly(CharSequence cs, String validChars) { if (cs == null || validChars == null) { return false; } return containsOnly(cs, validChars.toCharArray()); }"
                    ],
                    [
                        0.992056131362915,
                        "public static boolean containsNone(CharSequence cs, String invalidChars) { if (cs == null || invalidChars == null) { return true; } return containsNone(cs, invalidChars.toCharArray()); }"
                    ],
                    [
                        0.9862794876098633,
                        "public static String toString(Character ch) { if (ch == null) { return null; } return toString(ch.charValue()); }"
                    ],
                    [
                        0.9859205484390259,
                        "public static String getShortCanonicalName(Object object, String valueIfNull) { if (object == null) { return valueIfNull; } return getShortCanonicalName(object.getClass().getName()); }"
                    ],
                    [
                        0.9857227206230164,
                        "public static final String unescapeJava(String input) { return UNESCAPE_JAVA.translate(input); }"
                    ],
                    [
                        0.9855437874794006,
                        "public static int toIntValue(Character ch, int defaultValue) { if (ch == null) { return defaultValue; } return toIntValue(ch.charValue(), defaultValue); }"
                    ],
                    [
                        0.9851840138435364,
                        "public static final String escapeEcmaScript(String input) { return ESCAPE_ECMASCRIPT.translate(input); }"
                    ],
                    [
                        0.9845948219299316,
                        "public static String getPackageName(Object object, String valueIfNull) { if (object == null) { return valueIfNull; } return getPackageName(object.getClass()); }"
                    ],
                    [
                        0.9843803644180298,
                        "public static String getPackageCanonicalName(Object object, String valueIfNull) { if (object == null) { return valueIfNull; } return getPackageCanonicalName(object.getClass().getName()); }"
                    ],
                    [
                        0.984245240688324,
                        "public static String getPackageName(Class<?> cls) { if (cls == null) { return StringUtils.EMPTY; } return getPackageName(cls.getName()); }"
                    ]
                ],
                "non_directly_related_tests": [],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below are buggy method(s) from a large Java project. These methods cause one or more test failures.\nYour task is to fix the bugs in these methods. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Methods\n\n\n```java\n    // ContainsAny\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n```\n\n```java\n    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n\n```\n\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testContainsNone_CharArrayWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\n    }\n```\n#Error message from the test method 1: junit.framework.AssertionFailedError: expected:<true> but was:<false>\n \n#Test method 2:\n```java\n    public void testContainsNone_StringWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));\n    }\n```\n#Error message from the test method 2: junit.framework.AssertionFailedError: expected:<true> but was:<false>\n \n#Test method 3:\n```java\n    public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));\n    }\n```\n#Error message from the test method 3: junit.framework.AssertionFailedError: expected:<false> but was:<true>\n \n#Test method 4:\n```java\n    public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));        \n    }\n```\n#Error message from the test method 4: junit.framework.AssertionFailedError: expected:<2> but was:<3>\n \n#Test method 5:\n```java\n    public void testContainsAny_StringWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));\n    }\n```\n#Error message from the test method 5: junit.framework.AssertionFailedError: expected:<false> but was:<true>\n \n#Test method 6:\n```java\n    public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));    \n    }\n```\n#Error message from the test method 6: junit.framework.AssertionFailedError: expected:<2> but was:<0>\n \n#Test method 7:\n```java\n    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));        \n    }\n```\n#Error message from the test method 7: junit.framework.AssertionFailedError: expected:<2> but was:<3>\n \n#Test method 8:\n```java\n    public void testContainsNone_StringWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));        \n    }\n```\n#Error message from the test method 8: junit.framework.AssertionFailedError: expected:<true> but was:<false>\n \n#Test method 9:\n```java\n    public void testIndexOfAny_StringStringWithSupplementaryChars() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));    \n    }\n```\n#Error message from the test method 9: junit.framework.AssertionFailedError: expected:<2> but was:<0>\n \n#Test method 10:\n```java\n    public void testContainsNone_CharArrayWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));\n    }\n```\n#Error message from the test method 10: junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\n---\n\n## Your Goal\n\nFix the buggy methods. Return only the fixed Java methods. Do not include explanations or other text.\n",
                        "patches": [
                            "\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n"
                        ],
                        "evaluation_done": true
                    }
                }
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 1528,
                "end_loc": 1545,
                "buggy_function": "    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                "fixed_function": "    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int csLast = csLen - 1;\n        int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            continue outer;\n                        }\n                    } else {\n                        continue outer;\n                    }\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                "comment": "    // IndexOfAnyBut chars\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n",
                "normalized_body": [
                    "public static int indexOfAnyBut(CharSequence cs, char[] searchChars) { if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) { return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; outer: for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { continue outer; } } return i; } return INDEX_NOT_FOUND; }"
                ],
                "top_similar_methods": [
                    [
                        0.9999999403953552,
                        "public static int indexOfAnyBut(CharSequence cs, char[] searchChars) { if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) { return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; outer: for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { continue outer; } } return i; } return INDEX_NOT_FOUND; }"
                    ],
                    [
                        0.9737526178359985,
                        "public int lastIndexOf(String str, int startIndex) { startIndex = (startIndex >= size ? size - 1 : startIndex); if (str == null || startIndex < 0) { return -1; } int strLen = str.length(); if (strLen > 0 && strLen <= size) { if (strLen == 1) { return lastIndexOf(str.charAt(0), startIndex); } outer: for (int i = startIndex - strLen + 1; i >= 0; i--) { for (int j = 0; j < strLen; j++) { if (str.charAt(j) != buffer[i + j]) { continue outer; } } return i; } } else if (strLen == 0) { return startIndex; } return -1; }"
                    ],
                    [
                        0.9736884236335754,
                        "private String parseFormatDescription(String pattern, ParsePosition pos) { int start = pos.getIndex(); seekNonWs(pattern, pos); int text = pos.getIndex(); int depth = 1; for (; pos.getIndex() < pattern.length(); next(pos)) { switch(pattern.charAt(pos.getIndex())) { case START_FE: depth++; break; case END_FE: depth--; if (depth == 0) { return pattern.substring(text, pos.getIndex()); } break; case QUOTE: getQuotedString(pattern, pos, false); break; } } throw new IllegalArgumentException(\\\"Unterminated format element at position \\\" + start); }"
                    ],
                    [
                        0.9735874533653259,
                        "public boolean equalsIgnoreCase(StrBuilder other) { if (this == other) { return true; } if (this.size != other.size) { return false; } char[] thisBuf = this.buffer; char[] otherBuf = other.buffer; for (int i = size - 1; i >= 0; i--) { char c1 = thisBuf[i]; char c2 = otherBuf[i]; if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) { return false; } } return true; }"
                    ],
                    [
                        0.9727200269699097,
                        "private StrBuilder replaceImpl(StrMatcher matcher, String replaceStr, int from, int to, int replaceCount) { if (matcher == null || size == 0) { return this; } int replaceLen = (replaceStr == null ? 0 : replaceStr.length()); char[] buf = buffer; for (int i = from; i < to && replaceCount != 0; i++) { int removeLen = matcher.isMatch(buf, i, from, to); if (removeLen > 0) { replaceImpl(i, i + removeLen, removeLen, replaceStr, replaceLen); to = to - removeLen + replaceLen; i = i + replaceLen - 1; if (replaceCount > 0) { replaceCount--; } } } return this; }"
                    ],
                    [
                        0.9715582728385925,
                        "public static int indexOfAny(CharSequence cs, char[] searchChars) { if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) { return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { return i; } } } return INDEX_NOT_FOUND; }"
                    ],
                    [
                        0.9715157747268677,
                        "protected List<String> tokenize(char[] chars, int offset, int count) { if (chars == null || count == 0) { return Collections.emptyList(); } StrBuilder buf = new StrBuilder(); List<String> tokens = new ArrayList<String>(); int pos = offset; while (pos >= 0 && pos < count) { pos = readNextToken(chars, pos, count, buf, tokens); if (pos >= count) { addToken(tokens, \\\"\\\"); } } return tokens; }"
                    ],
                    [
                        0.9686778783798218,
                        "public static String chop(String str) { if (str == null) { return null; } int strLen = str.length(); if (strLen < 2) { return EMPTY; } int lastIdx = strLen - 1; String ret = str.substring(0, lastIdx); char last = str.charAt(lastIdx); if (last == CharUtils.LF) { if (ret.charAt(lastIdx - 1) == CharUtils.CR) { return ret.substring(0, lastIdx - 1); } } return ret; }"
                    ],
                    [
                        0.9684954881668091,
                        "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0 ? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer; int len = size - strLen + 1; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j) != thisBuf[i + j]) { continue outer; } } return i; } return -1; }"
                    ],
                    [
                        0.9683792591094971,
                        "public static Boolean xor(Boolean[] array) { if (array == null) { throw new IllegalArgumentException(\\\"The Array must not be null\\\"); } else if (array.length == 0) { throw new IllegalArgumentException(\\\"Array is empty\\\"); } boolean[] primitive = null; try { primitive = ArrayUtils.toPrimitive(array); } catch (NullPointerException ex) { throw new IllegalArgumentException(\\\"The array must not contain any null elements\\\"); } return xor(primitive) ? Boolean.TRUE : Boolean.FALSE; }"
                    ],
                    [
                        0.9682272672653198,
                        "public static float max(float[] array) { if (array == null) { throw new IllegalArgumentException(\\\"The Array must not be null\\\"); } else if (array.length == 0) { throw new IllegalArgumentException(\\\"Array cannot be empty.\\\"); } float max = array[0]; for (int j = 1; j < array.length; j++) { if (Float.isNaN(array[j])) { return Float.NaN; } if (array[j] > max) { max = array[j]; } } return max; }"
                    ]
                ],
                "directly_related_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringCharArrayWithSupplementaryChars"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n    // IndexOfAnyBut chars\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));        \n    }\n```\n#Error message: junit.framework.AssertionFailedError: expected:<2> but was:<3>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:593)  assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null || cs.length() == 0 || searchChars.length == 0) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        boolean found = false;\n        for (char searchChar : searchChars) {\n            if (searchChar == codePoint || (Character.isSupplementaryCodePoint(codePoint) && Character.toChars(codePoint)[0] == searchChar)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            i++; // Skip the next char as we've processed a supplementary character\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i += Character.charCount(cs.charAt(i))) {\n            int codePoint = Character.codePointAt(cs, i);\n            for (int j = 0; j < searchLen; j++) {\n                if (Character.codePointAt(searchChars, j) == codePoint) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                            "\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer:\n    for (int i = 0; i < csLen; i++) {\n        int ch = Character.codePointAt(cs, i);\n        int charCount = Character.charCount(ch);\n        if (charCount > 1) {\n            i++; // Increment i an additional time to skip both units of the surrogate pair\n        }\n        boolean found = false;\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                found = true;\n                continue outer;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null || cs.length() == 0 || searchChars.length == 0) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            int codePoint = Character.codePointAt(cs, i);\n            boolean matched = false;\n            for (char searchChar : searchChars) {\n                if (codePoint == searchChar) {\n                    matched = true;\n                    break;\n                }\n            }\n            if (!matched) {\n                return i;\n            }\n            if (Character.isSupplementaryCodePoint(codePoint)) {\n                i++;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                            "\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        outer:\n        for (int i = 0; i < csLen; i += Character.charCount(cs.codePointAt(i))) {\n            int codePoint = cs.codePointAt(i);\n            for (char searchChar : searchChars) {\n                if (Character.codePointAt(new char[]{searchChar}, 0) == codePoint) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                            "\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return -1;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer:\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        boolean isSurrogate = Character.isSupplementaryCodePoint(codePoint);\n        if (isSurrogate) {\n            i++;\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == codePoint) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n",
                            "\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i += Character.charCount(cs.codePointAt(i))) {\n            int codePoint = cs.codePointAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == codePoint) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                            "\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer:\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        int charCount = Character.charCount(codePoint);\n        if (charCount == 2) {\n            i++; // Skip the next index for surrogate pair\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == codePoint) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer:\n    for (int i = 0; i < csLen; i += Character.charCount(cs.codePointAt(i))) {\n        int cp = cs.codePointAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == cp) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer:\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        boolean isSupplementary = Character.isSupplementaryCodePoint(codePoint);\n        if (isSupplementary) {\n            i++; // skip the next char as it's the low surrogate\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == codePoint) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n"
                        ],
                        "plausible_patches": [
                            "\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i += Character.charCount(cs.charAt(i))) {\n            int codePoint = Character.codePointAt(cs, i);\n            for (int j = 0; j < searchLen; j++) {\n                if (Character.codePointAt(searchChars, j) == codePoint) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }\n"
                        ],
                        "evaluation_done": true
                    }
                }
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 1569,
                "end_loc": 1581,
                "buggy_function": "    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                "fixed_function": "    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            boolean chFound = searchChars.indexOf(ch) >= 0;\n            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {\n                char ch2 = str.charAt(i + 1);\n                if (chFound && searchChars.indexOf(ch2) < 0) {\n                    return i;\n                }\n            } else {\n                if (!chFound) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                "comment": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n",
                "normalized_body": [
                    "public static int indexOfAnyBut(String str, String searchChars) { if (isEmpty(str) || isEmpty(searchChars)) { return INDEX_NOT_FOUND; } int strLen = str.length(); for (int i = 0; i < strLen; i++) { char ch = str.charAt(i); if (searchChars.indexOf(ch) < 0) { return i; } } return INDEX_NOT_FOUND; }"
                ],
                "top_similar_methods": [
                    [
                        1.0,
                        "public static int indexOfAnyBut(String str, String searchChars) { if (isEmpty(str) || isEmpty(searchChars)) { return INDEX_NOT_FOUND; } int strLen = str.length(); for (int i = 0; i < strLen; i++) { char ch = str.charAt(i); if (searchChars.indexOf(ch) < 0) { return i; } } return INDEX_NOT_FOUND; }"
                    ],
                    [
                        0.9761266112327576,
                        "public static String substringAfter(String str, String separator) { if (isEmpty(str)) { return str; } if (separator == null) { return EMPTY; } int pos = str.indexOf(separator); if (pos == INDEX_NOT_FOUND) { return EMPTY; } return str.substring(pos + separator.length()); }"
                    ],
                    [
                        0.9740298390388489,
                        "public static boolean isBlank(CharSequence cs) { int strLen; if (cs == null || (strLen = cs.length()) == 0) { return true; } for (int i = 0; i < strLen; i++) { if ((Character.isWhitespace(cs.charAt(i)) == false)) { return false; } } return true; }"
                    ],
                    [
                        0.9735985994338989,
                        "public static String substringBefore(String str, String separator) { if (isEmpty(str) || separator == null) { return str; } if (separator.length() == 0) { return EMPTY; } int pos = str.indexOf(separator); if (pos == INDEX_NOT_FOUND) { return str; } return str.substring(0, pos); }"
                    ],
                    [
                        0.9735585451126099,
                        "public static String right(String str, int len) { if (str == null) { return null; } if (len < 0) { return EMPTY; } if (str.length() <= len) { return str; } return str.substring(str.length() - len); }"
                    ],
                    [
                        0.9734784960746765,
                        "public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) { if (ArrayUtils.isEmpty(array)) { return INDEX_NOT_FOUND; } if (startIndex < 0) { startIndex = 0; } for (int i = startIndex; i < array.length; i++) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; }"
                    ],
                    [
                        0.9731236696243286,
                        "public static boolean isAsciiPrintable(CharSequence cs) { if (cs == null) { return false; } int sz = cs.length(); for (int i = 0; i < sz; i++) { if (CharUtils.isAsciiPrintable(cs.charAt(i)) == false) { return false; } } return true; }"
                    ],
                    [
                        0.9727153182029724,
                        "public StrBuilder appendWithSeparators(Iterable<?> iterable, String separator) { if (iterable != null) { separator = (separator == null ? \\\"\\\" : separator); Iterator<?> it = iterable.iterator(); while (it.hasNext()) { append(it.next()); if (it.hasNext()) { append(separator); } } } return this; }"
                    ],
                    [
                        0.972242534160614,
                        "private static boolean endsWith(String str, String suffix, boolean ignoreCase) { if (str == null || suffix == null) { return str == null && suffix == null; } if (suffix.length() > str.length()) { return false; } int strOffset = str.length() - suffix.length(); return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length()); }"
                    ],
                    [
                        0.9717031717300415,
                        "public static String rightPad(String str, int size, char padChar) { if (str == null) { return null; } int pads = size - str.length(); if (pads <= 0) { return str; } if (pads > PAD_LIMIT) { return rightPad(str, size, String.valueOf(padChar)); } return str.concat(padding(pads, padChar)); }"
                    ],
                    [
                        0.9716538190841675,
                        "public static boolean startsWithAny(String string, String[] searchStrings) { if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) { return false; } for (int i = 0; i < searchStrings.length; i++) { String searchString = searchStrings[i]; if (StringUtils.startsWith(string, searchString)) { return true; } } return false; }"
                    ]
                ],
                "directly_related_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));        \n    }\n```\n#Error message: junit.framework.AssertionFailedError: expected:<2> but was:<3>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringStringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:616)  assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return -1;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length();\n    int codePoint;\n    for (int i = 0; i < strLen; i += Character.charCount(codePoint)) {\n        codePoint = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            if (searchChars.codePointAt(j) == codePoint) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n    }\n    return -1;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length();\n    for (int i = 0; i < strLen; i++) {\n        int codePoint = str.codePointAt(i);\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            if (searchChars.indexOf(str.charAt(i)) < 0 \n                && (i+1 >= strLen || searchChars.indexOf(str.charAt(i+1)) < 0)) {\n                return i;\n            }\n            i++; // Skip the next index, as it's part of the supplementary character\n        } else if (searchChars.indexOf(codePoint) < 0) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length();\n    for (int i = 0; i < strLen; i++) {\n        int ch = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            if (searchChars.codePointAt(j) == ch) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n        i += Character.charCount(ch) - 1;\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return -1;\n    }\n    int strLen = str.length();\n    int searchCharLen = searchChars.length();\n    for (int i = 0; i < strLen; i += Character.charCount(str.codePointAt(i))) {\n        int ch = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchCharLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            int searchCh = searchChars.codePointAt(j);\n            if (ch == searchCh) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n    }\n    return -1;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length();\n    for (int i = 0; i < strLen; i++) {\n        int codePoint = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            if (codePoint == searchChars.codePointAt(j)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n        i += Character.charCount(codePoint) - 1;\n    }\n    return INDEX_NOT_FOUND;\n}\n\nprivate static boolean isEmpty(String str) {\n    return str == null || str.length() == 0;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length();\n    for (int i = 0; i < strLen; i += Character.charCount(str.codePointAt(i))) {\n        int codePoint = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            if (codePoint == searchChars.codePointAt(j)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchCharsLen = searchChars.length();\n    \n    boolean hasSupplementary = false;\n    for (int i = 0; i < searchCharsLen; i++) {\n        if (Character.isSupplementaryCodePoint(searchChars.codePointAt(i))) {\n            hasSupplementary = true;\n            break;\n        }\n    }\n\n    for (int i = 0; i < strLen; ) {\n        int cp = str.codePointAt(i);\n        boolean found = false;\n\n        for (int j = 0; j < searchCharsLen; ) {\n            int searchCp = searchChars.codePointAt(j);\n            if (cp == searchCp) {\n                found = true;\n                break;\n            }\n            j += Character.charCount(searchCp);\n        }\n\n        if (!found) {\n            return i;\n        }\n        i += Character.charCount(cp);\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchCharsLen = searchChars.length();\n    for (int i = 0; i < strLen; i += Character.charCount(str.codePointAt(i))) {\n        int ch = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchCharsLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            int searchCh = searchChars.codePointAt(j);\n            if (ch == searchCh) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchCharsLen = searchChars.length();\n\n    for (int i = 0; i < strLen; i++) {\n        int codePoint = str.codePointAt(i);\n        boolean found = false;\n\n        for (int j = 0; j < searchCharsLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            int searchCharPoint = searchChars.codePointAt(j);\n            if (codePoint == searchCharPoint) {\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            return i;\n        }\n\n        // Move to the next code point\n        i += Character.charCount(codePoint) - 1;\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length();\n    int i = 0;\n    while (i < strLen) {\n        int codePoint = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchLen; ) {\n            int searchCodePoint = searchChars.codePointAt(j);\n            if (codePoint == searchCodePoint) {\n                found = true;\n                break;\n            }\n            j += Character.charCount(searchCodePoint);\n        }\n        if (!found) {\n            return i;\n        }\n        i += Character.charCount(codePoint);\n    }\n    return INDEX_NOT_FOUND;\n}\n"
                        ],
                        "plausible_patches": [
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return -1;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length();\n    int codePoint;\n    for (int i = 0; i < strLen; i += Character.charCount(codePoint)) {\n        codePoint = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            if (searchChars.codePointAt(j) == codePoint) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n    }\n    return -1;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length();\n    for (int i = 0; i < strLen; i++) {\n        int ch = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            if (searchChars.codePointAt(j) == ch) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n        i += Character.charCount(ch) - 1;\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return -1;\n    }\n    int strLen = str.length();\n    int searchCharLen = searchChars.length();\n    for (int i = 0; i < strLen; i += Character.charCount(str.codePointAt(i))) {\n        int ch = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchCharLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            int searchCh = searchChars.codePointAt(j);\n            if (ch == searchCh) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n    }\n    return -1;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length();\n    for (int i = 0; i < strLen; i++) {\n        int codePoint = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            if (codePoint == searchChars.codePointAt(j)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n        i += Character.charCount(codePoint) - 1;\n    }\n    return INDEX_NOT_FOUND;\n}\n\nprivate static boolean isEmpty(String str) {\n    return str == null || str.length() == 0;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length();\n    for (int i = 0; i < strLen; i += Character.charCount(str.codePointAt(i))) {\n        int codePoint = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            if (codePoint == searchChars.codePointAt(j)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchCharsLen = searchChars.length();\n    \n    boolean hasSupplementary = false;\n    for (int i = 0; i < searchCharsLen; i++) {\n        if (Character.isSupplementaryCodePoint(searchChars.codePointAt(i))) {\n            hasSupplementary = true;\n            break;\n        }\n    }\n\n    for (int i = 0; i < strLen; ) {\n        int cp = str.codePointAt(i);\n        boolean found = false;\n\n        for (int j = 0; j < searchCharsLen; ) {\n            int searchCp = searchChars.codePointAt(j);\n            if (cp == searchCp) {\n                found = true;\n                break;\n            }\n            j += Character.charCount(searchCp);\n        }\n\n        if (!found) {\n            return i;\n        }\n        i += Character.charCount(cp);\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchCharsLen = searchChars.length();\n    for (int i = 0; i < strLen; i += Character.charCount(str.codePointAt(i))) {\n        int ch = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchCharsLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            int searchCh = searchChars.codePointAt(j);\n            if (ch == searchCh) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchCharsLen = searchChars.length();\n\n    for (int i = 0; i < strLen; i++) {\n        int codePoint = str.codePointAt(i);\n        boolean found = false;\n\n        for (int j = 0; j < searchCharsLen; j += Character.charCount(searchChars.codePointAt(j))) {\n            int searchCharPoint = searchChars.codePointAt(j);\n            if (codePoint == searchCharPoint) {\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            return i;\n        }\n\n        // Move to the next code point\n        i += Character.charCount(codePoint) - 1;\n    }\n    return INDEX_NOT_FOUND;\n}\n",
                            "\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (str == null || searchChars == null) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length();\n    int i = 0;\n    while (i < strLen) {\n        int codePoint = str.codePointAt(i);\n        boolean found = false;\n        for (int j = 0; j < searchLen; ) {\n            int searchCodePoint = searchChars.codePointAt(j);\n            if (codePoint == searchCodePoint) {\n                found = true;\n                break;\n            }\n            j += Character.charCount(searchCodePoint);\n        }\n        if (!found) {\n            return i;\n        }\n        i += Character.charCount(codePoint);\n    }\n    return INDEX_NOT_FOUND;\n}\n"
                        ],
                        "evaluation_done": true
                    }
                }
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 1673,
                "end_loc": 1690,
                "buggy_function": "    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }\n",
                "fixed_function": "    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int csLast = csLen - 1;\n        int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                            return false;\n                        }\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return false;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n",
                "comment": "    // ContainsNone\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n",
                "normalized_body": [
                    "public static boolean containsNone(CharSequence cs, char[] searchChars) { if (cs == null || searchChars == null) { return true; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { return false; } } } return true; }"
                ],
                "top_similar_methods": [
                    [
                        1.0,
                        "public static boolean containsNone(CharSequence cs, char[] searchChars) { if (cs == null || searchChars == null) { return true; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { return false; } } } return true; }"
                    ],
                    [
                        0.967257022857666,
                        "public static int indexOfAny(CharSequence cs, char[] searchChars) { if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) { return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { return i; } } } return INDEX_NOT_FOUND; }"
                    ],
                    [
                        0.962700366973877,
                        "public static char[] addAll(char[] array1, char... array2) { if (array1 == null) { return clone(array2); } else if (array2 == null) { return clone(array1); } char[] joinedArray = new char[array1.length + array2.length]; System.arraycopy(array1, 0, joinedArray, 0, array1.length); System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); return joinedArray; }"
                    ],
                    [
                        0.962099015712738,
                        "private void replaceImpl(int startIndex, int endIndex, int removeLen, String insertStr, int insertLen) { int newSize = size - removeLen + insertLen; if (insertLen != removeLen) { ensureCapacity(newSize); System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex); size = newSize; } if (insertLen > 0) { insertStr.getChars(0, insertLen, buffer, startIndex); } }"
                    ],
                    [
                        0.9620815515518188,
                        "public static long[] toPrimitive(Long[] array, long valueForNull) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_LONG_ARRAY; } final long[] result = new long[array.length]; for (int i = 0; i < array.length; i++) { Long b = array[i]; result[i] = (b == null ? valueForNull : b.longValue()); } return result; }"
                    ],
                    [
                        0.9619725346565247,
                        "public static int count(String str, String[] set) { if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) { return 0; } CharSet chars = CharSet.getInstance(set); int count = 0; char[] chrs = str.toCharArray(); int sz = chrs.length; for (int i = 0; i < sz; i++) { if (chars.contains(chrs[i])) { count++; } } return count; }"
                    ],
                    [
                        0.9616957306861877,
                        "public static String remove(String str, char remove) { if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) { return str; } char[] chars = str.toCharArray(); int pos = 0; for (int i = 0; i < chars.length; i++) { if (chars[i] != remove) { chars[pos++] = chars[i]; } } return new String(chars, 0, pos); }"
                    ],
                    [
                        0.9616582989692688,
                        "@Override public int translate(CharSequence input, int index, Writer out) throws IOException { int max = longest; if (index + longest > input.length()) { max = input.length() - index; } for (int i = max; i >= shortest; i--) { CharSequence subSeq = input.subSequence(index, index + i); CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; } } return 0; }"
                    ],
                    [
                        0.9612727165222168,
                        "public static int indexOfAny(String str, String[] searchStrs) { if (str == null || searchStrs == null) { return INDEX_NOT_FOUND; } int sz = searchStrs.length; int ret = Integer.MAX_VALUE; int tmp = 0; for (int i = 0; i < sz; i++) { String search = searchStrs[i]; if (search == null) { continue; } tmp = str.indexOf(search); if (tmp == INDEX_NOT_FOUND) { continue; } if (tmp < ret) { ret = tmp; } } return (ret == Integer.MAX_VALUE) ? INDEX_NOT_FOUND : ret; }"
                    ],
                    [
                        0.9605730772018433,
                        "public static float[] toPrimitive(Float[] array, float valueForNull) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_FLOAT_ARRAY; } final float[] result = new float[array.length]; for (int i = 0; i < array.length; i++) { Float b = array[i]; result[i] = (b == null ? valueForNull : b.floatValue()); } return result; }"
                    ],
                    [
                        0.9601326584815979,
                        "public static double min(double[] array) { if (array == null) { throw new IllegalArgumentException(\\\"The Array must not be null\\\"); } else if (array.length == 0) { throw new IllegalArgumentException(\\\"Array cannot be empty.\\\"); } double min = array[0]; for (int i = 1; i < array.length; i++) { if (Double.isNaN(array[i])) { return Double.NaN; } if (array[i] < min) { min = array[i]; } } return min; }"
                    ]
                ],
                "directly_related_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithSupplementaryChars",
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithSupplementaryChars",
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithBadSupplementaryChars",
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithBadSupplementaryChars"
                ],
                "generation": {
                    "1": {
                        "prompt": "You are an expert Java developer. Below is a buggy method from a large Java project. This method causes one or more test failures.\nYour task is to fix the bug in this method. Use the provided test failure(s) to guide your reasoning.\n\n---\n\n## Buggy Method\n\n```java\n    // ContainsNone\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }\n\n```\n---\n\n## Failing Test Case(s)\n\n \n#Test method 1:\n```java\n    public void testContainsNone_CharArrayWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\n    }\n```\n#Error message: junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:327)  assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\n \n#Test method 2:\n```java\n    public void testContainsNone_StringWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));\n    }\n```\n#Error message: junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:381)  assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));\n \n#Test method 3:\n```java\n    public void testContainsNone_StringWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));        \n    }\n```\n#Error message: junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:362)  assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));\n \n#Test method 4:\n```java\n    public void testContainsNone_CharArrayWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));\n    }\n```\n#Error message: junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:308)  assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));\n\n---\n\n## Your Goal\n\nFix the buggy method. Return only the fixed Java method. Do not include explanations or other text.\n",
                        "patches": [
                            "\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLen; j++) {\n            if (Character.codePointAt(searchChars, j) == codePoint) {\n                return false;\n            }\n        }\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            i++;\n        }\n    }\n    return true;\n}\n",
                            "\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        int ch = Character.codePointAt(cs, i);\n        if (Character.isSupplementaryCodePoint(ch)) {\n            i++;\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n",
                            "\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    int i = 0;\n    while (i < csLen) {\n        int codePoint = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLen; j++) {\n            if (Character.codePointAt(searchChars, j) == codePoint) {\n                return false;\n            }\n        }\n        i += Character.charCount(codePoint);\n    }\n    return true;\n}\n",
                            "\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    int csOffset = 0;\n    while (csOffset < csLen) {\n        int codePoint = Character.codePointAt(cs, csOffset);\n        for (int j = 0; j < searchLen; j++) {\n            if (Character.codePointAt(searchChars, j) == codePoint) {\n                return false;\n            }\n            // If it's a supplementary character, skip the low surrogate\n            if (Character.isSupplementaryCodePoint(codePoint) && j < searchLen - 1) {\n                ++j;\n            }\n        }\n        csOffset += Character.charCount(codePoint);\n    }\n    return true;\n}\n",
                            "\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outerLoop:\n    for (int i = 0; i < csLen;) {\n        int codePoint = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLen; j++) {\n            if (codePoint == searchChars[j] || (j < searchLen - 1 && codePoint == Character.codePointAt(new String(searchChars, j, 2), 0))) {\n                return false;\n            }\n            if (Character.isHighSurrogate(searchChars[j]) && j < searchLen - 1) {\n                j++;\n            }\n        }\n        i += Character.charCount(codePoint);\n    }\n    return true;\n}\n",
                            "\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    int i = 0;\n    while (i < csLen) {\n        int codePoint = Character.codePointAt(cs, i);\n        int charCount = Character.charCount(codePoint);\n        for (int j = 0; j < searchLen; j++) {\n            if (Character.codePointAt(searchChars, j) == codePoint) {\n                return false;\n            }\n        }\n        i += charCount;\n    }\n    return true;\n}\n",
                            "\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    int csOffset;\n    for (int i = 0; i < csLen; i += Character.charCount(csOffset = Character.codePointAt(cs, i))) {\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == csOffset) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n",
                            "\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    int csOffset = 0;\n    \n    while (csOffset < csLen) {\n        int codePoint = Character.codePointAt(cs, csOffset);\n        for (int j = 0; j < searchLen; j++) {\n            if (Character.codePointAt(searchChars, j) == codePoint) {\n                return false;\n            }\n        }\n        csOffset += Character.charCount(codePoint);\n    }\n    \n    return true;\n}\n",
                            "\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer:\n    for (int i = 0; i < csLen; i++) {\n        int codePoint = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLen; j++) {\n            if (Character.codePointAt(searchChars, j) == codePoint) {\n                // If a match is found, return false.\n                return false;\n            }\n            // Increment j if it's a low surrogate\n            if (Character.isLowSurrogate(searchChars[j]) && j + 1 < searchLen && Character.isHighSurrogate(searchChars[j + 1])) {\n                j++; // Increment j to skip the high surrogate\n            }\n        }\n        // Skip the next character if it's a low surrogate\n        if (Character.isHighSurrogate(cs.charAt(i)) && i + 1 < csLen && Character.isLowSurrogate(cs.charAt(i + 1))) {\n            i++;\n        }\n    }\n    return true;\n}\n",
                            "\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    int searchCharCodePointCount = Character.codePointCount(searchChars, 0, searchLen);\n    for (int i = 0; i < csLen; ) {\n        int codePoint = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchCharCodePointCount; ) {\n            int searchCodePoint = Character.codePointAt(searchChars, j);\n            if (codePoint == searchCodePoint) {\n                return false;\n            }\n            j += Character.charCount(searchCodePoint);\n        }\n        i += Character.charCount(codePoint);\n    }\n    return true;\n}\n"
                        ],
                        "evaluation_done": true
                    }
                }
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testContainsNone_CharArrayWithSupplementaryChars",
                "src": "    public void testContainsNone_CharArrayWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:174)\n\tat junit.framework.Assert.assertEquals(Assert.java:181)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:341)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:327)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:327)  assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));"
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testContainsNone_StringWithSupplementaryChars",
                "src": "    public void testContainsNone_StringWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));\n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:174)\n\tat junit.framework.Assert.assertEquals(Assert.java:181)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:341)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:381)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:381)  assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));"
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringCharArrayWithBadSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testContainsAny_StringCharArrayWithBadSupplementaryChars",
                "src": "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));\n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:174)\n\tat junit.framework.Assert.assertEquals(Assert.java:181)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:341)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArrayWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:138)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArrayWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:138)  assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));"
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testIndexOfAnyBut_StringStringWithSupplementaryChars",
                "src": "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));        \n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringStringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:616)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringStringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:616)  assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));"
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringWithBadSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testContainsAny_StringWithBadSupplementaryChars",
                "src": "    public void testContainsAny_StringWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));\n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:174)\n\tat junit.framework.Assert.assertEquals(Assert.java:181)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:341)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:186)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:186)  assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));"
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringCharArrayWithSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testIndexOfAny_StringCharArrayWithSupplementaryChars",
                "src": "    public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));    \n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:528)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:528)  assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));"
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringCharArrayWithSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testIndexOfAnyBut_StringCharArrayWithSupplementaryChars",
                "src": "    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));        \n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:593)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:593)  assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));"
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithBadSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testContainsNone_StringWithBadSupplementaryChars",
                "src": "    public void testContainsNone_StringWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));        \n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:174)\n\tat junit.framework.Assert.assertEquals(Assert.java:181)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:341)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:362)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:362)  assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));"
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringStringWithSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testIndexOfAny_StringStringWithSupplementaryChars",
                "src": "    public void testIndexOfAny_StringStringWithSupplementaryChars() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));    \n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:571)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:571)  assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));"
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithBadSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testContainsNone_CharArrayWithBadSupplementaryChars",
                "src": "    public void testContainsNone_CharArrayWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));\n    }",
                "error_msg": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:174)\n\tat junit.framework.Assert.assertEquals(Assert.java:181)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:341)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:308)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_msg": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:308)  assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));"
            }
        },
        "evaluation_done": true
    }
}